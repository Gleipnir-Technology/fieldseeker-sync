// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sql

import (
	"context"
	"fmt"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	testutils "github.com/stephenafamo/bob/test/utils"
)

func TestAllTaskAudioReview(t *testing.T) {
	t.Run("Base", func(t *testing.T) {
		var sb strings.Builder

		query := AllTaskAudioReview()

		if _, err := query.WriteQuery(t.Context(), &sb, 1); err != nil {
			t.Fatal(err)
		}

		if diff := cmp.Diff(allTaskAudioReviewSQL, sb.String()); diff != "" {
			t.Fatalf("unexpected result (-got +want):\n%s", diff)
		}
	})

	t.Run("Mod", func(t *testing.T) {
		var sb strings.Builder

		query := AllTaskAudioReview()

		if _, err := psql.Select(query).WriteQuery(t.Context(), &sb, 1); err != nil {
			t.Fatal(err)
		}

		queryDiff, err := testutils.QueryDiff(allTaskAudioReviewSQL, sb.String(), formatQuery)
		if err != nil {
			t.Fatal(err)
		}
		if queryDiff != "" {
			fmt.Println(sb.String())
			t.Fatalf("unexpected result (-got +want):\n%s", queryDiff)
		}
	})

	t.Run("Scanning", func(t *testing.T) {
		if testDB == nil {
			t.Skip("skipping test, no DSN provided")
		}

		ctxTx, cancel := context.WithCancel(t.Context())
		defer cancel()

		tx, err := testDB.Begin(ctxTx)
		if err != nil {
			t.Fatalf("Error starting transaction: %v", err)
		}

		defer func() {
			if err := tx.Rollback(ctxTx); err != nil {
				t.Fatalf("Error rolling back transaction: %v", err)
			}
		}()

		query, args, err := bob.Build(ctxTx, psql.Select(AllTaskAudioReview()))
		if err != nil {
			t.Fatal(err)
		}

		rows, err := tx.QueryContext(ctxTx, query, args...)
		if err != nil {
			t.Fatal(err)
		}
		defer rows.Close()

		columns, err := rows.Columns()
		if err != nil {
			t.Fatal(err)
		}

		if len(columns) != 7 {
			t.Fatalf("expected %d columns, got %d", 7, len(columns))
		}

		if columns[0] != "id" {
			t.Fatalf("expected column %d to be %s, got %s", 0, "id", columns[0])
		}

		if columns[1] != "completed_by" {
			t.Fatalf("expected column %d to be %s, got %s", 1, "completed_by", columns[1])
		}

		if columns[2] != "created" {
			t.Fatalf("expected column %d to be %s, got %s", 2, "created", columns[2])
		}

		if columns[3] != "needs_review" {
			t.Fatalf("expected column %d to be %s, got %s", 3, "needs_review", columns[3])
		}

		if columns[4] != "note_audio_uuid" {
			t.Fatalf("expected column %d to be %s, got %s", 4, "note_audio_uuid", columns[4])
		}

		if columns[5] != "note_audio_version" {
			t.Fatalf("expected column %d to be %s, got %s", 5, "note_audio_version", columns[5])
		}

		if columns[6] != "reviewed_by" {
			t.Fatalf("expected column %d to be %s, got %s", 6, "reviewed_by", columns[6])
		}
	})
}
