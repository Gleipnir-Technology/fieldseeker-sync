// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sql

import (
	"context"
	_ "embed"
	"io"
	"iter"

	"github.com/aarondl/opt/null"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

//go:embed task_audio_review_completed_by.bob.sql
var formattedQueries_task_audio_review_completed_by string

var taskAudioReviewCompletedBySQL = formattedQueries_task_audio_review_completed_by[164:503]

type TaskAudioReviewCompletedByQuery = orm.ModQuery[*dialect.SelectQuery, taskAudioReviewCompletedBy, TaskAudioReviewCompletedByRow, []TaskAudioReviewCompletedByRow, taskAudioReviewCompletedByTransformer]

func TaskAudioReviewCompletedBy(Username string) *TaskAudioReviewCompletedByQuery {
	var expressionTypArgs taskAudioReviewCompletedBy

	expressionTypArgs.Username = psql.Arg(Username)

	return &TaskAudioReviewCompletedByQuery{
		Query: orm.Query[taskAudioReviewCompletedBy, TaskAudioReviewCompletedByRow, []TaskAudioReviewCompletedByRow, taskAudioReviewCompletedByTransformer]{
			ExecQuery: orm.ExecQuery[taskAudioReviewCompletedBy]{
				BaseQuery: bob.BaseQuery[taskAudioReviewCompletedBy]{
					Expression: expressionTypArgs,
					Dialect:    dialect.Dialect,
					QueryType:  bob.QueryTypeSelect,
				},
			},
			Scanner: func(context.Context, []string) (func(*scan.Row) (any, error), func(any) (TaskAudioReviewCompletedByRow, error)) {
				return func(row *scan.Row) (any, error) {
						var t TaskAudioReviewCompletedByRow
						row.ScheduleScanByIndex(0, &t.TaskID)
						row.ScheduleScanByIndex(1, &t.NoteAudioUUID)
						row.ScheduleScanByIndex(2, &t.Transcription)
						return &t, nil
					}, func(v any) (TaskAudioReviewCompletedByRow, error) {
						return *(v.(*TaskAudioReviewCompletedByRow)), nil
					}
			},
		},
		Mod: bob.ModFunc[*dialect.SelectQuery](func(q *dialect.SelectQuery) {
			q.AppendSelect(expressionTypArgs.subExpr(8, 106))
			q.SetTable(expressionTypArgs.subExpr(113, 283))
			q.AppendWhere(expressionTypArgs.subExpr(292, 338))
		}),
	}
}

type TaskAudioReviewCompletedByRow = struct {
	TaskID        int32            `db:"task_id"`
	NoteAudioUUID string           `db:"note_audio_uuid"`
	Transcription null.Val[string] `db:"transcription"`
}

type taskAudioReviewCompletedByTransformer = bob.SliceTransformer[TaskAudioReviewCompletedByRow, []TaskAudioReviewCompletedByRow]

type taskAudioReviewCompletedBy struct {
	Username bob.Expression
}

func (o taskAudioReviewCompletedBy) args() iter.Seq[orm.ArgWithPosition] {
	return func(yield func(arg orm.ArgWithPosition) bool) {
		if !yield(orm.ArgWithPosition{
			Name:       "username",
			Start:      335,
			Stop:       337,
			Expression: o.Username,
		}) {
			return
		}
	}
}

func (o taskAudioReviewCompletedBy) raw(from, to int) string {
	return taskAudioReviewCompletedBySQL[from:to]
}

func (o taskAudioReviewCompletedBy) subExpr(from, to int) bob.Expression {
	return orm.ArgsToExpression(taskAudioReviewCompletedBySQL, from, to, o.args())
}

func (o taskAudioReviewCompletedBy) WriteSQL(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
	return o.subExpr(0, len(taskAudioReviewCompletedBySQL)).WriteSQL(ctx, w, d, start)
}
