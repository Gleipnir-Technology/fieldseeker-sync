// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sql

import (
	"context"
	_ "embed"
	"io"
	"iter"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

//go:embed task_audio_review.bob.sql
var formattedQueries_task_audio_review string

var taskAudioReviewOutstandingSQL = formattedQueries_task_audio_review[164:540]

type TaskAudioReviewOutstandingQuery = orm.ModQuery[*dialect.SelectQuery, taskAudioReviewOutstanding, TaskAudioReviewOutstandingRow, []TaskAudioReviewOutstandingRow, taskAudioReviewOutstandingTransformer]

func TaskAudioReviewOutstanding() *TaskAudioReviewOutstandingQuery {
	var expressionTypArgs taskAudioReviewOutstanding

	return &TaskAudioReviewOutstandingQuery{
		Query: orm.Query[taskAudioReviewOutstanding, TaskAudioReviewOutstandingRow, []TaskAudioReviewOutstandingRow, taskAudioReviewOutstandingTransformer]{
			ExecQuery: orm.ExecQuery[taskAudioReviewOutstanding]{
				BaseQuery: bob.BaseQuery[taskAudioReviewOutstanding]{
					Expression: expressionTypArgs,
					Dialect:    dialect.Dialect,
					QueryType:  bob.QueryTypeSelect,
				},
			},
			Scanner: func(context.Context, []string) (func(*scan.Row) (any, error), func(any) (TaskAudioReviewOutstandingRow, error)) {
				return func(row *scan.Row) (any, error) {
						var t TaskAudioReviewOutstandingRow
						row.ScheduleScanByIndex(0, &t.TaskID)
						row.ScheduleScanByIndex(1, &t.TaskCreated)
						row.ScheduleScanByIndex(2, &t.NeedsReview)
						row.ScheduleScanByIndex(3, &t.AudioDuration)
						row.ScheduleScanByIndex(4, &t.CreatorName)
						return &t, nil
					}, func(v any) (TaskAudioReviewOutstandingRow, error) {
						return *(v.(*TaskAudioReviewOutstandingRow)), nil
					}
			},
		},
		Mod: bob.ModFunc[*dialect.SelectQuery](func(q *dialect.SelectQuery) {
			q.AppendSelect(expressionTypArgs.subExpr(12, 160))
			q.SetTable(expressionTypArgs.subExpr(171, 339))
			q.AppendWhere(expressionTypArgs.subExpr(351, 376))
		}),
	}
}

type TaskAudioReviewOutstandingRow = struct {
	TaskID        int32            `db:"task_id"`
	TaskCreated   time.Time        `db:"task_created"`
	NeedsReview   bool             `db:"needs_review"`
	AudioDuration null.Val[string] `db:"audio_duration"`
	CreatorName   null.Val[string] `db:"creator_name"`
}

type taskAudioReviewOutstandingTransformer = bob.SliceTransformer[TaskAudioReviewOutstandingRow, []TaskAudioReviewOutstandingRow]

type taskAudioReviewOutstanding struct{}

func (o taskAudioReviewOutstanding) args() iter.Seq[orm.ArgWithPosition] {
	return func(yield func(arg orm.ArgWithPosition) bool) {
	}
}

func (o taskAudioReviewOutstanding) raw(from, to int) string {
	return taskAudioReviewOutstandingSQL[from:to]
}

func (o taskAudioReviewOutstanding) subExpr(from, to int) bob.Expression {
	return orm.ArgsToExpression(taskAudioReviewOutstandingSQL, from, to, o.args())
}

func (o taskAudioReviewOutstanding) WriteSQL(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
	return o.subExpr(0, len(taskAudioReviewOutstandingSQL)).WriteSQL(ctx, w, d, start)
}
