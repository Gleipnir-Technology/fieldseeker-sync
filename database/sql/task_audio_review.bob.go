// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sql

import (
	"context"
	_ "embed"
	"io"
	"iter"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

//go:embed task_audio_review.bob.sql
var formattedQueries_task_audio_review string

var allTaskAudioReviewSQL = formattedQueries_task_audio_review[156:548]

type AllTaskAudioReviewQuery = orm.ModQuery[*dialect.SelectQuery, allTaskAudioReview, AllTaskAudioReviewRow, []AllTaskAudioReviewRow, allTaskAudioReviewTransformer]

func AllTaskAudioReview() *AllTaskAudioReviewQuery {
	var expressionTypArgs allTaskAudioReview

	return &AllTaskAudioReviewQuery{
		Query: orm.Query[allTaskAudioReview, AllTaskAudioReviewRow, []AllTaskAudioReviewRow, allTaskAudioReviewTransformer]{
			ExecQuery: orm.ExecQuery[allTaskAudioReview]{
				BaseQuery: bob.BaseQuery[allTaskAudioReview]{
					Expression: expressionTypArgs,
					Dialect:    dialect.Dialect,
					QueryType:  bob.QueryTypeSelect,
				},
			},
			Scanner: func(context.Context, []string) (func(*scan.Row) (any, error), func(any) (AllTaskAudioReviewRow, error)) {
				return func(row *scan.Row) (any, error) {
						var t AllTaskAudioReviewRow
						row.ScheduleScanByIndex(0, &t.ID)
						row.ScheduleScanByIndex(1, &t.CompletedBy)
						row.ScheduleScanByIndex(2, &t.Created)
						row.ScheduleScanByIndex(3, &t.NeedsReview)
						row.ScheduleScanByIndex(4, &t.NoteAudioUUID)
						row.ScheduleScanByIndex(5, &t.NoteAudioVersion)
						row.ScheduleScanByIndex(6, &t.ReviewedBy)
						return &t, nil
					}, func(v any) (AllTaskAudioReviewRow, error) {
						return *(v.(*AllTaskAudioReviewRow)), nil
					}
			},
		},
		Mod: bob.ModFunc[*dialect.SelectQuery](func(q *dialect.SelectQuery) {
			q.AppendSelect(expressionTypArgs.subExpr(7, 369))
			q.SetTable(expressionTypArgs.subExpr(375, 392))
		}),
	}
}

type AllTaskAudioReviewRow = struct {
	ID               int32           `db:"id"`
	CompletedBy      null.Val[int32] `db:"completed_by"`
	Created          time.Time       `db:"created"`
	NeedsReview      bool            `db:"needs_review"`
	NoteAudioUUID    string          `db:"note_audio_uuid"`
	NoteAudioVersion int32           `db:"note_audio_version"`
	ReviewedBy       null.Val[int32] `db:"reviewed_by"`
}

type allTaskAudioReviewTransformer = bob.SliceTransformer[AllTaskAudioReviewRow, []AllTaskAudioReviewRow]

type allTaskAudioReview struct{}

func (o allTaskAudioReview) args() iter.Seq[orm.ArgWithPosition] {
	return func(yield func(arg orm.ArgWithPosition) bool) {
	}
}

func (o allTaskAudioReview) raw(from, to int) string {
	return allTaskAudioReviewSQL[from:to]
}

func (o allTaskAudioReview) subExpr(from, to int) bob.Expression {
	return orm.ArgsToExpression(allTaskAudioReviewSQL, from, to, o.args())
}

func (o allTaskAudioReview) WriteSQL(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
	return o.subExpr(0, len(allTaskAudioReviewSQL)).WriteSQL(ctx, w, d, start)
}
