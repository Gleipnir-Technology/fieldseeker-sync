// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSStormdrain is an object representing the database table.
type FSStormdrain struct {
	Creationdate      null.Val[int64]   `db:"creationdate" `
	Creator           null.Val[string]  `db:"creator" `
	Editdate          null.Val[int64]   `db:"editdate" `
	Editor            null.Val[string]  `db:"editor" `
	Globalid          null.Val[string]  `db:"globalid" `
	Jurisdiction      null.Val[string]  `db:"jurisdiction" `
	Lastaction        null.Val[string]  `db:"lastaction" `
	Laststatus        null.Val[string]  `db:"laststatus" `
	Lasttreatdate     null.Val[int64]   `db:"lasttreatdate" `
	Nexttreatmentdate null.Val[int64]   `db:"nexttreatmentdate" `
	Objectid          int32             `db:"objectid,pk" `
	Symbology         null.Val[string]  `db:"symbology" `
	Type              null.Val[string]  `db:"type" `
	Zone              null.Val[string]  `db:"zone" `
	Zone2             null.Val[string]  `db:"zone2" `
	CreatedDate       null.Val[int64]   `db:"created_date" `
	CreatedUser       null.Val[string]  `db:"created_user" `
	GeometryX         null.Val[float64] `db:"geometry_x" `
	GeometryY         null.Val[float64] `db:"geometry_y" `
	LastEditedDate    null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser    null.Val[string]  `db:"last_edited_user" `
	Updated           time.Time         `db:"updated" `
}

// FSStormdrainSlice is an alias for a slice of pointers to FSStormdrain.
// This should almost always be used instead of []*FSStormdrain.
type FSStormdrainSlice []*FSStormdrain

// FSStormdrains contains methods to work with the fs_stormdrain table
var FSStormdrains = psql.NewTablex[*FSStormdrain, FSStormdrainSlice, *FSStormdrainSetter]("", "fs_stormdrain", buildFSStormdrainColumns("fs_stormdrain"))

// FSStormdrainsQuery is a query on the fs_stormdrain table
type FSStormdrainsQuery = *psql.ViewQuery[*FSStormdrain, FSStormdrainSlice]

func buildFSStormdrainColumns(alias string) fsStormdrainColumns {
	return fsStormdrainColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "globalid", "jurisdiction", "lastaction", "laststatus", "lasttreatdate", "nexttreatmentdate", "objectid", "symbology", "type", "zone", "zone2", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_stormdrain"),
		tableAlias:        alias,
		Creationdate:      psql.Quote(alias, "creationdate"),
		Creator:           psql.Quote(alias, "creator"),
		Editdate:          psql.Quote(alias, "editdate"),
		Editor:            psql.Quote(alias, "editor"),
		Globalid:          psql.Quote(alias, "globalid"),
		Jurisdiction:      psql.Quote(alias, "jurisdiction"),
		Lastaction:        psql.Quote(alias, "lastaction"),
		Laststatus:        psql.Quote(alias, "laststatus"),
		Lasttreatdate:     psql.Quote(alias, "lasttreatdate"),
		Nexttreatmentdate: psql.Quote(alias, "nexttreatmentdate"),
		Objectid:          psql.Quote(alias, "objectid"),
		Symbology:         psql.Quote(alias, "symbology"),
		Type:              psql.Quote(alias, "type"),
		Zone:              psql.Quote(alias, "zone"),
		Zone2:             psql.Quote(alias, "zone2"),
		CreatedDate:       psql.Quote(alias, "created_date"),
		CreatedUser:       psql.Quote(alias, "created_user"),
		GeometryX:         psql.Quote(alias, "geometry_x"),
		GeometryY:         psql.Quote(alias, "geometry_y"),
		LastEditedDate:    psql.Quote(alias, "last_edited_date"),
		LastEditedUser:    psql.Quote(alias, "last_edited_user"),
		Updated:           psql.Quote(alias, "updated"),
	}
}

type fsStormdrainColumns struct {
	expr.ColumnsExpr
	tableAlias        string
	Creationdate      psql.Expression
	Creator           psql.Expression
	Editdate          psql.Expression
	Editor            psql.Expression
	Globalid          psql.Expression
	Jurisdiction      psql.Expression
	Lastaction        psql.Expression
	Laststatus        psql.Expression
	Lasttreatdate     psql.Expression
	Nexttreatmentdate psql.Expression
	Objectid          psql.Expression
	Symbology         psql.Expression
	Type              psql.Expression
	Zone              psql.Expression
	Zone2             psql.Expression
	CreatedDate       psql.Expression
	CreatedUser       psql.Expression
	GeometryX         psql.Expression
	GeometryY         psql.Expression
	LastEditedDate    psql.Expression
	LastEditedUser    psql.Expression
	Updated           psql.Expression
}

func (c fsStormdrainColumns) Alias() string {
	return c.tableAlias
}

func (fsStormdrainColumns) AliasedAs(alias string) fsStormdrainColumns {
	return buildFSStormdrainColumns(alias)
}

// FSStormdrainSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSStormdrainSetter struct {
	Creationdate      omitnull.Val[int64]   `db:"creationdate" `
	Creator           omitnull.Val[string]  `db:"creator" `
	Editdate          omitnull.Val[int64]   `db:"editdate" `
	Editor            omitnull.Val[string]  `db:"editor" `
	Globalid          omitnull.Val[string]  `db:"globalid" `
	Jurisdiction      omitnull.Val[string]  `db:"jurisdiction" `
	Lastaction        omitnull.Val[string]  `db:"lastaction" `
	Laststatus        omitnull.Val[string]  `db:"laststatus" `
	Lasttreatdate     omitnull.Val[int64]   `db:"lasttreatdate" `
	Nexttreatmentdate omitnull.Val[int64]   `db:"nexttreatmentdate" `
	Objectid          omit.Val[int32]       `db:"objectid,pk" `
	Symbology         omitnull.Val[string]  `db:"symbology" `
	Type              omitnull.Val[string]  `db:"type" `
	Zone              omitnull.Val[string]  `db:"zone" `
	Zone2             omitnull.Val[string]  `db:"zone2" `
	CreatedDate       omitnull.Val[int64]   `db:"created_date" `
	CreatedUser       omitnull.Val[string]  `db:"created_user" `
	GeometryX         omitnull.Val[float64] `db:"geometry_x" `
	GeometryY         omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate    omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser    omitnull.Val[string]  `db:"last_edited_user" `
	Updated           omit.Val[time.Time]   `db:"updated" `
}

func (s FSStormdrainSetter) SetColumns() []string {
	vals := make([]string, 0, 22)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Jurisdiction.IsUnset() {
		vals = append(vals, "jurisdiction")
	}
	if !s.Lastaction.IsUnset() {
		vals = append(vals, "lastaction")
	}
	if !s.Laststatus.IsUnset() {
		vals = append(vals, "laststatus")
	}
	if !s.Lasttreatdate.IsUnset() {
		vals = append(vals, "lasttreatdate")
	}
	if !s.Nexttreatmentdate.IsUnset() {
		vals = append(vals, "nexttreatmentdate")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Symbology.IsUnset() {
		vals = append(vals, "symbology")
	}
	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}
	if !s.Zone.IsUnset() {
		vals = append(vals, "zone")
	}
	if !s.Zone2.IsUnset() {
		vals = append(vals, "zone2")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSStormdrainSetter) Overwrite(t *FSStormdrain) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Jurisdiction.IsUnset() {
		t.Jurisdiction = s.Jurisdiction.MustGetNull()
	}
	if !s.Lastaction.IsUnset() {
		t.Lastaction = s.Lastaction.MustGetNull()
	}
	if !s.Laststatus.IsUnset() {
		t.Laststatus = s.Laststatus.MustGetNull()
	}
	if !s.Lasttreatdate.IsUnset() {
		t.Lasttreatdate = s.Lasttreatdate.MustGetNull()
	}
	if !s.Nexttreatmentdate.IsUnset() {
		t.Nexttreatmentdate = s.Nexttreatmentdate.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Symbology.IsUnset() {
		t.Symbology = s.Symbology.MustGetNull()
	}
	if !s.Type.IsUnset() {
		t.Type = s.Type.MustGetNull()
	}
	if !s.Zone.IsUnset() {
		t.Zone = s.Zone.MustGetNull()
	}
	if !s.Zone2.IsUnset() {
		t.Zone2 = s.Zone2.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSStormdrainSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSStormdrains.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 22)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[4] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Jurisdiction.IsUnset() {
			vals[5] = psql.Arg(s.Jurisdiction.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Lastaction.IsUnset() {
			vals[6] = psql.Arg(s.Lastaction.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Laststatus.IsUnset() {
			vals[7] = psql.Arg(s.Laststatus.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatdate.IsUnset() {
			vals[8] = psql.Arg(s.Lasttreatdate.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Nexttreatmentdate.IsUnset() {
			vals[9] = psql.Arg(s.Nexttreatmentdate.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[10] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Symbology.IsUnset() {
			vals[11] = psql.Arg(s.Symbology.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Type.IsUnset() {
			vals[12] = psql.Arg(s.Type.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Zone.IsUnset() {
			vals[13] = psql.Arg(s.Zone.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Zone2.IsUnset() {
			vals[14] = psql.Arg(s.Zone2.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[15] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[16] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[17] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[18] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[19] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[20] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[21] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSStormdrainSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSStormdrainSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 22)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Jurisdiction.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "jurisdiction")...),
			psql.Arg(s.Jurisdiction),
		}})
	}

	if !s.Lastaction.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastaction")...),
			psql.Arg(s.Lastaction),
		}})
	}

	if !s.Laststatus.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "laststatus")...),
			psql.Arg(s.Laststatus),
		}})
	}

	if !s.Lasttreatdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatdate")...),
			psql.Arg(s.Lasttreatdate),
		}})
	}

	if !s.Nexttreatmentdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nexttreatmentdate")...),
			psql.Arg(s.Nexttreatmentdate),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Symbology.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "symbology")...),
			psql.Arg(s.Symbology),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.Zone.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone")...),
			psql.Arg(s.Zone),
		}})
	}

	if !s.Zone2.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone2")...),
			psql.Arg(s.Zone2),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSStormdrain retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSStormdrain(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSStormdrain, error) {
	if len(cols) == 0 {
		return FSStormdrains.Query(
			sm.Where(FSStormdrains.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSStormdrains.Query(
		sm.Where(FSStormdrains.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSStormdrains.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSStormdrainExists checks the presence of a single record by primary key
func FSStormdrainExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSStormdrains.Query(
		sm.Where(FSStormdrains.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSStormdrain is retrieved from the database
func (o *FSStormdrain) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSStormdrains.AfterSelectHooks.RunHooks(ctx, exec, FSStormdrainSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSStormdrains.AfterInsertHooks.RunHooks(ctx, exec, FSStormdrainSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSStormdrains.AfterUpdateHooks.RunHooks(ctx, exec, FSStormdrainSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSStormdrains.AfterDeleteHooks.RunHooks(ctx, exec, FSStormdrainSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSStormdrain
func (o *FSStormdrain) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSStormdrain) pkEQ() dialect.Expression {
	return psql.Quote("fs_stormdrain", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSStormdrain
func (o *FSStormdrain) Update(ctx context.Context, exec bob.Executor, s *FSStormdrainSetter) error {
	v, err := FSStormdrains.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSStormdrain record with an executor
func (o *FSStormdrain) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSStormdrains.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSStormdrain using the executor
func (o *FSStormdrain) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSStormdrains.Query(
		sm.Where(FSStormdrains.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSStormdrainSlice is retrieved from the database
func (o FSStormdrainSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSStormdrains.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSStormdrains.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSStormdrains.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSStormdrains.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSStormdrainSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_stormdrain", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSStormdrainSlice) copyMatchingRows(from ...*FSStormdrain) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSStormdrainSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSStormdrains.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSStormdrain:
				o.copyMatchingRows(retrieved)
			case []*FSStormdrain:
				o.copyMatchingRows(retrieved...)
			case FSStormdrainSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSStormdrain or a slice of FSStormdrain
				// then run the AfterUpdateHooks on the slice
				_, err = FSStormdrains.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSStormdrainSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSStormdrains.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSStormdrain:
				o.copyMatchingRows(retrieved)
			case []*FSStormdrain:
				o.copyMatchingRows(retrieved...)
			case FSStormdrainSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSStormdrain or a slice of FSStormdrain
				// then run the AfterDeleteHooks on the slice
				_, err = FSStormdrains.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSStormdrainSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSStormdrainSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSStormdrains.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSStormdrainSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSStormdrains.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSStormdrainSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSStormdrains.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsStormdrainWhere[Q psql.Filterable] struct {
	Creationdate      psql.WhereNullMod[Q, int64]
	Creator           psql.WhereNullMod[Q, string]
	Editdate          psql.WhereNullMod[Q, int64]
	Editor            psql.WhereNullMod[Q, string]
	Globalid          psql.WhereNullMod[Q, string]
	Jurisdiction      psql.WhereNullMod[Q, string]
	Lastaction        psql.WhereNullMod[Q, string]
	Laststatus        psql.WhereNullMod[Q, string]
	Lasttreatdate     psql.WhereNullMod[Q, int64]
	Nexttreatmentdate psql.WhereNullMod[Q, int64]
	Objectid          psql.WhereMod[Q, int32]
	Symbology         psql.WhereNullMod[Q, string]
	Type              psql.WhereNullMod[Q, string]
	Zone              psql.WhereNullMod[Q, string]
	Zone2             psql.WhereNullMod[Q, string]
	CreatedDate       psql.WhereNullMod[Q, int64]
	CreatedUser       psql.WhereNullMod[Q, string]
	GeometryX         psql.WhereNullMod[Q, float64]
	GeometryY         psql.WhereNullMod[Q, float64]
	LastEditedDate    psql.WhereNullMod[Q, int64]
	LastEditedUser    psql.WhereNullMod[Q, string]
	Updated           psql.WhereMod[Q, time.Time]
}

func (fsStormdrainWhere[Q]) AliasedAs(alias string) fsStormdrainWhere[Q] {
	return buildFSStormdrainWhere[Q](buildFSStormdrainColumns(alias))
}

func buildFSStormdrainWhere[Q psql.Filterable](cols fsStormdrainColumns) fsStormdrainWhere[Q] {
	return fsStormdrainWhere[Q]{
		Creationdate:      psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:           psql.WhereNull[Q, string](cols.Creator),
		Editdate:          psql.WhereNull[Q, int64](cols.Editdate),
		Editor:            psql.WhereNull[Q, string](cols.Editor),
		Globalid:          psql.WhereNull[Q, string](cols.Globalid),
		Jurisdiction:      psql.WhereNull[Q, string](cols.Jurisdiction),
		Lastaction:        psql.WhereNull[Q, string](cols.Lastaction),
		Laststatus:        psql.WhereNull[Q, string](cols.Laststatus),
		Lasttreatdate:     psql.WhereNull[Q, int64](cols.Lasttreatdate),
		Nexttreatmentdate: psql.WhereNull[Q, int64](cols.Nexttreatmentdate),
		Objectid:          psql.Where[Q, int32](cols.Objectid),
		Symbology:         psql.WhereNull[Q, string](cols.Symbology),
		Type:              psql.WhereNull[Q, string](cols.Type),
		Zone:              psql.WhereNull[Q, string](cols.Zone),
		Zone2:             psql.WhereNull[Q, string](cols.Zone2),
		CreatedDate:       psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:       psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:         psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:         psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate:    psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser:    psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:           psql.Where[Q, time.Time](cols.Updated),
	}
}
