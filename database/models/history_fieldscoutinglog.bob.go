// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryFieldscoutinglog is an object representing the database table.
type HistoryFieldscoutinglog struct {
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	Globalid       null.Val[string]    `db:"globalid" `
	Objectid       int32               `db:"objectid,pk" `
	Status         null.Val[int16]     `db:"status" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	Version        int32               `db:"version,pk" `
}

// HistoryFieldscoutinglogSlice is an alias for a slice of pointers to HistoryFieldscoutinglog.
// This should almost always be used instead of []*HistoryFieldscoutinglog.
type HistoryFieldscoutinglogSlice []*HistoryFieldscoutinglog

// HistoryFieldscoutinglogs contains methods to work with the history_fieldscoutinglog table
var HistoryFieldscoutinglogs = psql.NewTablex[*HistoryFieldscoutinglog, HistoryFieldscoutinglogSlice, *HistoryFieldscoutinglogSetter]("", "history_fieldscoutinglog", buildHistoryFieldscoutinglogColumns("history_fieldscoutinglog"))

// HistoryFieldscoutinglogsQuery is a query on the history_fieldscoutinglog table
type HistoryFieldscoutinglogsQuery = *psql.ViewQuery[*HistoryFieldscoutinglog, HistoryFieldscoutinglogSlice]

func buildHistoryFieldscoutinglogColumns(alias string) historyFieldscoutinglogColumns {
	return historyFieldscoutinglogColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "globalid", "objectid", "status", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_fieldscoutinglog"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Objectid:       psql.Quote(alias, "objectid"),
		Status:         psql.Quote(alias, "status"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historyFieldscoutinglogColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Objectid       psql.Expression
	Status         psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Version        psql.Expression
}

func (c historyFieldscoutinglogColumns) Alias() string {
	return c.tableAlias
}

func (historyFieldscoutinglogColumns) AliasedAs(alias string) historyFieldscoutinglogColumns {
	return buildHistoryFieldscoutinglogColumns(alias)
}

// HistoryFieldscoutinglogSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryFieldscoutinglogSetter struct {
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	Status         omitnull.Val[int16]     `db:"status" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryFieldscoutinglogSetter) SetColumns() []string {
	vals := make([]string, 0, 15)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Status.IsUnset() {
		vals = append(vals, "status")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryFieldscoutinglogSetter) Overwrite(t *HistoryFieldscoutinglog) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Status.IsUnset() {
		t.Status = s.Status.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryFieldscoutinglogSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryFieldscoutinglogs.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 15)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[4] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[5] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Status.IsUnset() {
			vals[6] = psql.Arg(s.Status.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[7] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[8] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[9] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[10] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[11] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[12] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[13] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[14] = psql.Arg(s.Version.MustGet())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryFieldscoutinglogSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryFieldscoutinglogSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 15)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Status.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "status")...),
			psql.Arg(s.Status),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryFieldscoutinglog retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryFieldscoutinglog(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryFieldscoutinglog, error) {
	if len(cols) == 0 {
		return HistoryFieldscoutinglogs.Query(
			sm.Where(HistoryFieldscoutinglogs.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryFieldscoutinglogs.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryFieldscoutinglogs.Query(
		sm.Where(HistoryFieldscoutinglogs.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryFieldscoutinglogs.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryFieldscoutinglogs.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryFieldscoutinglogExists checks the presence of a single record by primary key
func HistoryFieldscoutinglogExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryFieldscoutinglogs.Query(
		sm.Where(HistoryFieldscoutinglogs.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryFieldscoutinglogs.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryFieldscoutinglog is retrieved from the database
func (o *HistoryFieldscoutinglog) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryFieldscoutinglogs.AfterSelectHooks.RunHooks(ctx, exec, HistoryFieldscoutinglogSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryFieldscoutinglogs.AfterInsertHooks.RunHooks(ctx, exec, HistoryFieldscoutinglogSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryFieldscoutinglogs.AfterUpdateHooks.RunHooks(ctx, exec, HistoryFieldscoutinglogSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryFieldscoutinglogs.AfterDeleteHooks.RunHooks(ctx, exec, HistoryFieldscoutinglogSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryFieldscoutinglog
func (o *HistoryFieldscoutinglog) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryFieldscoutinglog) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_fieldscoutinglog", "objectid"), psql.Quote("history_fieldscoutinglog", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryFieldscoutinglog
func (o *HistoryFieldscoutinglog) Update(ctx context.Context, exec bob.Executor, s *HistoryFieldscoutinglogSetter) error {
	v, err := HistoryFieldscoutinglogs.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryFieldscoutinglog record with an executor
func (o *HistoryFieldscoutinglog) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryFieldscoutinglogs.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryFieldscoutinglog using the executor
func (o *HistoryFieldscoutinglog) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryFieldscoutinglogs.Query(
		sm.Where(HistoryFieldscoutinglogs.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryFieldscoutinglogs.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryFieldscoutinglogSlice is retrieved from the database
func (o HistoryFieldscoutinglogSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryFieldscoutinglogs.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryFieldscoutinglogs.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryFieldscoutinglogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryFieldscoutinglogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryFieldscoutinglogSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_fieldscoutinglog", "objectid"), psql.Quote("history_fieldscoutinglog", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryFieldscoutinglogSlice) copyMatchingRows(from ...*HistoryFieldscoutinglog) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryFieldscoutinglogSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryFieldscoutinglogs.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryFieldscoutinglog:
				o.copyMatchingRows(retrieved)
			case []*HistoryFieldscoutinglog:
				o.copyMatchingRows(retrieved...)
			case HistoryFieldscoutinglogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryFieldscoutinglog or a slice of HistoryFieldscoutinglog
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryFieldscoutinglogs.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryFieldscoutinglogSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryFieldscoutinglogs.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryFieldscoutinglog:
				o.copyMatchingRows(retrieved)
			case []*HistoryFieldscoutinglog:
				o.copyMatchingRows(retrieved...)
			case HistoryFieldscoutinglogSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryFieldscoutinglog or a slice of HistoryFieldscoutinglog
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryFieldscoutinglogs.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryFieldscoutinglogSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryFieldscoutinglogSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryFieldscoutinglogs.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryFieldscoutinglogSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryFieldscoutinglogs.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryFieldscoutinglogSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryFieldscoutinglogs.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyFieldscoutinglogWhere[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	Status         psql.WhereNullMod[Q, int16]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Version        psql.WhereMod[Q, int32]
}

func (historyFieldscoutinglogWhere[Q]) AliasedAs(alias string) historyFieldscoutinglogWhere[Q] {
	return buildHistoryFieldscoutinglogWhere[Q](buildHistoryFieldscoutinglogColumns(alias))
}

func buildHistoryFieldscoutinglogWhere[Q psql.Filterable](cols historyFieldscoutinglogColumns) historyFieldscoutinglogWhere[Q] {
	return historyFieldscoutinglogWhere[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Status:         psql.WhereNull[Q, int16](cols.Status),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
