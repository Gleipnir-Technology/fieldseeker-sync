// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSLocationtracking is an object representing the database table.
type FSLocationtracking struct {
	Accuracy       null.Val[float64] `db:"accuracy" `
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	Fieldtech      null.Val[string]  `db:"fieldtech" `
	Globalid       null.Val[string]  `db:"globalid" `
	Objectid       int32             `db:"objectid,pk" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSLocationtrackingSlice is an alias for a slice of pointers to FSLocationtracking.
// This should almost always be used instead of []*FSLocationtracking.
type FSLocationtrackingSlice []*FSLocationtracking

// FSLocationtrackings contains methods to work with the fs_locationtracking table
var FSLocationtrackings = psql.NewTablex[*FSLocationtracking, FSLocationtrackingSlice, *FSLocationtrackingSetter]("", "fs_locationtracking", buildFSLocationtrackingColumns("fs_locationtracking"))

// FSLocationtrackingsQuery is a query on the fs_locationtracking table
type FSLocationtrackingsQuery = *psql.ViewQuery[*FSLocationtracking, FSLocationtrackingSlice]

func buildFSLocationtrackingColumns(alias string) fsLocationtrackingColumns {
	return fsLocationtrackingColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"accuracy", "creationdate", "creator", "editdate", "editor", "fieldtech", "globalid", "objectid", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_locationtracking"),
		tableAlias:     alias,
		Accuracy:       psql.Quote(alias, "accuracy"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Fieldtech:      psql.Quote(alias, "fieldtech"),
		Globalid:       psql.Quote(alias, "globalid"),
		Objectid:       psql.Quote(alias, "objectid"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsLocationtrackingColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Accuracy       psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Fieldtech      psql.Expression
	Globalid       psql.Expression
	Objectid       psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsLocationtrackingColumns) Alias() string {
	return c.tableAlias
}

func (fsLocationtrackingColumns) AliasedAs(alias string) fsLocationtrackingColumns {
	return buildFSLocationtrackingColumns(alias)
}

// FSLocationtrackingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSLocationtrackingSetter struct {
	Accuracy       omitnull.Val[float64] `db:"accuracy" `
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	Fieldtech      omitnull.Val[string]  `db:"fieldtech" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSLocationtrackingSetter) SetColumns() []string {
	vals := make([]string, 0, 15)
	if !s.Accuracy.IsUnset() {
		vals = append(vals, "accuracy")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Fieldtech.IsUnset() {
		vals = append(vals, "fieldtech")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSLocationtrackingSetter) Overwrite(t *FSLocationtracking) {
	if !s.Accuracy.IsUnset() {
		t.Accuracy = s.Accuracy.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Fieldtech.IsUnset() {
		t.Fieldtech = s.Fieldtech.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSLocationtrackingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSLocationtrackings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 15)
		if !s.Accuracy.IsUnset() {
			vals[0] = psql.Arg(s.Accuracy.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[3] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[4] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Fieldtech.IsUnset() {
			vals[5] = psql.Arg(s.Fieldtech.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[6] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[8] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[9] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[10] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[11] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[12] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[13] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[14] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSLocationtrackingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSLocationtrackingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 15)

	if !s.Accuracy.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "accuracy")...),
			psql.Arg(s.Accuracy),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Fieldtech.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fieldtech")...),
			psql.Arg(s.Fieldtech),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSLocationtracking retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSLocationtracking(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSLocationtracking, error) {
	if len(cols) == 0 {
		return FSLocationtrackings.Query(
			sm.Where(FSLocationtrackings.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSLocationtrackings.Query(
		sm.Where(FSLocationtrackings.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSLocationtrackings.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSLocationtrackingExists checks the presence of a single record by primary key
func FSLocationtrackingExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSLocationtrackings.Query(
		sm.Where(FSLocationtrackings.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSLocationtracking is retrieved from the database
func (o *FSLocationtracking) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSLocationtrackings.AfterSelectHooks.RunHooks(ctx, exec, FSLocationtrackingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSLocationtrackings.AfterInsertHooks.RunHooks(ctx, exec, FSLocationtrackingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSLocationtrackings.AfterUpdateHooks.RunHooks(ctx, exec, FSLocationtrackingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSLocationtrackings.AfterDeleteHooks.RunHooks(ctx, exec, FSLocationtrackingSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSLocationtracking
func (o *FSLocationtracking) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSLocationtracking) pkEQ() dialect.Expression {
	return psql.Quote("fs_locationtracking", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSLocationtracking
func (o *FSLocationtracking) Update(ctx context.Context, exec bob.Executor, s *FSLocationtrackingSetter) error {
	v, err := FSLocationtrackings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSLocationtracking record with an executor
func (o *FSLocationtracking) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSLocationtrackings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSLocationtracking using the executor
func (o *FSLocationtracking) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSLocationtrackings.Query(
		sm.Where(FSLocationtrackings.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSLocationtrackingSlice is retrieved from the database
func (o FSLocationtrackingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSLocationtrackings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSLocationtrackings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSLocationtrackings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSLocationtrackings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSLocationtrackingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_locationtracking", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSLocationtrackingSlice) copyMatchingRows(from ...*FSLocationtracking) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSLocationtrackingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSLocationtrackings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSLocationtracking:
				o.copyMatchingRows(retrieved)
			case []*FSLocationtracking:
				o.copyMatchingRows(retrieved...)
			case FSLocationtrackingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSLocationtracking or a slice of FSLocationtracking
				// then run the AfterUpdateHooks on the slice
				_, err = FSLocationtrackings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSLocationtrackingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSLocationtrackings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSLocationtracking:
				o.copyMatchingRows(retrieved)
			case []*FSLocationtracking:
				o.copyMatchingRows(retrieved...)
			case FSLocationtrackingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSLocationtracking or a slice of FSLocationtracking
				// then run the AfterDeleteHooks on the slice
				_, err = FSLocationtrackings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSLocationtrackingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSLocationtrackingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSLocationtrackings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSLocationtrackingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSLocationtrackings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSLocationtrackingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSLocationtrackings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsLocationtrackingWhere[Q psql.Filterable] struct {
	Accuracy       psql.WhereNullMod[Q, float64]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Fieldtech      psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsLocationtrackingWhere[Q]) AliasedAs(alias string) fsLocationtrackingWhere[Q] {
	return buildFSLocationtrackingWhere[Q](buildFSLocationtrackingColumns(alias))
}

func buildFSLocationtrackingWhere[Q psql.Filterable](cols fsLocationtrackingColumns) fsLocationtrackingWhere[Q] {
	return fsLocationtrackingWhere[Q]{
		Accuracy:       psql.WhereNull[Q, float64](cols.Accuracy),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Fieldtech:      psql.WhereNull[Q, string](cols.Fieldtech),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
