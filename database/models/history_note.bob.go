// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryNote is an object representing the database table.
type HistoryNote struct {
	Created   null.Val[time.Time] `db:"created" `
	Latitude  null.Val[float64]   `db:"latitude" `
	Longitude null.Val[float64]   `db:"longitude" `
	Text      string              `db:"text" `
	Version   int32               `db:"version,pk" `
	UUID      string              `db:"uuid,pk" `
}

// HistoryNoteSlice is an alias for a slice of pointers to HistoryNote.
// This should almost always be used instead of []*HistoryNote.
type HistoryNoteSlice []*HistoryNote

// HistoryNotes contains methods to work with the history_note table
var HistoryNotes = psql.NewTablex[*HistoryNote, HistoryNoteSlice, *HistoryNoteSetter]("", "history_note", buildHistoryNoteColumns("history_note"))

// HistoryNotesQuery is a query on the history_note table
type HistoryNotesQuery = *psql.ViewQuery[*HistoryNote, HistoryNoteSlice]

func buildHistoryNoteColumns(alias string) historyNoteColumns {
	return historyNoteColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"created", "latitude", "longitude", "text", "version", "uuid",
		).WithParent("history_note"),
		tableAlias: alias,
		Created:    psql.Quote(alias, "created"),
		Latitude:   psql.Quote(alias, "latitude"),
		Longitude:  psql.Quote(alias, "longitude"),
		Text:       psql.Quote(alias, "text"),
		Version:    psql.Quote(alias, "version"),
		UUID:       psql.Quote(alias, "uuid"),
	}
}

type historyNoteColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Created    psql.Expression
	Latitude   psql.Expression
	Longitude  psql.Expression
	Text       psql.Expression
	Version    psql.Expression
	UUID       psql.Expression
}

func (c historyNoteColumns) Alias() string {
	return c.tableAlias
}

func (historyNoteColumns) AliasedAs(alias string) historyNoteColumns {
	return buildHistoryNoteColumns(alias)
}

// HistoryNoteSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryNoteSetter struct {
	Created   omitnull.Val[time.Time] `db:"created" `
	Latitude  omitnull.Val[float64]   `db:"latitude" `
	Longitude omitnull.Val[float64]   `db:"longitude" `
	Text      omit.Val[string]        `db:"text" `
	Version   omit.Val[int32]         `db:"version,pk" `
	UUID      omit.Val[string]        `db:"uuid,pk" `
}

func (s HistoryNoteSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.Latitude.IsUnset() {
		vals = append(vals, "latitude")
	}
	if !s.Longitude.IsUnset() {
		vals = append(vals, "longitude")
	}
	if s.Text.IsValue() {
		vals = append(vals, "text")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	if s.UUID.IsValue() {
		vals = append(vals, "uuid")
	}
	return vals
}

func (s HistoryNoteSetter) Overwrite(t *HistoryNote) {
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.Latitude.IsUnset() {
		t.Latitude = s.Latitude.MustGetNull()
	}
	if !s.Longitude.IsUnset() {
		t.Longitude = s.Longitude.MustGetNull()
	}
	if s.Text.IsValue() {
		t.Text = s.Text.MustGet()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
	if s.UUID.IsValue() {
		t.UUID = s.UUID.MustGet()
	}
}

func (s *HistoryNoteSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryNotes.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if !s.Created.IsUnset() {
			vals[0] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Latitude.IsUnset() {
			vals[1] = psql.Arg(s.Latitude.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Longitude.IsUnset() {
			vals[2] = psql.Arg(s.Longitude.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Text.IsValue() {
			vals[3] = psql.Arg(s.Text.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[4] = psql.Arg(s.Version.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UUID.IsValue() {
			vals[5] = psql.Arg(s.UUID.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryNoteSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryNoteSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.Latitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "latitude")...),
			psql.Arg(s.Latitude),
		}})
	}

	if !s.Longitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "longitude")...),
			psql.Arg(s.Longitude),
		}})
	}

	if s.Text.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "text")...),
			psql.Arg(s.Text),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	if s.UUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "uuid")...),
			psql.Arg(s.UUID),
		}})
	}

	return exprs
}

// FindHistoryNote retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryNote(ctx context.Context, exec bob.Executor, UUIDPK string, VersionPK int32, cols ...string) (*HistoryNote, error) {
	if len(cols) == 0 {
		return HistoryNotes.Query(
			sm.Where(HistoryNotes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
			sm.Where(HistoryNotes.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryNotes.Query(
		sm.Where(HistoryNotes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Where(HistoryNotes.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryNotes.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryNoteExists checks the presence of a single record by primary key
func HistoryNoteExists(ctx context.Context, exec bob.Executor, UUIDPK string, VersionPK int32) (bool, error) {
	return HistoryNotes.Query(
		sm.Where(HistoryNotes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Where(HistoryNotes.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryNote is retrieved from the database
func (o *HistoryNote) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryNotes.AfterSelectHooks.RunHooks(ctx, exec, HistoryNoteSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryNotes.AfterInsertHooks.RunHooks(ctx, exec, HistoryNoteSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryNotes.AfterUpdateHooks.RunHooks(ctx, exec, HistoryNoteSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryNotes.AfterDeleteHooks.RunHooks(ctx, exec, HistoryNoteSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryNote
func (o *HistoryNote) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.UUID,
		o.Version,
	)
}

func (o *HistoryNote) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_note", "uuid"), psql.Quote("history_note", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryNote
func (o *HistoryNote) Update(ctx context.Context, exec bob.Executor, s *HistoryNoteSetter) error {
	v, err := HistoryNotes.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryNote record with an executor
func (o *HistoryNote) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryNotes.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryNote using the executor
func (o *HistoryNote) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryNotes.Query(
		sm.Where(HistoryNotes.Columns.UUID.EQ(psql.Arg(o.UUID))),
		sm.Where(HistoryNotes.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryNoteSlice is retrieved from the database
func (o HistoryNoteSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryNotes.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryNotes.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryNotes.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryNotes.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryNoteSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_note", "uuid"), psql.Quote("history_note", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryNoteSlice) copyMatchingRows(from ...*HistoryNote) {
	for i, old := range o {
		for _, new := range from {
			if new.UUID != old.UUID {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryNoteSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryNotes.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryNote:
				o.copyMatchingRows(retrieved)
			case []*HistoryNote:
				o.copyMatchingRows(retrieved...)
			case HistoryNoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryNote or a slice of HistoryNote
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryNotes.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryNoteSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryNotes.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryNote:
				o.copyMatchingRows(retrieved)
			case []*HistoryNote:
				o.copyMatchingRows(retrieved...)
			case HistoryNoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryNote or a slice of HistoryNote
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryNotes.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryNoteSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryNoteSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryNotes.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryNoteSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryNotes.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryNoteSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryNotes.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyNoteWhere[Q psql.Filterable] struct {
	Created   psql.WhereNullMod[Q, time.Time]
	Latitude  psql.WhereNullMod[Q, float64]
	Longitude psql.WhereNullMod[Q, float64]
	Text      psql.WhereMod[Q, string]
	Version   psql.WhereMod[Q, int32]
	UUID      psql.WhereMod[Q, string]
}

func (historyNoteWhere[Q]) AliasedAs(alias string) historyNoteWhere[Q] {
	return buildHistoryNoteWhere[Q](buildHistoryNoteColumns(alias))
}

func buildHistoryNoteWhere[Q psql.Filterable](cols historyNoteColumns) historyNoteWhere[Q] {
	return historyNoteWhere[Q]{
		Created:   psql.WhereNull[Q, time.Time](cols.Created),
		Latitude:  psql.WhereNull[Q, float64](cols.Latitude),
		Longitude: psql.WhereNull[Q, float64](cols.Longitude),
		Text:      psql.Where[Q, string](cols.Text),
		Version:   psql.Where[Q, int32](cols.Version),
		UUID:      psql.Where[Q, string](cols.UUID),
	}
}
