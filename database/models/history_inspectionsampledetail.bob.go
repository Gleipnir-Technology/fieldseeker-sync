// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryInspectionsampledetail is an object representing the database table.
type HistoryInspectionsampledetail struct {
	Comments       null.Val[string]    `db:"comments" `
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	Fadultact      null.Val[string]    `db:"fadultact" `
	Fdomstage      null.Val[string]    `db:"fdomstage" `
	Feggcount      null.Val[int16]     `db:"feggcount" `
	Fieldspecies   null.Val[string]    `db:"fieldspecies" `
	Flarvcount     null.Val[int16]     `db:"flarvcount" `
	Flstages       null.Val[string]    `db:"flstages" `
	Fpupcount      null.Val[int16]     `db:"fpupcount" `
	Globalid       null.Val[string]    `db:"globalid" `
	InspsampleID   null.Val[string]    `db:"inspsample_id" `
	Labspecies     null.Val[string]    `db:"labspecies" `
	Ldomstage      null.Val[string]    `db:"ldomstage" `
	Leggcount      null.Val[int16]     `db:"leggcount" `
	Llarvcount     null.Val[int16]     `db:"llarvcount" `
	Lpupcount      null.Val[int16]     `db:"lpupcount" `
	Objectid       int32               `db:"objectid,pk" `
	Processed      null.Val[int16]     `db:"processed" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	Version        int32               `db:"version,pk" `
}

// HistoryInspectionsampledetailSlice is an alias for a slice of pointers to HistoryInspectionsampledetail.
// This should almost always be used instead of []*HistoryInspectionsampledetail.
type HistoryInspectionsampledetailSlice []*HistoryInspectionsampledetail

// HistoryInspectionsampledetails contains methods to work with the history_inspectionsampledetail table
var HistoryInspectionsampledetails = psql.NewTablex[*HistoryInspectionsampledetail, HistoryInspectionsampledetailSlice, *HistoryInspectionsampledetailSetter]("", "history_inspectionsampledetail", buildHistoryInspectionsampledetailColumns("history_inspectionsampledetail"))

// HistoryInspectionsampledetailsQuery is a query on the history_inspectionsampledetail table
type HistoryInspectionsampledetailsQuery = *psql.ViewQuery[*HistoryInspectionsampledetail, HistoryInspectionsampledetailSlice]

func buildHistoryInspectionsampledetailColumns(alias string) historyInspectionsampledetailColumns {
	return historyInspectionsampledetailColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"comments", "creationdate", "creator", "editdate", "editor", "fadultact", "fdomstage", "feggcount", "fieldspecies", "flarvcount", "flstages", "fpupcount", "globalid", "inspsample_id", "labspecies", "ldomstage", "leggcount", "llarvcount", "lpupcount", "objectid", "processed", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_inspectionsampledetail"),
		tableAlias:     alias,
		Comments:       psql.Quote(alias, "comments"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Fadultact:      psql.Quote(alias, "fadultact"),
		Fdomstage:      psql.Quote(alias, "fdomstage"),
		Feggcount:      psql.Quote(alias, "feggcount"),
		Fieldspecies:   psql.Quote(alias, "fieldspecies"),
		Flarvcount:     psql.Quote(alias, "flarvcount"),
		Flstages:       psql.Quote(alias, "flstages"),
		Fpupcount:      psql.Quote(alias, "fpupcount"),
		Globalid:       psql.Quote(alias, "globalid"),
		InspsampleID:   psql.Quote(alias, "inspsample_id"),
		Labspecies:     psql.Quote(alias, "labspecies"),
		Ldomstage:      psql.Quote(alias, "ldomstage"),
		Leggcount:      psql.Quote(alias, "leggcount"),
		Llarvcount:     psql.Quote(alias, "llarvcount"),
		Lpupcount:      psql.Quote(alias, "lpupcount"),
		Objectid:       psql.Quote(alias, "objectid"),
		Processed:      psql.Quote(alias, "processed"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historyInspectionsampledetailColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Comments       psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Fadultact      psql.Expression
	Fdomstage      psql.Expression
	Feggcount      psql.Expression
	Fieldspecies   psql.Expression
	Flarvcount     psql.Expression
	Flstages       psql.Expression
	Fpupcount      psql.Expression
	Globalid       psql.Expression
	InspsampleID   psql.Expression
	Labspecies     psql.Expression
	Ldomstage      psql.Expression
	Leggcount      psql.Expression
	Llarvcount     psql.Expression
	Lpupcount      psql.Expression
	Objectid       psql.Expression
	Processed      psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Version        psql.Expression
}

func (c historyInspectionsampledetailColumns) Alias() string {
	return c.tableAlias
}

func (historyInspectionsampledetailColumns) AliasedAs(alias string) historyInspectionsampledetailColumns {
	return buildHistoryInspectionsampledetailColumns(alias)
}

// HistoryInspectionsampledetailSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryInspectionsampledetailSetter struct {
	Comments       omitnull.Val[string]    `db:"comments" `
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	Fadultact      omitnull.Val[string]    `db:"fadultact" `
	Fdomstage      omitnull.Val[string]    `db:"fdomstage" `
	Feggcount      omitnull.Val[int16]     `db:"feggcount" `
	Fieldspecies   omitnull.Val[string]    `db:"fieldspecies" `
	Flarvcount     omitnull.Val[int16]     `db:"flarvcount" `
	Flstages       omitnull.Val[string]    `db:"flstages" `
	Fpupcount      omitnull.Val[int16]     `db:"fpupcount" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	InspsampleID   omitnull.Val[string]    `db:"inspsample_id" `
	Labspecies     omitnull.Val[string]    `db:"labspecies" `
	Ldomstage      omitnull.Val[string]    `db:"ldomstage" `
	Leggcount      omitnull.Val[int16]     `db:"leggcount" `
	Llarvcount     omitnull.Val[int16]     `db:"llarvcount" `
	Lpupcount      omitnull.Val[int16]     `db:"lpupcount" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	Processed      omitnull.Val[int16]     `db:"processed" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryInspectionsampledetailSetter) SetColumns() []string {
	vals := make([]string, 0, 29)
	if !s.Comments.IsUnset() {
		vals = append(vals, "comments")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Fadultact.IsUnset() {
		vals = append(vals, "fadultact")
	}
	if !s.Fdomstage.IsUnset() {
		vals = append(vals, "fdomstage")
	}
	if !s.Feggcount.IsUnset() {
		vals = append(vals, "feggcount")
	}
	if !s.Fieldspecies.IsUnset() {
		vals = append(vals, "fieldspecies")
	}
	if !s.Flarvcount.IsUnset() {
		vals = append(vals, "flarvcount")
	}
	if !s.Flstages.IsUnset() {
		vals = append(vals, "flstages")
	}
	if !s.Fpupcount.IsUnset() {
		vals = append(vals, "fpupcount")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.InspsampleID.IsUnset() {
		vals = append(vals, "inspsample_id")
	}
	if !s.Labspecies.IsUnset() {
		vals = append(vals, "labspecies")
	}
	if !s.Ldomstage.IsUnset() {
		vals = append(vals, "ldomstage")
	}
	if !s.Leggcount.IsUnset() {
		vals = append(vals, "leggcount")
	}
	if !s.Llarvcount.IsUnset() {
		vals = append(vals, "llarvcount")
	}
	if !s.Lpupcount.IsUnset() {
		vals = append(vals, "lpupcount")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Processed.IsUnset() {
		vals = append(vals, "processed")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryInspectionsampledetailSetter) Overwrite(t *HistoryInspectionsampledetail) {
	if !s.Comments.IsUnset() {
		t.Comments = s.Comments.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Fadultact.IsUnset() {
		t.Fadultact = s.Fadultact.MustGetNull()
	}
	if !s.Fdomstage.IsUnset() {
		t.Fdomstage = s.Fdomstage.MustGetNull()
	}
	if !s.Feggcount.IsUnset() {
		t.Feggcount = s.Feggcount.MustGetNull()
	}
	if !s.Fieldspecies.IsUnset() {
		t.Fieldspecies = s.Fieldspecies.MustGetNull()
	}
	if !s.Flarvcount.IsUnset() {
		t.Flarvcount = s.Flarvcount.MustGetNull()
	}
	if !s.Flstages.IsUnset() {
		t.Flstages = s.Flstages.MustGetNull()
	}
	if !s.Fpupcount.IsUnset() {
		t.Fpupcount = s.Fpupcount.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.InspsampleID.IsUnset() {
		t.InspsampleID = s.InspsampleID.MustGetNull()
	}
	if !s.Labspecies.IsUnset() {
		t.Labspecies = s.Labspecies.MustGetNull()
	}
	if !s.Ldomstage.IsUnset() {
		t.Ldomstage = s.Ldomstage.MustGetNull()
	}
	if !s.Leggcount.IsUnset() {
		t.Leggcount = s.Leggcount.MustGetNull()
	}
	if !s.Llarvcount.IsUnset() {
		t.Llarvcount = s.Llarvcount.MustGetNull()
	}
	if !s.Lpupcount.IsUnset() {
		t.Lpupcount = s.Lpupcount.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Processed.IsUnset() {
		t.Processed = s.Processed.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryInspectionsampledetailSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryInspectionsampledetails.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 29)
		if !s.Comments.IsUnset() {
			vals[0] = psql.Arg(s.Comments.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[3] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[4] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Fadultact.IsUnset() {
			vals[5] = psql.Arg(s.Fadultact.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Fdomstage.IsUnset() {
			vals[6] = psql.Arg(s.Fdomstage.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Feggcount.IsUnset() {
			vals[7] = psql.Arg(s.Feggcount.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Fieldspecies.IsUnset() {
			vals[8] = psql.Arg(s.Fieldspecies.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Flarvcount.IsUnset() {
			vals[9] = psql.Arg(s.Flarvcount.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Flstages.IsUnset() {
			vals[10] = psql.Arg(s.Flstages.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Fpupcount.IsUnset() {
			vals[11] = psql.Arg(s.Fpupcount.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[12] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.InspsampleID.IsUnset() {
			vals[13] = psql.Arg(s.InspsampleID.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Labspecies.IsUnset() {
			vals[14] = psql.Arg(s.Labspecies.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.Ldomstage.IsUnset() {
			vals[15] = psql.Arg(s.Ldomstage.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.Leggcount.IsUnset() {
			vals[16] = psql.Arg(s.Leggcount.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.Llarvcount.IsUnset() {
			vals[17] = psql.Arg(s.Llarvcount.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.Lpupcount.IsUnset() {
			vals[18] = psql.Arg(s.Lpupcount.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[19] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.Processed.IsUnset() {
			vals[20] = psql.Arg(s.Processed.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[21] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[22] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[22] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[23] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[23] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[24] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[24] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[25] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[25] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[26] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[26] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[27] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[27] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[28] = psql.Arg(s.Version.MustGet())
		} else {
			vals[28] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryInspectionsampledetailSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryInspectionsampledetailSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 29)

	if !s.Comments.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "comments")...),
			psql.Arg(s.Comments),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Fadultact.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fadultact")...),
			psql.Arg(s.Fadultact),
		}})
	}

	if !s.Fdomstage.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fdomstage")...),
			psql.Arg(s.Fdomstage),
		}})
	}

	if !s.Feggcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "feggcount")...),
			psql.Arg(s.Feggcount),
		}})
	}

	if !s.Fieldspecies.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fieldspecies")...),
			psql.Arg(s.Fieldspecies),
		}})
	}

	if !s.Flarvcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "flarvcount")...),
			psql.Arg(s.Flarvcount),
		}})
	}

	if !s.Flstages.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "flstages")...),
			psql.Arg(s.Flstages),
		}})
	}

	if !s.Fpupcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "fpupcount")...),
			psql.Arg(s.Fpupcount),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.InspsampleID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "inspsample_id")...),
			psql.Arg(s.InspsampleID),
		}})
	}

	if !s.Labspecies.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "labspecies")...),
			psql.Arg(s.Labspecies),
		}})
	}

	if !s.Ldomstage.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ldomstage")...),
			psql.Arg(s.Ldomstage),
		}})
	}

	if !s.Leggcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "leggcount")...),
			psql.Arg(s.Leggcount),
		}})
	}

	if !s.Llarvcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "llarvcount")...),
			psql.Arg(s.Llarvcount),
		}})
	}

	if !s.Lpupcount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lpupcount")...),
			psql.Arg(s.Lpupcount),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Processed.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "processed")...),
			psql.Arg(s.Processed),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryInspectionsampledetail retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryInspectionsampledetail(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryInspectionsampledetail, error) {
	if len(cols) == 0 {
		return HistoryInspectionsampledetails.Query(
			sm.Where(HistoryInspectionsampledetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryInspectionsampledetails.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryInspectionsampledetails.Query(
		sm.Where(HistoryInspectionsampledetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryInspectionsampledetails.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryInspectionsampledetails.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryInspectionsampledetailExists checks the presence of a single record by primary key
func HistoryInspectionsampledetailExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryInspectionsampledetails.Query(
		sm.Where(HistoryInspectionsampledetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryInspectionsampledetails.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryInspectionsampledetail is retrieved from the database
func (o *HistoryInspectionsampledetail) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryInspectionsampledetails.AfterSelectHooks.RunHooks(ctx, exec, HistoryInspectionsampledetailSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryInspectionsampledetails.AfterInsertHooks.RunHooks(ctx, exec, HistoryInspectionsampledetailSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryInspectionsampledetails.AfterUpdateHooks.RunHooks(ctx, exec, HistoryInspectionsampledetailSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryInspectionsampledetails.AfterDeleteHooks.RunHooks(ctx, exec, HistoryInspectionsampledetailSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryInspectionsampledetail
func (o *HistoryInspectionsampledetail) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryInspectionsampledetail) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_inspectionsampledetail", "objectid"), psql.Quote("history_inspectionsampledetail", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryInspectionsampledetail
func (o *HistoryInspectionsampledetail) Update(ctx context.Context, exec bob.Executor, s *HistoryInspectionsampledetailSetter) error {
	v, err := HistoryInspectionsampledetails.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryInspectionsampledetail record with an executor
func (o *HistoryInspectionsampledetail) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryInspectionsampledetails.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryInspectionsampledetail using the executor
func (o *HistoryInspectionsampledetail) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryInspectionsampledetails.Query(
		sm.Where(HistoryInspectionsampledetails.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryInspectionsampledetails.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryInspectionsampledetailSlice is retrieved from the database
func (o HistoryInspectionsampledetailSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryInspectionsampledetails.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryInspectionsampledetails.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryInspectionsampledetails.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryInspectionsampledetails.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryInspectionsampledetailSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_inspectionsampledetail", "objectid"), psql.Quote("history_inspectionsampledetail", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryInspectionsampledetailSlice) copyMatchingRows(from ...*HistoryInspectionsampledetail) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryInspectionsampledetailSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryInspectionsampledetails.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryInspectionsampledetail:
				o.copyMatchingRows(retrieved)
			case []*HistoryInspectionsampledetail:
				o.copyMatchingRows(retrieved...)
			case HistoryInspectionsampledetailSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryInspectionsampledetail or a slice of HistoryInspectionsampledetail
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryInspectionsampledetails.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryInspectionsampledetailSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryInspectionsampledetails.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryInspectionsampledetail:
				o.copyMatchingRows(retrieved)
			case []*HistoryInspectionsampledetail:
				o.copyMatchingRows(retrieved...)
			case HistoryInspectionsampledetailSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryInspectionsampledetail or a slice of HistoryInspectionsampledetail
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryInspectionsampledetails.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryInspectionsampledetailSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryInspectionsampledetailSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryInspectionsampledetails.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryInspectionsampledetailSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryInspectionsampledetails.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryInspectionsampledetailSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryInspectionsampledetails.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyInspectionsampledetailWhere[Q psql.Filterable] struct {
	Comments       psql.WhereNullMod[Q, string]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Fadultact      psql.WhereNullMod[Q, string]
	Fdomstage      psql.WhereNullMod[Q, string]
	Feggcount      psql.WhereNullMod[Q, int16]
	Fieldspecies   psql.WhereNullMod[Q, string]
	Flarvcount     psql.WhereNullMod[Q, int16]
	Flstages       psql.WhereNullMod[Q, string]
	Fpupcount      psql.WhereNullMod[Q, int16]
	Globalid       psql.WhereNullMod[Q, string]
	InspsampleID   psql.WhereNullMod[Q, string]
	Labspecies     psql.WhereNullMod[Q, string]
	Ldomstage      psql.WhereNullMod[Q, string]
	Leggcount      psql.WhereNullMod[Q, int16]
	Llarvcount     psql.WhereNullMod[Q, int16]
	Lpupcount      psql.WhereNullMod[Q, int16]
	Objectid       psql.WhereMod[Q, int32]
	Processed      psql.WhereNullMod[Q, int16]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Version        psql.WhereMod[Q, int32]
}

func (historyInspectionsampledetailWhere[Q]) AliasedAs(alias string) historyInspectionsampledetailWhere[Q] {
	return buildHistoryInspectionsampledetailWhere[Q](buildHistoryInspectionsampledetailColumns(alias))
}

func buildHistoryInspectionsampledetailWhere[Q psql.Filterable](cols historyInspectionsampledetailColumns) historyInspectionsampledetailWhere[Q] {
	return historyInspectionsampledetailWhere[Q]{
		Comments:       psql.WhereNull[Q, string](cols.Comments),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Fadultact:      psql.WhereNull[Q, string](cols.Fadultact),
		Fdomstage:      psql.WhereNull[Q, string](cols.Fdomstage),
		Feggcount:      psql.WhereNull[Q, int16](cols.Feggcount),
		Fieldspecies:   psql.WhereNull[Q, string](cols.Fieldspecies),
		Flarvcount:     psql.WhereNull[Q, int16](cols.Flarvcount),
		Flstages:       psql.WhereNull[Q, string](cols.Flstages),
		Fpupcount:      psql.WhereNull[Q, int16](cols.Fpupcount),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		InspsampleID:   psql.WhereNull[Q, string](cols.InspsampleID),
		Labspecies:     psql.WhereNull[Q, string](cols.Labspecies),
		Ldomstage:      psql.WhereNull[Q, string](cols.Ldomstage),
		Leggcount:      psql.WhereNull[Q, int16](cols.Leggcount),
		Llarvcount:     psql.WhereNull[Q, int16](cols.Llarvcount),
		Lpupcount:      psql.WhereNull[Q, int16](cols.Lpupcount),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Processed:      psql.WhereNull[Q, int16](cols.Processed),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
