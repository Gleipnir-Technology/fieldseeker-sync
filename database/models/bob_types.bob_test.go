// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"database/sql/driver"

	enums "github.com/Gleipnir-Technology/fieldseeker-sync/database/enums"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
)

// Set the testDB to enable tests that use the database
var testDB bob.Transactor[bob.Tx]

// Make sure the type FSContainerrelate runs hooks after queries
var _ bob.HookableType = &FSContainerrelate{}

// Make sure the type FSFieldscoutinglog runs hooks after queries
var _ bob.HookableType = &FSFieldscoutinglog{}

// Make sure the type FSHabitatrelate runs hooks after queries
var _ bob.HookableType = &FSHabitatrelate{}

// Make sure the type FSInspectionsample runs hooks after queries
var _ bob.HookableType = &FSInspectionsample{}

// Make sure the type FSInspectionsampledetail runs hooks after queries
var _ bob.HookableType = &FSInspectionsampledetail{}

// Make sure the type FSLinelocation runs hooks after queries
var _ bob.HookableType = &FSLinelocation{}

// Make sure the type FSLocationtracking runs hooks after queries
var _ bob.HookableType = &FSLocationtracking{}

// Make sure the type FSMosquitoinspection runs hooks after queries
var _ bob.HookableType = &FSMosquitoinspection{}

// Make sure the type FSPointlocation runs hooks after queries
var _ bob.HookableType = &FSPointlocation{}

// Make sure the type FSPolygonlocation runs hooks after queries
var _ bob.HookableType = &FSPolygonlocation{}

// Make sure the type FSPool runs hooks after queries
var _ bob.HookableType = &FSPool{}

// Make sure the type FSPooldetail runs hooks after queries
var _ bob.HookableType = &FSPooldetail{}

// Make sure the type FSProposedtreatmentarea runs hooks after queries
var _ bob.HookableType = &FSProposedtreatmentarea{}

// Make sure the type FSQamosquitoinspection runs hooks after queries
var _ bob.HookableType = &FSQamosquitoinspection{}

// Make sure the type FSRodentlocation runs hooks after queries
var _ bob.HookableType = &FSRodentlocation{}

// Make sure the type FSSamplecollection runs hooks after queries
var _ bob.HookableType = &FSSamplecollection{}

// Make sure the type FSSamplelocation runs hooks after queries
var _ bob.HookableType = &FSSamplelocation{}

// Make sure the type FSServicerequest runs hooks after queries
var _ bob.HookableType = &FSServicerequest{}

// Make sure the type FSSpeciesabundance runs hooks after queries
var _ bob.HookableType = &FSSpeciesabundance{}

// Make sure the type FSStormdrain runs hooks after queries
var _ bob.HookableType = &FSStormdrain{}

// Make sure the type FSTimecard runs hooks after queries
var _ bob.HookableType = &FSTimecard{}

// Make sure the type FSTrapdatum runs hooks after queries
var _ bob.HookableType = &FSTrapdatum{}

// Make sure the type FSTraplocation runs hooks after queries
var _ bob.HookableType = &FSTraplocation{}

// Make sure the type FSTreatment runs hooks after queries
var _ bob.HookableType = &FSTreatment{}

// Make sure the type FSTreatmentarea runs hooks after queries
var _ bob.HookableType = &FSTreatmentarea{}

// Make sure the type FSZone runs hooks after queries
var _ bob.HookableType = &FSZone{}

// Make sure the type FSZones2 runs hooks after queries
var _ bob.HookableType = &FSZones2{}

// Make sure the type GooseDBVersion runs hooks after queries
var _ bob.HookableType = &GooseDBVersion{}

// Make sure the type HistoryContainerrelate runs hooks after queries
var _ bob.HookableType = &HistoryContainerrelate{}

// Make sure the type HistoryFieldscoutinglog runs hooks after queries
var _ bob.HookableType = &HistoryFieldscoutinglog{}

// Make sure the type HistoryHabitatrelate runs hooks after queries
var _ bob.HookableType = &HistoryHabitatrelate{}

// Make sure the type HistoryInspectionsample runs hooks after queries
var _ bob.HookableType = &HistoryInspectionsample{}

// Make sure the type HistoryInspectionsampledetail runs hooks after queries
var _ bob.HookableType = &HistoryInspectionsampledetail{}

// Make sure the type HistoryLinelocation runs hooks after queries
var _ bob.HookableType = &HistoryLinelocation{}

// Make sure the type HistoryLocationtracking runs hooks after queries
var _ bob.HookableType = &HistoryLocationtracking{}

// Make sure the type HistoryMosquitoinspection runs hooks after queries
var _ bob.HookableType = &HistoryMosquitoinspection{}

// Make sure the type HistoryNote runs hooks after queries
var _ bob.HookableType = &HistoryNote{}

// Make sure the type HistoryNoteAudioRecording runs hooks after queries
var _ bob.HookableType = &HistoryNoteAudioRecording{}

// Make sure the type HistoryPointlocation runs hooks after queries
var _ bob.HookableType = &HistoryPointlocation{}

// Make sure the type HistoryPolygonlocation runs hooks after queries
var _ bob.HookableType = &HistoryPolygonlocation{}

// Make sure the type HistoryPool runs hooks after queries
var _ bob.HookableType = &HistoryPool{}

// Make sure the type HistoryPooldetail runs hooks after queries
var _ bob.HookableType = &HistoryPooldetail{}

// Make sure the type HistoryProposedtreatmentarea runs hooks after queries
var _ bob.HookableType = &HistoryProposedtreatmentarea{}

// Make sure the type HistoryQamosquitoinspection runs hooks after queries
var _ bob.HookableType = &HistoryQamosquitoinspection{}

// Make sure the type HistoryRodentlocation runs hooks after queries
var _ bob.HookableType = &HistoryRodentlocation{}

// Make sure the type HistorySamplecollection runs hooks after queries
var _ bob.HookableType = &HistorySamplecollection{}

// Make sure the type HistorySamplelocation runs hooks after queries
var _ bob.HookableType = &HistorySamplelocation{}

// Make sure the type HistoryServicerequest runs hooks after queries
var _ bob.HookableType = &HistoryServicerequest{}

// Make sure the type HistorySpeciesabundance runs hooks after queries
var _ bob.HookableType = &HistorySpeciesabundance{}

// Make sure the type HistoryStormdrain runs hooks after queries
var _ bob.HookableType = &HistoryStormdrain{}

// Make sure the type HistoryTimecard runs hooks after queries
var _ bob.HookableType = &HistoryTimecard{}

// Make sure the type HistoryTrapdatum runs hooks after queries
var _ bob.HookableType = &HistoryTrapdatum{}

// Make sure the type HistoryTraplocation runs hooks after queries
var _ bob.HookableType = &HistoryTraplocation{}

// Make sure the type HistoryTreatment runs hooks after queries
var _ bob.HookableType = &HistoryTreatment{}

// Make sure the type HistoryTreatmentarea runs hooks after queries
var _ bob.HookableType = &HistoryTreatmentarea{}

// Make sure the type HistoryZone runs hooks after queries
var _ bob.HookableType = &HistoryZone{}

// Make sure the type HistoryZones2 runs hooks after queries
var _ bob.HookableType = &HistoryZones2{}

// Make sure the type Note runs hooks after queries
var _ bob.HookableType = &Note{}

// Make sure the type NoteAudio runs hooks after queries
var _ bob.HookableType = &NoteAudio{}

// Make sure the type NoteAudioBreadcrumb runs hooks after queries
var _ bob.HookableType = &NoteAudioBreadcrumb{}

// Make sure the type NoteAudioRecording runs hooks after queries
var _ bob.HookableType = &NoteAudioRecording{}

// Make sure the type NoteImage runs hooks after queries
var _ bob.HookableType = &NoteImage{}

// Make sure the type Session runs hooks after queries
var _ bob.HookableType = &Session{}

// Make sure the type TaskAudioReview runs hooks after queries
var _ bob.HookableType = &TaskAudioReview{}

// Make sure the type User runs hooks after queries
var _ bob.HookableType = &User{}

// Make sure the type decimal.Decimal satisfies database/sql.Scanner
var _ sql.Scanner = (*decimal.Decimal)(nil)

// Make sure the type decimal.Decimal satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(decimal.Decimal)

// Make sure the type enums.Hashtype satisfies database/sql.Scanner
var _ sql.Scanner = (*enums.Hashtype)(nil)

// Make sure the type enums.Hashtype satisfies database/sql/driver.Valuer
var _ driver.Valuer = *new(enums.Hashtype)
