// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSPooldetail is an object representing the database table.
type FSPooldetail struct {
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	Females        null.Val[int16]   `db:"females" `
	Globalid       null.Val[string]  `db:"globalid" `
	Objectid       int32             `db:"objectid,pk" `
	PoolID         null.Val[string]  `db:"pool_id" `
	Species        null.Val[string]  `db:"species" `
	TrapdataID     null.Val[string]  `db:"trapdata_id" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSPooldetailSlice is an alias for a slice of pointers to FSPooldetail.
// This should almost always be used instead of []*FSPooldetail.
type FSPooldetailSlice []*FSPooldetail

// FSPooldetails contains methods to work with the fs_pooldetail table
var FSPooldetails = psql.NewTablex[*FSPooldetail, FSPooldetailSlice, *FSPooldetailSetter]("", "fs_pooldetail", buildFSPooldetailColumns("fs_pooldetail"))

// FSPooldetailsQuery is a query on the fs_pooldetail table
type FSPooldetailsQuery = *psql.ViewQuery[*FSPooldetail, FSPooldetailSlice]

func buildFSPooldetailColumns(alias string) fsPooldetailColumns {
	return fsPooldetailColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "females", "globalid", "objectid", "pool_id", "species", "trapdata_id", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_pooldetail"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Females:        psql.Quote(alias, "females"),
		Globalid:       psql.Quote(alias, "globalid"),
		Objectid:       psql.Quote(alias, "objectid"),
		PoolID:         psql.Quote(alias, "pool_id"),
		Species:        psql.Quote(alias, "species"),
		TrapdataID:     psql.Quote(alias, "trapdata_id"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsPooldetailColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Females        psql.Expression
	Globalid       psql.Expression
	Objectid       psql.Expression
	PoolID         psql.Expression
	Species        psql.Expression
	TrapdataID     psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsPooldetailColumns) Alias() string {
	return c.tableAlias
}

func (fsPooldetailColumns) AliasedAs(alias string) fsPooldetailColumns {
	return buildFSPooldetailColumns(alias)
}

// FSPooldetailSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSPooldetailSetter struct {
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	Females        omitnull.Val[int16]   `db:"females" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	PoolID         omitnull.Val[string]  `db:"pool_id" `
	Species        omitnull.Val[string]  `db:"species" `
	TrapdataID     omitnull.Val[string]  `db:"trapdata_id" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSPooldetailSetter) SetColumns() []string {
	vals := make([]string, 0, 17)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Females.IsUnset() {
		vals = append(vals, "females")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.PoolID.IsUnset() {
		vals = append(vals, "pool_id")
	}
	if !s.Species.IsUnset() {
		vals = append(vals, "species")
	}
	if !s.TrapdataID.IsUnset() {
		vals = append(vals, "trapdata_id")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSPooldetailSetter) Overwrite(t *FSPooldetail) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Females.IsUnset() {
		t.Females = s.Females.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.PoolID.IsUnset() {
		t.PoolID = s.PoolID.MustGetNull()
	}
	if !s.Species.IsUnset() {
		t.Species = s.Species.MustGetNull()
	}
	if !s.TrapdataID.IsUnset() {
		t.TrapdataID = s.TrapdataID.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSPooldetailSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSPooldetails.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 17)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Females.IsUnset() {
			vals[4] = psql.Arg(s.Females.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[6] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.PoolID.IsUnset() {
			vals[7] = psql.Arg(s.PoolID.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Species.IsUnset() {
			vals[8] = psql.Arg(s.Species.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.TrapdataID.IsUnset() {
			vals[9] = psql.Arg(s.TrapdataID.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[10] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[11] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[12] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[13] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[14] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[15] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[16] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSPooldetailSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSPooldetailSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 17)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Females.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "females")...),
			psql.Arg(s.Females),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.PoolID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pool_id")...),
			psql.Arg(s.PoolID),
		}})
	}

	if !s.Species.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "species")...),
			psql.Arg(s.Species),
		}})
	}

	if !s.TrapdataID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "trapdata_id")...),
			psql.Arg(s.TrapdataID),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSPooldetail retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSPooldetail(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSPooldetail, error) {
	if len(cols) == 0 {
		return FSPooldetails.Query(
			sm.Where(FSPooldetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSPooldetails.Query(
		sm.Where(FSPooldetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSPooldetails.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSPooldetailExists checks the presence of a single record by primary key
func FSPooldetailExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSPooldetails.Query(
		sm.Where(FSPooldetails.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSPooldetail is retrieved from the database
func (o *FSPooldetail) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSPooldetails.AfterSelectHooks.RunHooks(ctx, exec, FSPooldetailSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSPooldetails.AfterInsertHooks.RunHooks(ctx, exec, FSPooldetailSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSPooldetails.AfterUpdateHooks.RunHooks(ctx, exec, FSPooldetailSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSPooldetails.AfterDeleteHooks.RunHooks(ctx, exec, FSPooldetailSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSPooldetail
func (o *FSPooldetail) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSPooldetail) pkEQ() dialect.Expression {
	return psql.Quote("fs_pooldetail", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSPooldetail
func (o *FSPooldetail) Update(ctx context.Context, exec bob.Executor, s *FSPooldetailSetter) error {
	v, err := FSPooldetails.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSPooldetail record with an executor
func (o *FSPooldetail) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSPooldetails.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSPooldetail using the executor
func (o *FSPooldetail) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSPooldetails.Query(
		sm.Where(FSPooldetails.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSPooldetailSlice is retrieved from the database
func (o FSPooldetailSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSPooldetails.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSPooldetails.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSPooldetails.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSPooldetails.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSPooldetailSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_pooldetail", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSPooldetailSlice) copyMatchingRows(from ...*FSPooldetail) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSPooldetailSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSPooldetails.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSPooldetail:
				o.copyMatchingRows(retrieved)
			case []*FSPooldetail:
				o.copyMatchingRows(retrieved...)
			case FSPooldetailSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSPooldetail or a slice of FSPooldetail
				// then run the AfterUpdateHooks on the slice
				_, err = FSPooldetails.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSPooldetailSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSPooldetails.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSPooldetail:
				o.copyMatchingRows(retrieved)
			case []*FSPooldetail:
				o.copyMatchingRows(retrieved...)
			case FSPooldetailSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSPooldetail or a slice of FSPooldetail
				// then run the AfterDeleteHooks on the slice
				_, err = FSPooldetails.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSPooldetailSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSPooldetailSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSPooldetails.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSPooldetailSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSPooldetails.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSPooldetailSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSPooldetails.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsPooldetailWhere[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Females        psql.WhereNullMod[Q, int16]
	Globalid       psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	PoolID         psql.WhereNullMod[Q, string]
	Species        psql.WhereNullMod[Q, string]
	TrapdataID     psql.WhereNullMod[Q, string]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsPooldetailWhere[Q]) AliasedAs(alias string) fsPooldetailWhere[Q] {
	return buildFSPooldetailWhere[Q](buildFSPooldetailColumns(alias))
}

func buildFSPooldetailWhere[Q psql.Filterable](cols fsPooldetailColumns) fsPooldetailWhere[Q] {
	return fsPooldetailWhere[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Females:        psql.WhereNull[Q, int16](cols.Females),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		PoolID:         psql.WhereNull[Q, string](cols.PoolID),
		Species:        psql.WhereNull[Q, string](cols.Species),
		TrapdataID:     psql.WhereNull[Q, string](cols.TrapdataID),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
