// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryRodentlocation is an object representing the database table.
type HistoryRodentlocation struct {
	Accessdesc                null.Val[string]    `db:"accessdesc" `
	Active                    null.Val[int16]     `db:"active" `
	Comments                  null.Val[string]    `db:"comments" `
	Creationdate              null.Val[int64]     `db:"creationdate" `
	Creator                   null.Val[string]    `db:"creator" `
	Description               null.Val[string]    `db:"description" `
	Externalid                null.Val[string]    `db:"externalid" `
	Editdate                  null.Val[int64]     `db:"editdate" `
	Editor                    null.Val[string]    `db:"editor" `
	Globalid                  null.Val[string]    `db:"globalid" `
	Habitat                   null.Val[string]    `db:"habitat" `
	Lastinspectaction         null.Val[string]    `db:"lastinspectaction" `
	Lastinspectconditions     null.Val[string]    `db:"lastinspectconditions" `
	Lastinspectdate           null.Val[int64]     `db:"lastinspectdate" `
	Lastinspectrodentevidence null.Val[string]    `db:"lastinspectrodentevidence" `
	Lastinspectspecies        null.Val[string]    `db:"lastinspectspecies" `
	Locationname              null.Val[string]    `db:"locationname" `
	Locationnumber            null.Val[int64]     `db:"locationnumber" `
	Nextactiondatescheduled   null.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                  int32               `db:"objectid,pk" `
	Priority                  null.Val[string]    `db:"priority" `
	Symbology                 null.Val[string]    `db:"symbology" `
	Usetype                   null.Val[string]    `db:"usetype" `
	Zone                      null.Val[string]    `db:"zone" `
	Zone2                     null.Val[string]    `db:"zone2" `
	Created                   null.Val[time.Time] `db:"created" `
	CreatedDate               null.Val[int64]     `db:"created_date" `
	CreatedUser               null.Val[string]    `db:"created_user" `
	GeometryX                 null.Val[float64]   `db:"geometry_x" `
	GeometryY                 null.Val[float64]   `db:"geometry_y" `
	LastEditedDate            null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser            null.Val[string]    `db:"last_edited_user" `
	Version                   int32               `db:"version,pk" `
}

// HistoryRodentlocationSlice is an alias for a slice of pointers to HistoryRodentlocation.
// This should almost always be used instead of []*HistoryRodentlocation.
type HistoryRodentlocationSlice []*HistoryRodentlocation

// HistoryRodentlocations contains methods to work with the history_rodentlocation table
var HistoryRodentlocations = psql.NewTablex[*HistoryRodentlocation, HistoryRodentlocationSlice, *HistoryRodentlocationSetter]("", "history_rodentlocation", buildHistoryRodentlocationColumns("history_rodentlocation"))

// HistoryRodentlocationsQuery is a query on the history_rodentlocation table
type HistoryRodentlocationsQuery = *psql.ViewQuery[*HistoryRodentlocation, HistoryRodentlocationSlice]

func buildHistoryRodentlocationColumns(alias string) historyRodentlocationColumns {
	return historyRodentlocationColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"accessdesc", "active", "comments", "creationdate", "creator", "description", "externalid", "editdate", "editor", "globalid", "habitat", "lastinspectaction", "lastinspectconditions", "lastinspectdate", "lastinspectrodentevidence", "lastinspectspecies", "locationname", "locationnumber", "nextactiondatescheduled", "objectid", "priority", "symbology", "usetype", "zone", "zone2", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_rodentlocation"),
		tableAlias:                alias,
		Accessdesc:                psql.Quote(alias, "accessdesc"),
		Active:                    psql.Quote(alias, "active"),
		Comments:                  psql.Quote(alias, "comments"),
		Creationdate:              psql.Quote(alias, "creationdate"),
		Creator:                   psql.Quote(alias, "creator"),
		Description:               psql.Quote(alias, "description"),
		Externalid:                psql.Quote(alias, "externalid"),
		Editdate:                  psql.Quote(alias, "editdate"),
		Editor:                    psql.Quote(alias, "editor"),
		Globalid:                  psql.Quote(alias, "globalid"),
		Habitat:                   psql.Quote(alias, "habitat"),
		Lastinspectaction:         psql.Quote(alias, "lastinspectaction"),
		Lastinspectconditions:     psql.Quote(alias, "lastinspectconditions"),
		Lastinspectdate:           psql.Quote(alias, "lastinspectdate"),
		Lastinspectrodentevidence: psql.Quote(alias, "lastinspectrodentevidence"),
		Lastinspectspecies:        psql.Quote(alias, "lastinspectspecies"),
		Locationname:              psql.Quote(alias, "locationname"),
		Locationnumber:            psql.Quote(alias, "locationnumber"),
		Nextactiondatescheduled:   psql.Quote(alias, "nextactiondatescheduled"),
		Objectid:                  psql.Quote(alias, "objectid"),
		Priority:                  psql.Quote(alias, "priority"),
		Symbology:                 psql.Quote(alias, "symbology"),
		Usetype:                   psql.Quote(alias, "usetype"),
		Zone:                      psql.Quote(alias, "zone"),
		Zone2:                     psql.Quote(alias, "zone2"),
		Created:                   psql.Quote(alias, "created"),
		CreatedDate:               psql.Quote(alias, "created_date"),
		CreatedUser:               psql.Quote(alias, "created_user"),
		GeometryX:                 psql.Quote(alias, "geometry_x"),
		GeometryY:                 psql.Quote(alias, "geometry_y"),
		LastEditedDate:            psql.Quote(alias, "last_edited_date"),
		LastEditedUser:            psql.Quote(alias, "last_edited_user"),
		Version:                   psql.Quote(alias, "version"),
	}
}

type historyRodentlocationColumns struct {
	expr.ColumnsExpr
	tableAlias                string
	Accessdesc                psql.Expression
	Active                    psql.Expression
	Comments                  psql.Expression
	Creationdate              psql.Expression
	Creator                   psql.Expression
	Description               psql.Expression
	Externalid                psql.Expression
	Editdate                  psql.Expression
	Editor                    psql.Expression
	Globalid                  psql.Expression
	Habitat                   psql.Expression
	Lastinspectaction         psql.Expression
	Lastinspectconditions     psql.Expression
	Lastinspectdate           psql.Expression
	Lastinspectrodentevidence psql.Expression
	Lastinspectspecies        psql.Expression
	Locationname              psql.Expression
	Locationnumber            psql.Expression
	Nextactiondatescheduled   psql.Expression
	Objectid                  psql.Expression
	Priority                  psql.Expression
	Symbology                 psql.Expression
	Usetype                   psql.Expression
	Zone                      psql.Expression
	Zone2                     psql.Expression
	Created                   psql.Expression
	CreatedDate               psql.Expression
	CreatedUser               psql.Expression
	GeometryX                 psql.Expression
	GeometryY                 psql.Expression
	LastEditedDate            psql.Expression
	LastEditedUser            psql.Expression
	Version                   psql.Expression
}

func (c historyRodentlocationColumns) Alias() string {
	return c.tableAlias
}

func (historyRodentlocationColumns) AliasedAs(alias string) historyRodentlocationColumns {
	return buildHistoryRodentlocationColumns(alias)
}

// HistoryRodentlocationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryRodentlocationSetter struct {
	Accessdesc                omitnull.Val[string]    `db:"accessdesc" `
	Active                    omitnull.Val[int16]     `db:"active" `
	Comments                  omitnull.Val[string]    `db:"comments" `
	Creationdate              omitnull.Val[int64]     `db:"creationdate" `
	Creator                   omitnull.Val[string]    `db:"creator" `
	Description               omitnull.Val[string]    `db:"description" `
	Externalid                omitnull.Val[string]    `db:"externalid" `
	Editdate                  omitnull.Val[int64]     `db:"editdate" `
	Editor                    omitnull.Val[string]    `db:"editor" `
	Globalid                  omitnull.Val[string]    `db:"globalid" `
	Habitat                   omitnull.Val[string]    `db:"habitat" `
	Lastinspectaction         omitnull.Val[string]    `db:"lastinspectaction" `
	Lastinspectconditions     omitnull.Val[string]    `db:"lastinspectconditions" `
	Lastinspectdate           omitnull.Val[int64]     `db:"lastinspectdate" `
	Lastinspectrodentevidence omitnull.Val[string]    `db:"lastinspectrodentevidence" `
	Lastinspectspecies        omitnull.Val[string]    `db:"lastinspectspecies" `
	Locationname              omitnull.Val[string]    `db:"locationname" `
	Locationnumber            omitnull.Val[int64]     `db:"locationnumber" `
	Nextactiondatescheduled   omitnull.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                  omit.Val[int32]         `db:"objectid,pk" `
	Priority                  omitnull.Val[string]    `db:"priority" `
	Symbology                 omitnull.Val[string]    `db:"symbology" `
	Usetype                   omitnull.Val[string]    `db:"usetype" `
	Zone                      omitnull.Val[string]    `db:"zone" `
	Zone2                     omitnull.Val[string]    `db:"zone2" `
	Created                   omitnull.Val[time.Time] `db:"created" `
	CreatedDate               omitnull.Val[int64]     `db:"created_date" `
	CreatedUser               omitnull.Val[string]    `db:"created_user" `
	GeometryX                 omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY                 omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate            omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser            omitnull.Val[string]    `db:"last_edited_user" `
	Version                   omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryRodentlocationSetter) SetColumns() []string {
	vals := make([]string, 0, 33)
	if !s.Accessdesc.IsUnset() {
		vals = append(vals, "accessdesc")
	}
	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}
	if !s.Comments.IsUnset() {
		vals = append(vals, "comments")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if !s.Externalid.IsUnset() {
		vals = append(vals, "externalid")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Habitat.IsUnset() {
		vals = append(vals, "habitat")
	}
	if !s.Lastinspectaction.IsUnset() {
		vals = append(vals, "lastinspectaction")
	}
	if !s.Lastinspectconditions.IsUnset() {
		vals = append(vals, "lastinspectconditions")
	}
	if !s.Lastinspectdate.IsUnset() {
		vals = append(vals, "lastinspectdate")
	}
	if !s.Lastinspectrodentevidence.IsUnset() {
		vals = append(vals, "lastinspectrodentevidence")
	}
	if !s.Lastinspectspecies.IsUnset() {
		vals = append(vals, "lastinspectspecies")
	}
	if !s.Locationname.IsUnset() {
		vals = append(vals, "locationname")
	}
	if !s.Locationnumber.IsUnset() {
		vals = append(vals, "locationnumber")
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		vals = append(vals, "nextactiondatescheduled")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Priority.IsUnset() {
		vals = append(vals, "priority")
	}
	if !s.Symbology.IsUnset() {
		vals = append(vals, "symbology")
	}
	if !s.Usetype.IsUnset() {
		vals = append(vals, "usetype")
	}
	if !s.Zone.IsUnset() {
		vals = append(vals, "zone")
	}
	if !s.Zone2.IsUnset() {
		vals = append(vals, "zone2")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryRodentlocationSetter) Overwrite(t *HistoryRodentlocation) {
	if !s.Accessdesc.IsUnset() {
		t.Accessdesc = s.Accessdesc.MustGetNull()
	}
	if !s.Active.IsUnset() {
		t.Active = s.Active.MustGetNull()
	}
	if !s.Comments.IsUnset() {
		t.Comments = s.Comments.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if !s.Externalid.IsUnset() {
		t.Externalid = s.Externalid.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Habitat.IsUnset() {
		t.Habitat = s.Habitat.MustGetNull()
	}
	if !s.Lastinspectaction.IsUnset() {
		t.Lastinspectaction = s.Lastinspectaction.MustGetNull()
	}
	if !s.Lastinspectconditions.IsUnset() {
		t.Lastinspectconditions = s.Lastinspectconditions.MustGetNull()
	}
	if !s.Lastinspectdate.IsUnset() {
		t.Lastinspectdate = s.Lastinspectdate.MustGetNull()
	}
	if !s.Lastinspectrodentevidence.IsUnset() {
		t.Lastinspectrodentevidence = s.Lastinspectrodentevidence.MustGetNull()
	}
	if !s.Lastinspectspecies.IsUnset() {
		t.Lastinspectspecies = s.Lastinspectspecies.MustGetNull()
	}
	if !s.Locationname.IsUnset() {
		t.Locationname = s.Locationname.MustGetNull()
	}
	if !s.Locationnumber.IsUnset() {
		t.Locationnumber = s.Locationnumber.MustGetNull()
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		t.Nextactiondatescheduled = s.Nextactiondatescheduled.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Priority.IsUnset() {
		t.Priority = s.Priority.MustGetNull()
	}
	if !s.Symbology.IsUnset() {
		t.Symbology = s.Symbology.MustGetNull()
	}
	if !s.Usetype.IsUnset() {
		t.Usetype = s.Usetype.MustGetNull()
	}
	if !s.Zone.IsUnset() {
		t.Zone = s.Zone.MustGetNull()
	}
	if !s.Zone2.IsUnset() {
		t.Zone2 = s.Zone2.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryRodentlocationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryRodentlocations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 33)
		if !s.Accessdesc.IsUnset() {
			vals[0] = psql.Arg(s.Accessdesc.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Active.IsUnset() {
			vals[1] = psql.Arg(s.Active.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Comments.IsUnset() {
			vals[2] = psql.Arg(s.Comments.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[3] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[4] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Description.IsUnset() {
			vals[5] = psql.Arg(s.Description.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Externalid.IsUnset() {
			vals[6] = psql.Arg(s.Externalid.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[7] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[8] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[9] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Habitat.IsUnset() {
			vals[10] = psql.Arg(s.Habitat.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectaction.IsUnset() {
			vals[11] = psql.Arg(s.Lastinspectaction.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectconditions.IsUnset() {
			vals[12] = psql.Arg(s.Lastinspectconditions.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectdate.IsUnset() {
			vals[13] = psql.Arg(s.Lastinspectdate.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectrodentevidence.IsUnset() {
			vals[14] = psql.Arg(s.Lastinspectrodentevidence.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectspecies.IsUnset() {
			vals[15] = psql.Arg(s.Lastinspectspecies.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.Locationname.IsUnset() {
			vals[16] = psql.Arg(s.Locationname.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.Locationnumber.IsUnset() {
			vals[17] = psql.Arg(s.Locationnumber.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.Nextactiondatescheduled.IsUnset() {
			vals[18] = psql.Arg(s.Nextactiondatescheduled.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[19] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.Priority.IsUnset() {
			vals[20] = psql.Arg(s.Priority.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if !s.Symbology.IsUnset() {
			vals[21] = psql.Arg(s.Symbology.MustGetNull())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		if !s.Usetype.IsUnset() {
			vals[22] = psql.Arg(s.Usetype.MustGetNull())
		} else {
			vals[22] = psql.Raw("DEFAULT")
		}

		if !s.Zone.IsUnset() {
			vals[23] = psql.Arg(s.Zone.MustGetNull())
		} else {
			vals[23] = psql.Raw("DEFAULT")
		}

		if !s.Zone2.IsUnset() {
			vals[24] = psql.Arg(s.Zone2.MustGetNull())
		} else {
			vals[24] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[25] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[25] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[26] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[26] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[27] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[27] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[28] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[28] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[29] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[29] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[30] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[30] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[31] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[31] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[32] = psql.Arg(s.Version.MustGet())
		} else {
			vals[32] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryRodentlocationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryRodentlocationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 33)

	if !s.Accessdesc.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "accessdesc")...),
			psql.Arg(s.Accessdesc),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Comments.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "comments")...),
			psql.Arg(s.Comments),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Externalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "externalid")...),
			psql.Arg(s.Externalid),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Habitat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "habitat")...),
			psql.Arg(s.Habitat),
		}})
	}

	if !s.Lastinspectaction.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectaction")...),
			psql.Arg(s.Lastinspectaction),
		}})
	}

	if !s.Lastinspectconditions.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectconditions")...),
			psql.Arg(s.Lastinspectconditions),
		}})
	}

	if !s.Lastinspectdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectdate")...),
			psql.Arg(s.Lastinspectdate),
		}})
	}

	if !s.Lastinspectrodentevidence.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectrodentevidence")...),
			psql.Arg(s.Lastinspectrodentevidence),
		}})
	}

	if !s.Lastinspectspecies.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectspecies")...),
			psql.Arg(s.Lastinspectspecies),
		}})
	}

	if !s.Locationname.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "locationname")...),
			psql.Arg(s.Locationname),
		}})
	}

	if !s.Locationnumber.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "locationnumber")...),
			psql.Arg(s.Locationnumber),
		}})
	}

	if !s.Nextactiondatescheduled.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nextactiondatescheduled")...),
			psql.Arg(s.Nextactiondatescheduled),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Priority.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "priority")...),
			psql.Arg(s.Priority),
		}})
	}

	if !s.Symbology.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "symbology")...),
			psql.Arg(s.Symbology),
		}})
	}

	if !s.Usetype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "usetype")...),
			psql.Arg(s.Usetype),
		}})
	}

	if !s.Zone.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone")...),
			psql.Arg(s.Zone),
		}})
	}

	if !s.Zone2.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone2")...),
			psql.Arg(s.Zone2),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryRodentlocation retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryRodentlocation(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryRodentlocation, error) {
	if len(cols) == 0 {
		return HistoryRodentlocations.Query(
			sm.Where(HistoryRodentlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryRodentlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryRodentlocations.Query(
		sm.Where(HistoryRodentlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryRodentlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryRodentlocations.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryRodentlocationExists checks the presence of a single record by primary key
func HistoryRodentlocationExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryRodentlocations.Query(
		sm.Where(HistoryRodentlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryRodentlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryRodentlocation is retrieved from the database
func (o *HistoryRodentlocation) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryRodentlocations.AfterSelectHooks.RunHooks(ctx, exec, HistoryRodentlocationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryRodentlocations.AfterInsertHooks.RunHooks(ctx, exec, HistoryRodentlocationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryRodentlocations.AfterUpdateHooks.RunHooks(ctx, exec, HistoryRodentlocationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryRodentlocations.AfterDeleteHooks.RunHooks(ctx, exec, HistoryRodentlocationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryRodentlocation
func (o *HistoryRodentlocation) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryRodentlocation) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_rodentlocation", "objectid"), psql.Quote("history_rodentlocation", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryRodentlocation
func (o *HistoryRodentlocation) Update(ctx context.Context, exec bob.Executor, s *HistoryRodentlocationSetter) error {
	v, err := HistoryRodentlocations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryRodentlocation record with an executor
func (o *HistoryRodentlocation) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryRodentlocations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryRodentlocation using the executor
func (o *HistoryRodentlocation) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryRodentlocations.Query(
		sm.Where(HistoryRodentlocations.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryRodentlocations.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryRodentlocationSlice is retrieved from the database
func (o HistoryRodentlocationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryRodentlocations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryRodentlocations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryRodentlocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryRodentlocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryRodentlocationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_rodentlocation", "objectid"), psql.Quote("history_rodentlocation", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryRodentlocationSlice) copyMatchingRows(from ...*HistoryRodentlocation) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryRodentlocationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryRodentlocations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryRodentlocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryRodentlocation:
				o.copyMatchingRows(retrieved...)
			case HistoryRodentlocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryRodentlocation or a slice of HistoryRodentlocation
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryRodentlocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryRodentlocationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryRodentlocations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryRodentlocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryRodentlocation:
				o.copyMatchingRows(retrieved...)
			case HistoryRodentlocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryRodentlocation or a slice of HistoryRodentlocation
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryRodentlocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryRodentlocationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryRodentlocationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryRodentlocations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryRodentlocationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryRodentlocations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryRodentlocationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryRodentlocations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyRodentlocationWhere[Q psql.Filterable] struct {
	Accessdesc                psql.WhereNullMod[Q, string]
	Active                    psql.WhereNullMod[Q, int16]
	Comments                  psql.WhereNullMod[Q, string]
	Creationdate              psql.WhereNullMod[Q, int64]
	Creator                   psql.WhereNullMod[Q, string]
	Description               psql.WhereNullMod[Q, string]
	Externalid                psql.WhereNullMod[Q, string]
	Editdate                  psql.WhereNullMod[Q, int64]
	Editor                    psql.WhereNullMod[Q, string]
	Globalid                  psql.WhereNullMod[Q, string]
	Habitat                   psql.WhereNullMod[Q, string]
	Lastinspectaction         psql.WhereNullMod[Q, string]
	Lastinspectconditions     psql.WhereNullMod[Q, string]
	Lastinspectdate           psql.WhereNullMod[Q, int64]
	Lastinspectrodentevidence psql.WhereNullMod[Q, string]
	Lastinspectspecies        psql.WhereNullMod[Q, string]
	Locationname              psql.WhereNullMod[Q, string]
	Locationnumber            psql.WhereNullMod[Q, int64]
	Nextactiondatescheduled   psql.WhereNullMod[Q, int64]
	Objectid                  psql.WhereMod[Q, int32]
	Priority                  psql.WhereNullMod[Q, string]
	Symbology                 psql.WhereNullMod[Q, string]
	Usetype                   psql.WhereNullMod[Q, string]
	Zone                      psql.WhereNullMod[Q, string]
	Zone2                     psql.WhereNullMod[Q, string]
	Created                   psql.WhereNullMod[Q, time.Time]
	CreatedDate               psql.WhereNullMod[Q, int64]
	CreatedUser               psql.WhereNullMod[Q, string]
	GeometryX                 psql.WhereNullMod[Q, float64]
	GeometryY                 psql.WhereNullMod[Q, float64]
	LastEditedDate            psql.WhereNullMod[Q, int64]
	LastEditedUser            psql.WhereNullMod[Q, string]
	Version                   psql.WhereMod[Q, int32]
}

func (historyRodentlocationWhere[Q]) AliasedAs(alias string) historyRodentlocationWhere[Q] {
	return buildHistoryRodentlocationWhere[Q](buildHistoryRodentlocationColumns(alias))
}

func buildHistoryRodentlocationWhere[Q psql.Filterable](cols historyRodentlocationColumns) historyRodentlocationWhere[Q] {
	return historyRodentlocationWhere[Q]{
		Accessdesc:                psql.WhereNull[Q, string](cols.Accessdesc),
		Active:                    psql.WhereNull[Q, int16](cols.Active),
		Comments:                  psql.WhereNull[Q, string](cols.Comments),
		Creationdate:              psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:                   psql.WhereNull[Q, string](cols.Creator),
		Description:               psql.WhereNull[Q, string](cols.Description),
		Externalid:                psql.WhereNull[Q, string](cols.Externalid),
		Editdate:                  psql.WhereNull[Q, int64](cols.Editdate),
		Editor:                    psql.WhereNull[Q, string](cols.Editor),
		Globalid:                  psql.WhereNull[Q, string](cols.Globalid),
		Habitat:                   psql.WhereNull[Q, string](cols.Habitat),
		Lastinspectaction:         psql.WhereNull[Q, string](cols.Lastinspectaction),
		Lastinspectconditions:     psql.WhereNull[Q, string](cols.Lastinspectconditions),
		Lastinspectdate:           psql.WhereNull[Q, int64](cols.Lastinspectdate),
		Lastinspectrodentevidence: psql.WhereNull[Q, string](cols.Lastinspectrodentevidence),
		Lastinspectspecies:        psql.WhereNull[Q, string](cols.Lastinspectspecies),
		Locationname:              psql.WhereNull[Q, string](cols.Locationname),
		Locationnumber:            psql.WhereNull[Q, int64](cols.Locationnumber),
		Nextactiondatescheduled:   psql.WhereNull[Q, int64](cols.Nextactiondatescheduled),
		Objectid:                  psql.Where[Q, int32](cols.Objectid),
		Priority:                  psql.WhereNull[Q, string](cols.Priority),
		Symbology:                 psql.WhereNull[Q, string](cols.Symbology),
		Usetype:                   psql.WhereNull[Q, string](cols.Usetype),
		Zone:                      psql.WhereNull[Q, string](cols.Zone),
		Zone2:                     psql.WhereNull[Q, string](cols.Zone2),
		Created:                   psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:               psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:               psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:                 psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:                 psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate:            psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser:            psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:                   psql.Where[Q, int32](cols.Version),
	}
}
