// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryTraplocation is an object representing the database table.
type HistoryTraplocation struct {
	Accessdesc              null.Val[string]    `db:"accessdesc" `
	Active                  null.Val[int16]     `db:"active" `
	Comments                null.Val[string]    `db:"comments" `
	Creationdate            null.Val[int64]     `db:"creationdate" `
	Creator                 null.Val[string]    `db:"creator" `
	Description             null.Val[string]    `db:"description" `
	Externalid              null.Val[string]    `db:"externalid" `
	Editdate                null.Val[int64]     `db:"editdate" `
	Editor                  null.Val[string]    `db:"editor" `
	Gatewaysync             null.Val[int16]     `db:"gatewaysync" `
	Globalid                null.Val[string]    `db:"globalid" `
	Habitat                 null.Val[string]    `db:"habitat" `
	Locationnumber          null.Val[int64]     `db:"locationnumber" `
	Name                    null.Val[string]    `db:"name" `
	Nextactiondatescheduled null.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                int32               `db:"objectid,pk" `
	Priority                null.Val[string]    `db:"priority" `
	Usetype                 null.Val[string]    `db:"usetype" `
	Vectorsurvsiteid        null.Val[string]    `db:"vectorsurvsiteid" `
	Zone                    null.Val[string]    `db:"zone" `
	Zone2                   null.Val[string]    `db:"zone2" `
	Created                 null.Val[time.Time] `db:"created" `
	CreatedDate             null.Val[int64]     `db:"created_date" `
	CreatedUser             null.Val[string]    `db:"created_user" `
	GeometryX               null.Val[float64]   `db:"geometry_x" `
	GeometryY               null.Val[float64]   `db:"geometry_y" `
	H3R7                    null.Val[string]    `db:"h3r7" `
	H3R8                    null.Val[string]    `db:"h3r8" `
	LastEditedDate          null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser          null.Val[string]    `db:"last_edited_user" `
	Route                   null.Val[int64]     `db:"route" `
	RouteOrder              null.Val[int64]     `db:"route_order" `
	SetDow                  null.Val[int64]     `db:"set_dow" `
	Version                 int32               `db:"version,pk" `
}

// HistoryTraplocationSlice is an alias for a slice of pointers to HistoryTraplocation.
// This should almost always be used instead of []*HistoryTraplocation.
type HistoryTraplocationSlice []*HistoryTraplocation

// HistoryTraplocations contains methods to work with the history_traplocation table
var HistoryTraplocations = psql.NewTablex[*HistoryTraplocation, HistoryTraplocationSlice, *HistoryTraplocationSetter]("", "history_traplocation", buildHistoryTraplocationColumns("history_traplocation"))

// HistoryTraplocationsQuery is a query on the history_traplocation table
type HistoryTraplocationsQuery = *psql.ViewQuery[*HistoryTraplocation, HistoryTraplocationSlice]

func buildHistoryTraplocationColumns(alias string) historyTraplocationColumns {
	return historyTraplocationColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"accessdesc", "active", "comments", "creationdate", "creator", "description", "externalid", "editdate", "editor", "gatewaysync", "globalid", "habitat", "locationnumber", "name", "nextactiondatescheduled", "objectid", "priority", "usetype", "vectorsurvsiteid", "zone", "zone2", "created", "created_date", "created_user", "geometry_x", "geometry_y", "h3r7", "h3r8", "last_edited_date", "last_edited_user", "route", "route_order", "set_dow", "version",
		).WithParent("history_traplocation"),
		tableAlias:              alias,
		Accessdesc:              psql.Quote(alias, "accessdesc"),
		Active:                  psql.Quote(alias, "active"),
		Comments:                psql.Quote(alias, "comments"),
		Creationdate:            psql.Quote(alias, "creationdate"),
		Creator:                 psql.Quote(alias, "creator"),
		Description:             psql.Quote(alias, "description"),
		Externalid:              psql.Quote(alias, "externalid"),
		Editdate:                psql.Quote(alias, "editdate"),
		Editor:                  psql.Quote(alias, "editor"),
		Gatewaysync:             psql.Quote(alias, "gatewaysync"),
		Globalid:                psql.Quote(alias, "globalid"),
		Habitat:                 psql.Quote(alias, "habitat"),
		Locationnumber:          psql.Quote(alias, "locationnumber"),
		Name:                    psql.Quote(alias, "name"),
		Nextactiondatescheduled: psql.Quote(alias, "nextactiondatescheduled"),
		Objectid:                psql.Quote(alias, "objectid"),
		Priority:                psql.Quote(alias, "priority"),
		Usetype:                 psql.Quote(alias, "usetype"),
		Vectorsurvsiteid:        psql.Quote(alias, "vectorsurvsiteid"),
		Zone:                    psql.Quote(alias, "zone"),
		Zone2:                   psql.Quote(alias, "zone2"),
		Created:                 psql.Quote(alias, "created"),
		CreatedDate:             psql.Quote(alias, "created_date"),
		CreatedUser:             psql.Quote(alias, "created_user"),
		GeometryX:               psql.Quote(alias, "geometry_x"),
		GeometryY:               psql.Quote(alias, "geometry_y"),
		H3R7:                    psql.Quote(alias, "h3r7"),
		H3R8:                    psql.Quote(alias, "h3r8"),
		LastEditedDate:          psql.Quote(alias, "last_edited_date"),
		LastEditedUser:          psql.Quote(alias, "last_edited_user"),
		Route:                   psql.Quote(alias, "route"),
		RouteOrder:              psql.Quote(alias, "route_order"),
		SetDow:                  psql.Quote(alias, "set_dow"),
		Version:                 psql.Quote(alias, "version"),
	}
}

type historyTraplocationColumns struct {
	expr.ColumnsExpr
	tableAlias              string
	Accessdesc              psql.Expression
	Active                  psql.Expression
	Comments                psql.Expression
	Creationdate            psql.Expression
	Creator                 psql.Expression
	Description             psql.Expression
	Externalid              psql.Expression
	Editdate                psql.Expression
	Editor                  psql.Expression
	Gatewaysync             psql.Expression
	Globalid                psql.Expression
	Habitat                 psql.Expression
	Locationnumber          psql.Expression
	Name                    psql.Expression
	Nextactiondatescheduled psql.Expression
	Objectid                psql.Expression
	Priority                psql.Expression
	Usetype                 psql.Expression
	Vectorsurvsiteid        psql.Expression
	Zone                    psql.Expression
	Zone2                   psql.Expression
	Created                 psql.Expression
	CreatedDate             psql.Expression
	CreatedUser             psql.Expression
	GeometryX               psql.Expression
	GeometryY               psql.Expression
	H3R7                    psql.Expression
	H3R8                    psql.Expression
	LastEditedDate          psql.Expression
	LastEditedUser          psql.Expression
	Route                   psql.Expression
	RouteOrder              psql.Expression
	SetDow                  psql.Expression
	Version                 psql.Expression
}

func (c historyTraplocationColumns) Alias() string {
	return c.tableAlias
}

func (historyTraplocationColumns) AliasedAs(alias string) historyTraplocationColumns {
	return buildHistoryTraplocationColumns(alias)
}

// HistoryTraplocationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryTraplocationSetter struct {
	Accessdesc              omitnull.Val[string]    `db:"accessdesc" `
	Active                  omitnull.Val[int16]     `db:"active" `
	Comments                omitnull.Val[string]    `db:"comments" `
	Creationdate            omitnull.Val[int64]     `db:"creationdate" `
	Creator                 omitnull.Val[string]    `db:"creator" `
	Description             omitnull.Val[string]    `db:"description" `
	Externalid              omitnull.Val[string]    `db:"externalid" `
	Editdate                omitnull.Val[int64]     `db:"editdate" `
	Editor                  omitnull.Val[string]    `db:"editor" `
	Gatewaysync             omitnull.Val[int16]     `db:"gatewaysync" `
	Globalid                omitnull.Val[string]    `db:"globalid" `
	Habitat                 omitnull.Val[string]    `db:"habitat" `
	Locationnumber          omitnull.Val[int64]     `db:"locationnumber" `
	Name                    omitnull.Val[string]    `db:"name" `
	Nextactiondatescheduled omitnull.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                omit.Val[int32]         `db:"objectid,pk" `
	Priority                omitnull.Val[string]    `db:"priority" `
	Usetype                 omitnull.Val[string]    `db:"usetype" `
	Vectorsurvsiteid        omitnull.Val[string]    `db:"vectorsurvsiteid" `
	Zone                    omitnull.Val[string]    `db:"zone" `
	Zone2                   omitnull.Val[string]    `db:"zone2" `
	Created                 omitnull.Val[time.Time] `db:"created" `
	CreatedDate             omitnull.Val[int64]     `db:"created_date" `
	CreatedUser             omitnull.Val[string]    `db:"created_user" `
	GeometryX               omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY               omitnull.Val[float64]   `db:"geometry_y" `
	H3R7                    omitnull.Val[string]    `db:"h3r7" `
	H3R8                    omitnull.Val[string]    `db:"h3r8" `
	LastEditedDate          omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser          omitnull.Val[string]    `db:"last_edited_user" `
	Route                   omitnull.Val[int64]     `db:"route" `
	RouteOrder              omitnull.Val[int64]     `db:"route_order" `
	SetDow                  omitnull.Val[int64]     `db:"set_dow" `
	Version                 omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryTraplocationSetter) SetColumns() []string {
	vals := make([]string, 0, 34)
	if !s.Accessdesc.IsUnset() {
		vals = append(vals, "accessdesc")
	}
	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}
	if !s.Comments.IsUnset() {
		vals = append(vals, "comments")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if !s.Externalid.IsUnset() {
		vals = append(vals, "externalid")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Gatewaysync.IsUnset() {
		vals = append(vals, "gatewaysync")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Habitat.IsUnset() {
		vals = append(vals, "habitat")
	}
	if !s.Locationnumber.IsUnset() {
		vals = append(vals, "locationnumber")
	}
	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		vals = append(vals, "nextactiondatescheduled")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Priority.IsUnset() {
		vals = append(vals, "priority")
	}
	if !s.Usetype.IsUnset() {
		vals = append(vals, "usetype")
	}
	if !s.Vectorsurvsiteid.IsUnset() {
		vals = append(vals, "vectorsurvsiteid")
	}
	if !s.Zone.IsUnset() {
		vals = append(vals, "zone")
	}
	if !s.Zone2.IsUnset() {
		vals = append(vals, "zone2")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.H3R7.IsUnset() {
		vals = append(vals, "h3r7")
	}
	if !s.H3R8.IsUnset() {
		vals = append(vals, "h3r8")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if !s.Route.IsUnset() {
		vals = append(vals, "route")
	}
	if !s.RouteOrder.IsUnset() {
		vals = append(vals, "route_order")
	}
	if !s.SetDow.IsUnset() {
		vals = append(vals, "set_dow")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryTraplocationSetter) Overwrite(t *HistoryTraplocation) {
	if !s.Accessdesc.IsUnset() {
		t.Accessdesc = s.Accessdesc.MustGetNull()
	}
	if !s.Active.IsUnset() {
		t.Active = s.Active.MustGetNull()
	}
	if !s.Comments.IsUnset() {
		t.Comments = s.Comments.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if !s.Externalid.IsUnset() {
		t.Externalid = s.Externalid.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Gatewaysync.IsUnset() {
		t.Gatewaysync = s.Gatewaysync.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Habitat.IsUnset() {
		t.Habitat = s.Habitat.MustGetNull()
	}
	if !s.Locationnumber.IsUnset() {
		t.Locationnumber = s.Locationnumber.MustGetNull()
	}
	if !s.Name.IsUnset() {
		t.Name = s.Name.MustGetNull()
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		t.Nextactiondatescheduled = s.Nextactiondatescheduled.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Priority.IsUnset() {
		t.Priority = s.Priority.MustGetNull()
	}
	if !s.Usetype.IsUnset() {
		t.Usetype = s.Usetype.MustGetNull()
	}
	if !s.Vectorsurvsiteid.IsUnset() {
		t.Vectorsurvsiteid = s.Vectorsurvsiteid.MustGetNull()
	}
	if !s.Zone.IsUnset() {
		t.Zone = s.Zone.MustGetNull()
	}
	if !s.Zone2.IsUnset() {
		t.Zone2 = s.Zone2.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.H3R7.IsUnset() {
		t.H3R7 = s.H3R7.MustGetNull()
	}
	if !s.H3R8.IsUnset() {
		t.H3R8 = s.H3R8.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if !s.Route.IsUnset() {
		t.Route = s.Route.MustGetNull()
	}
	if !s.RouteOrder.IsUnset() {
		t.RouteOrder = s.RouteOrder.MustGetNull()
	}
	if !s.SetDow.IsUnset() {
		t.SetDow = s.SetDow.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryTraplocationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryTraplocations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 34)
		if !s.Accessdesc.IsUnset() {
			vals[0] = psql.Arg(s.Accessdesc.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Active.IsUnset() {
			vals[1] = psql.Arg(s.Active.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Comments.IsUnset() {
			vals[2] = psql.Arg(s.Comments.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[3] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[4] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Description.IsUnset() {
			vals[5] = psql.Arg(s.Description.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Externalid.IsUnset() {
			vals[6] = psql.Arg(s.Externalid.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[7] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[8] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Gatewaysync.IsUnset() {
			vals[9] = psql.Arg(s.Gatewaysync.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[10] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Habitat.IsUnset() {
			vals[11] = psql.Arg(s.Habitat.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Locationnumber.IsUnset() {
			vals[12] = psql.Arg(s.Locationnumber.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Name.IsUnset() {
			vals[13] = psql.Arg(s.Name.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Nextactiondatescheduled.IsUnset() {
			vals[14] = psql.Arg(s.Nextactiondatescheduled.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[15] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.Priority.IsUnset() {
			vals[16] = psql.Arg(s.Priority.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.Usetype.IsUnset() {
			vals[17] = psql.Arg(s.Usetype.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.Vectorsurvsiteid.IsUnset() {
			vals[18] = psql.Arg(s.Vectorsurvsiteid.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if !s.Zone.IsUnset() {
			vals[19] = psql.Arg(s.Zone.MustGetNull())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.Zone2.IsUnset() {
			vals[20] = psql.Arg(s.Zone2.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[21] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[22] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[22] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[23] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[23] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[24] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[24] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[25] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[25] = psql.Raw("DEFAULT")
		}

		if !s.H3R7.IsUnset() {
			vals[26] = psql.Arg(s.H3R7.MustGetNull())
		} else {
			vals[26] = psql.Raw("DEFAULT")
		}

		if !s.H3R8.IsUnset() {
			vals[27] = psql.Arg(s.H3R8.MustGetNull())
		} else {
			vals[27] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[28] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[28] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[29] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[29] = psql.Raw("DEFAULT")
		}

		if !s.Route.IsUnset() {
			vals[30] = psql.Arg(s.Route.MustGetNull())
		} else {
			vals[30] = psql.Raw("DEFAULT")
		}

		if !s.RouteOrder.IsUnset() {
			vals[31] = psql.Arg(s.RouteOrder.MustGetNull())
		} else {
			vals[31] = psql.Raw("DEFAULT")
		}

		if !s.SetDow.IsUnset() {
			vals[32] = psql.Arg(s.SetDow.MustGetNull())
		} else {
			vals[32] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[33] = psql.Arg(s.Version.MustGet())
		} else {
			vals[33] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryTraplocationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryTraplocationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 34)

	if !s.Accessdesc.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "accessdesc")...),
			psql.Arg(s.Accessdesc),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Comments.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "comments")...),
			psql.Arg(s.Comments),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Externalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "externalid")...),
			psql.Arg(s.Externalid),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Gatewaysync.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "gatewaysync")...),
			psql.Arg(s.Gatewaysync),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Habitat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "habitat")...),
			psql.Arg(s.Habitat),
		}})
	}

	if !s.Locationnumber.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "locationnumber")...),
			psql.Arg(s.Locationnumber),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Nextactiondatescheduled.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nextactiondatescheduled")...),
			psql.Arg(s.Nextactiondatescheduled),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Priority.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "priority")...),
			psql.Arg(s.Priority),
		}})
	}

	if !s.Usetype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "usetype")...),
			psql.Arg(s.Usetype),
		}})
	}

	if !s.Vectorsurvsiteid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "vectorsurvsiteid")...),
			psql.Arg(s.Vectorsurvsiteid),
		}})
	}

	if !s.Zone.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone")...),
			psql.Arg(s.Zone),
		}})
	}

	if !s.Zone2.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone2")...),
			psql.Arg(s.Zone2),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.H3R7.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "h3r7")...),
			psql.Arg(s.H3R7),
		}})
	}

	if !s.H3R8.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "h3r8")...),
			psql.Arg(s.H3R8),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if !s.Route.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "route")...),
			psql.Arg(s.Route),
		}})
	}

	if !s.RouteOrder.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "route_order")...),
			psql.Arg(s.RouteOrder),
		}})
	}

	if !s.SetDow.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "set_dow")...),
			psql.Arg(s.SetDow),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryTraplocation retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryTraplocation(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryTraplocation, error) {
	if len(cols) == 0 {
		return HistoryTraplocations.Query(
			sm.Where(HistoryTraplocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryTraplocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryTraplocations.Query(
		sm.Where(HistoryTraplocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryTraplocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryTraplocations.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryTraplocationExists checks the presence of a single record by primary key
func HistoryTraplocationExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryTraplocations.Query(
		sm.Where(HistoryTraplocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryTraplocations.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryTraplocation is retrieved from the database
func (o *HistoryTraplocation) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryTraplocations.AfterSelectHooks.RunHooks(ctx, exec, HistoryTraplocationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryTraplocations.AfterInsertHooks.RunHooks(ctx, exec, HistoryTraplocationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryTraplocations.AfterUpdateHooks.RunHooks(ctx, exec, HistoryTraplocationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryTraplocations.AfterDeleteHooks.RunHooks(ctx, exec, HistoryTraplocationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryTraplocation
func (o *HistoryTraplocation) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryTraplocation) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_traplocation", "objectid"), psql.Quote("history_traplocation", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryTraplocation
func (o *HistoryTraplocation) Update(ctx context.Context, exec bob.Executor, s *HistoryTraplocationSetter) error {
	v, err := HistoryTraplocations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryTraplocation record with an executor
func (o *HistoryTraplocation) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryTraplocations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryTraplocation using the executor
func (o *HistoryTraplocation) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryTraplocations.Query(
		sm.Where(HistoryTraplocations.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryTraplocations.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryTraplocationSlice is retrieved from the database
func (o HistoryTraplocationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryTraplocations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryTraplocations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryTraplocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryTraplocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryTraplocationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_traplocation", "objectid"), psql.Quote("history_traplocation", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryTraplocationSlice) copyMatchingRows(from ...*HistoryTraplocation) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryTraplocationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryTraplocations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryTraplocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryTraplocation:
				o.copyMatchingRows(retrieved...)
			case HistoryTraplocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryTraplocation or a slice of HistoryTraplocation
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryTraplocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryTraplocationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryTraplocations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryTraplocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryTraplocation:
				o.copyMatchingRows(retrieved...)
			case HistoryTraplocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryTraplocation or a slice of HistoryTraplocation
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryTraplocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryTraplocationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryTraplocationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryTraplocations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryTraplocationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryTraplocations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryTraplocationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryTraplocations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyTraplocationWhere[Q psql.Filterable] struct {
	Accessdesc              psql.WhereNullMod[Q, string]
	Active                  psql.WhereNullMod[Q, int16]
	Comments                psql.WhereNullMod[Q, string]
	Creationdate            psql.WhereNullMod[Q, int64]
	Creator                 psql.WhereNullMod[Q, string]
	Description             psql.WhereNullMod[Q, string]
	Externalid              psql.WhereNullMod[Q, string]
	Editdate                psql.WhereNullMod[Q, int64]
	Editor                  psql.WhereNullMod[Q, string]
	Gatewaysync             psql.WhereNullMod[Q, int16]
	Globalid                psql.WhereNullMod[Q, string]
	Habitat                 psql.WhereNullMod[Q, string]
	Locationnumber          psql.WhereNullMod[Q, int64]
	Name                    psql.WhereNullMod[Q, string]
	Nextactiondatescheduled psql.WhereNullMod[Q, int64]
	Objectid                psql.WhereMod[Q, int32]
	Priority                psql.WhereNullMod[Q, string]
	Usetype                 psql.WhereNullMod[Q, string]
	Vectorsurvsiteid        psql.WhereNullMod[Q, string]
	Zone                    psql.WhereNullMod[Q, string]
	Zone2                   psql.WhereNullMod[Q, string]
	Created                 psql.WhereNullMod[Q, time.Time]
	CreatedDate             psql.WhereNullMod[Q, int64]
	CreatedUser             psql.WhereNullMod[Q, string]
	GeometryX               psql.WhereNullMod[Q, float64]
	GeometryY               psql.WhereNullMod[Q, float64]
	H3R7                    psql.WhereNullMod[Q, string]
	H3R8                    psql.WhereNullMod[Q, string]
	LastEditedDate          psql.WhereNullMod[Q, int64]
	LastEditedUser          psql.WhereNullMod[Q, string]
	Route                   psql.WhereNullMod[Q, int64]
	RouteOrder              psql.WhereNullMod[Q, int64]
	SetDow                  psql.WhereNullMod[Q, int64]
	Version                 psql.WhereMod[Q, int32]
}

func (historyTraplocationWhere[Q]) AliasedAs(alias string) historyTraplocationWhere[Q] {
	return buildHistoryTraplocationWhere[Q](buildHistoryTraplocationColumns(alias))
}

func buildHistoryTraplocationWhere[Q psql.Filterable](cols historyTraplocationColumns) historyTraplocationWhere[Q] {
	return historyTraplocationWhere[Q]{
		Accessdesc:              psql.WhereNull[Q, string](cols.Accessdesc),
		Active:                  psql.WhereNull[Q, int16](cols.Active),
		Comments:                psql.WhereNull[Q, string](cols.Comments),
		Creationdate:            psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:                 psql.WhereNull[Q, string](cols.Creator),
		Description:             psql.WhereNull[Q, string](cols.Description),
		Externalid:              psql.WhereNull[Q, string](cols.Externalid),
		Editdate:                psql.WhereNull[Q, int64](cols.Editdate),
		Editor:                  psql.WhereNull[Q, string](cols.Editor),
		Gatewaysync:             psql.WhereNull[Q, int16](cols.Gatewaysync),
		Globalid:                psql.WhereNull[Q, string](cols.Globalid),
		Habitat:                 psql.WhereNull[Q, string](cols.Habitat),
		Locationnumber:          psql.WhereNull[Q, int64](cols.Locationnumber),
		Name:                    psql.WhereNull[Q, string](cols.Name),
		Nextactiondatescheduled: psql.WhereNull[Q, int64](cols.Nextactiondatescheduled),
		Objectid:                psql.Where[Q, int32](cols.Objectid),
		Priority:                psql.WhereNull[Q, string](cols.Priority),
		Usetype:                 psql.WhereNull[Q, string](cols.Usetype),
		Vectorsurvsiteid:        psql.WhereNull[Q, string](cols.Vectorsurvsiteid),
		Zone:                    psql.WhereNull[Q, string](cols.Zone),
		Zone2:                   psql.WhereNull[Q, string](cols.Zone2),
		Created:                 psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:             psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:             psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:               psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:               psql.WhereNull[Q, float64](cols.GeometryY),
		H3R7:                    psql.WhereNull[Q, string](cols.H3R7),
		H3R8:                    psql.WhereNull[Q, string](cols.H3R8),
		LastEditedDate:          psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser:          psql.WhereNull[Q, string](cols.LastEditedUser),
		Route:                   psql.WhereNull[Q, int64](cols.Route),
		RouteOrder:              psql.WhereNull[Q, int64](cols.RouteOrder),
		SetDow:                  psql.WhereNull[Q, int64](cols.SetDow),
		Version:                 psql.Where[Q, int32](cols.Version),
	}
}
