// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSHabitatrelate is an object representing the database table.
type FSHabitatrelate struct {
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	ForeignID      null.Val[string]  `db:"foreign_id" `
	Globalid       null.Val[string]  `db:"globalid" `
	Habitattype    null.Val[string]  `db:"habitattype" `
	Objectid       int32             `db:"objectid,pk" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSHabitatrelateSlice is an alias for a slice of pointers to FSHabitatrelate.
// This should almost always be used instead of []*FSHabitatrelate.
type FSHabitatrelateSlice []*FSHabitatrelate

// FSHabitatrelates contains methods to work with the fs_habitatrelate table
var FSHabitatrelates = psql.NewTablex[*FSHabitatrelate, FSHabitatrelateSlice, *FSHabitatrelateSetter]("", "fs_habitatrelate", buildFSHabitatrelateColumns("fs_habitatrelate"))

// FSHabitatrelatesQuery is a query on the fs_habitatrelate table
type FSHabitatrelatesQuery = *psql.ViewQuery[*FSHabitatrelate, FSHabitatrelateSlice]

func buildFSHabitatrelateColumns(alias string) fsHabitatrelateColumns {
	return fsHabitatrelateColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "foreign_id", "globalid", "habitattype", "objectid", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_habitatrelate"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		ForeignID:      psql.Quote(alias, "foreign_id"),
		Globalid:       psql.Quote(alias, "globalid"),
		Habitattype:    psql.Quote(alias, "habitattype"),
		Objectid:       psql.Quote(alias, "objectid"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsHabitatrelateColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	ForeignID      psql.Expression
	Globalid       psql.Expression
	Habitattype    psql.Expression
	Objectid       psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsHabitatrelateColumns) Alias() string {
	return c.tableAlias
}

func (fsHabitatrelateColumns) AliasedAs(alias string) fsHabitatrelateColumns {
	return buildFSHabitatrelateColumns(alias)
}

// FSHabitatrelateSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSHabitatrelateSetter struct {
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	ForeignID      omitnull.Val[string]  `db:"foreign_id" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Habitattype    omitnull.Val[string]  `db:"habitattype" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSHabitatrelateSetter) SetColumns() []string {
	vals := make([]string, 0, 15)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.ForeignID.IsUnset() {
		vals = append(vals, "foreign_id")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Habitattype.IsUnset() {
		vals = append(vals, "habitattype")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSHabitatrelateSetter) Overwrite(t *FSHabitatrelate) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.ForeignID.IsUnset() {
		t.ForeignID = s.ForeignID.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Habitattype.IsUnset() {
		t.Habitattype = s.Habitattype.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSHabitatrelateSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSHabitatrelates.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 15)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.ForeignID.IsUnset() {
			vals[4] = psql.Arg(s.ForeignID.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Habitattype.IsUnset() {
			vals[6] = psql.Arg(s.Habitattype.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[8] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[9] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[10] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[11] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[12] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[13] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[14] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSHabitatrelateSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSHabitatrelateSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 15)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.ForeignID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "foreign_id")...),
			psql.Arg(s.ForeignID),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Habitattype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "habitattype")...),
			psql.Arg(s.Habitattype),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSHabitatrelate retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSHabitatrelate(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSHabitatrelate, error) {
	if len(cols) == 0 {
		return FSHabitatrelates.Query(
			sm.Where(FSHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSHabitatrelates.Query(
		sm.Where(FSHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSHabitatrelates.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSHabitatrelateExists checks the presence of a single record by primary key
func FSHabitatrelateExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSHabitatrelates.Query(
		sm.Where(FSHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSHabitatrelate is retrieved from the database
func (o *FSHabitatrelate) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSHabitatrelates.AfterSelectHooks.RunHooks(ctx, exec, FSHabitatrelateSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSHabitatrelates.AfterInsertHooks.RunHooks(ctx, exec, FSHabitatrelateSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, FSHabitatrelateSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, FSHabitatrelateSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSHabitatrelate
func (o *FSHabitatrelate) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSHabitatrelate) pkEQ() dialect.Expression {
	return psql.Quote("fs_habitatrelate", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSHabitatrelate
func (o *FSHabitatrelate) Update(ctx context.Context, exec bob.Executor, s *FSHabitatrelateSetter) error {
	v, err := FSHabitatrelates.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSHabitatrelate record with an executor
func (o *FSHabitatrelate) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSHabitatrelates.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSHabitatrelate using the executor
func (o *FSHabitatrelate) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSHabitatrelates.Query(
		sm.Where(FSHabitatrelates.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSHabitatrelateSlice is retrieved from the database
func (o FSHabitatrelateSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSHabitatrelates.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSHabitatrelates.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSHabitatrelateSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_habitatrelate", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSHabitatrelateSlice) copyMatchingRows(from ...*FSHabitatrelate) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSHabitatrelateSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSHabitatrelates.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSHabitatrelate:
				o.copyMatchingRows(retrieved)
			case []*FSHabitatrelate:
				o.copyMatchingRows(retrieved...)
			case FSHabitatrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSHabitatrelate or a slice of FSHabitatrelate
				// then run the AfterUpdateHooks on the slice
				_, err = FSHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSHabitatrelateSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSHabitatrelates.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSHabitatrelate:
				o.copyMatchingRows(retrieved)
			case []*FSHabitatrelate:
				o.copyMatchingRows(retrieved...)
			case FSHabitatrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSHabitatrelate or a slice of FSHabitatrelate
				// then run the AfterDeleteHooks on the slice
				_, err = FSHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSHabitatrelateSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSHabitatrelateSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSHabitatrelates.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSHabitatrelateSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSHabitatrelates.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSHabitatrelateSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSHabitatrelates.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsHabitatrelateWhere[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	ForeignID      psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Habitattype    psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsHabitatrelateWhere[Q]) AliasedAs(alias string) fsHabitatrelateWhere[Q] {
	return buildFSHabitatrelateWhere[Q](buildFSHabitatrelateColumns(alias))
}

func buildFSHabitatrelateWhere[Q psql.Filterable](cols fsHabitatrelateColumns) fsHabitatrelateWhere[Q] {
	return fsHabitatrelateWhere[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		ForeignID:      psql.WhereNull[Q, string](cols.ForeignID),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Habitattype:    psql.WhereNull[Q, string](cols.Habitattype),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
