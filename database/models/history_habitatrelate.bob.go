// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryHabitatrelate is an object representing the database table.
type HistoryHabitatrelate struct {
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	ForeignID      null.Val[string]    `db:"foreign_id" `
	Globalid       null.Val[string]    `db:"globalid" `
	Habitattype    null.Val[string]    `db:"habitattype" `
	Objectid       int32               `db:"objectid,pk" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	Version        int32               `db:"version,pk" `
}

// HistoryHabitatrelateSlice is an alias for a slice of pointers to HistoryHabitatrelate.
// This should almost always be used instead of []*HistoryHabitatrelate.
type HistoryHabitatrelateSlice []*HistoryHabitatrelate

// HistoryHabitatrelates contains methods to work with the history_habitatrelate table
var HistoryHabitatrelates = psql.NewTablex[*HistoryHabitatrelate, HistoryHabitatrelateSlice, *HistoryHabitatrelateSetter]("", "history_habitatrelate", buildHistoryHabitatrelateColumns("history_habitatrelate"))

// HistoryHabitatrelatesQuery is a query on the history_habitatrelate table
type HistoryHabitatrelatesQuery = *psql.ViewQuery[*HistoryHabitatrelate, HistoryHabitatrelateSlice]

func buildHistoryHabitatrelateColumns(alias string) historyHabitatrelateColumns {
	return historyHabitatrelateColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "foreign_id", "globalid", "habitattype", "objectid", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_habitatrelate"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		ForeignID:      psql.Quote(alias, "foreign_id"),
		Globalid:       psql.Quote(alias, "globalid"),
		Habitattype:    psql.Quote(alias, "habitattype"),
		Objectid:       psql.Quote(alias, "objectid"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historyHabitatrelateColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	ForeignID      psql.Expression
	Globalid       psql.Expression
	Habitattype    psql.Expression
	Objectid       psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Version        psql.Expression
}

func (c historyHabitatrelateColumns) Alias() string {
	return c.tableAlias
}

func (historyHabitatrelateColumns) AliasedAs(alias string) historyHabitatrelateColumns {
	return buildHistoryHabitatrelateColumns(alias)
}

// HistoryHabitatrelateSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryHabitatrelateSetter struct {
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	ForeignID      omitnull.Val[string]    `db:"foreign_id" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	Habitattype    omitnull.Val[string]    `db:"habitattype" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryHabitatrelateSetter) SetColumns() []string {
	vals := make([]string, 0, 16)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.ForeignID.IsUnset() {
		vals = append(vals, "foreign_id")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Habitattype.IsUnset() {
		vals = append(vals, "habitattype")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryHabitatrelateSetter) Overwrite(t *HistoryHabitatrelate) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.ForeignID.IsUnset() {
		t.ForeignID = s.ForeignID.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Habitattype.IsUnset() {
		t.Habitattype = s.Habitattype.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryHabitatrelateSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryHabitatrelates.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 16)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.ForeignID.IsUnset() {
			vals[4] = psql.Arg(s.ForeignID.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Habitattype.IsUnset() {
			vals[6] = psql.Arg(s.Habitattype.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[8] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[9] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[10] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[11] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[12] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[13] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[14] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[15] = psql.Arg(s.Version.MustGet())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryHabitatrelateSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryHabitatrelateSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 16)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.ForeignID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "foreign_id")...),
			psql.Arg(s.ForeignID),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Habitattype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "habitattype")...),
			psql.Arg(s.Habitattype),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryHabitatrelate retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryHabitatrelate(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryHabitatrelate, error) {
	if len(cols) == 0 {
		return HistoryHabitatrelates.Query(
			sm.Where(HistoryHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryHabitatrelates.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryHabitatrelates.Query(
		sm.Where(HistoryHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryHabitatrelates.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryHabitatrelates.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryHabitatrelateExists checks the presence of a single record by primary key
func HistoryHabitatrelateExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryHabitatrelates.Query(
		sm.Where(HistoryHabitatrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryHabitatrelates.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryHabitatrelate is retrieved from the database
func (o *HistoryHabitatrelate) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryHabitatrelates.AfterSelectHooks.RunHooks(ctx, exec, HistoryHabitatrelateSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryHabitatrelates.AfterInsertHooks.RunHooks(ctx, exec, HistoryHabitatrelateSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, HistoryHabitatrelateSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, HistoryHabitatrelateSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryHabitatrelate
func (o *HistoryHabitatrelate) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryHabitatrelate) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_habitatrelate", "objectid"), psql.Quote("history_habitatrelate", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryHabitatrelate
func (o *HistoryHabitatrelate) Update(ctx context.Context, exec bob.Executor, s *HistoryHabitatrelateSetter) error {
	v, err := HistoryHabitatrelates.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryHabitatrelate record with an executor
func (o *HistoryHabitatrelate) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryHabitatrelates.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryHabitatrelate using the executor
func (o *HistoryHabitatrelate) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryHabitatrelates.Query(
		sm.Where(HistoryHabitatrelates.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryHabitatrelates.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryHabitatrelateSlice is retrieved from the database
func (o HistoryHabitatrelateSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryHabitatrelates.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryHabitatrelates.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryHabitatrelateSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_habitatrelate", "objectid"), psql.Quote("history_habitatrelate", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryHabitatrelateSlice) copyMatchingRows(from ...*HistoryHabitatrelate) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryHabitatrelateSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryHabitatrelates.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryHabitatrelate:
				o.copyMatchingRows(retrieved)
			case []*HistoryHabitatrelate:
				o.copyMatchingRows(retrieved...)
			case HistoryHabitatrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryHabitatrelate or a slice of HistoryHabitatrelate
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryHabitatrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryHabitatrelateSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryHabitatrelates.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryHabitatrelate:
				o.copyMatchingRows(retrieved)
			case []*HistoryHabitatrelate:
				o.copyMatchingRows(retrieved...)
			case HistoryHabitatrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryHabitatrelate or a slice of HistoryHabitatrelate
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryHabitatrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryHabitatrelateSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryHabitatrelateSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryHabitatrelates.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryHabitatrelateSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryHabitatrelates.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryHabitatrelateSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryHabitatrelates.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyHabitatrelateWhere[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	ForeignID      psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Habitattype    psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Version        psql.WhereMod[Q, int32]
}

func (historyHabitatrelateWhere[Q]) AliasedAs(alias string) historyHabitatrelateWhere[Q] {
	return buildHistoryHabitatrelateWhere[Q](buildHistoryHabitatrelateColumns(alias))
}

func buildHistoryHabitatrelateWhere[Q psql.Filterable](cols historyHabitatrelateColumns) historyHabitatrelateWhere[Q] {
	return historyHabitatrelateWhere[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		ForeignID:      psql.WhereNull[Q, string](cols.ForeignID),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Habitattype:    psql.WhereNull[Q, string](cols.Habitattype),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
