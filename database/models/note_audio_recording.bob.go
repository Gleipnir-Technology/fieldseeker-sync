// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// NoteAudioRecording is an object representing the database table.
type NoteAudioRecording struct {
	Created    null.Val[time.Time] `db:"created" `
	Deleted    null.Val[time.Time] `db:"deleted" `
	Duration   string              `db:"duration" `
	NoteUUID   null.Val[string]    `db:"note_uuid" `
	Transcript null.Val[string]    `db:"transcript" `
	UUID       string              `db:"uuid,pk" `

	R noteAudioRecordingR `db:"-" `
}

// NoteAudioRecordingSlice is an alias for a slice of pointers to NoteAudioRecording.
// This should almost always be used instead of []*NoteAudioRecording.
type NoteAudioRecordingSlice []*NoteAudioRecording

// NoteAudioRecordings contains methods to work with the note_audio_recording table
var NoteAudioRecordings = psql.NewTablex[*NoteAudioRecording, NoteAudioRecordingSlice, *NoteAudioRecordingSetter]("", "note_audio_recording", buildNoteAudioRecordingColumns("note_audio_recording"))

// NoteAudioRecordingsQuery is a query on the note_audio_recording table
type NoteAudioRecordingsQuery = *psql.ViewQuery[*NoteAudioRecording, NoteAudioRecordingSlice]

// noteAudioRecordingR is where relationships are stored.
type noteAudioRecordingR struct {
	Note *Note // note_audio_recording.note_audio_recording_note_uuid_fkey
}

func buildNoteAudioRecordingColumns(alias string) noteAudioRecordingColumns {
	return noteAudioRecordingColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"created", "deleted", "duration", "note_uuid", "transcript", "uuid",
		).WithParent("note_audio_recording"),
		tableAlias: alias,
		Created:    psql.Quote(alias, "created"),
		Deleted:    psql.Quote(alias, "deleted"),
		Duration:   psql.Quote(alias, "duration"),
		NoteUUID:   psql.Quote(alias, "note_uuid"),
		Transcript: psql.Quote(alias, "transcript"),
		UUID:       psql.Quote(alias, "uuid"),
	}
}

type noteAudioRecordingColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Created    psql.Expression
	Deleted    psql.Expression
	Duration   psql.Expression
	NoteUUID   psql.Expression
	Transcript psql.Expression
	UUID       psql.Expression
}

func (c noteAudioRecordingColumns) Alias() string {
	return c.tableAlias
}

func (noteAudioRecordingColumns) AliasedAs(alias string) noteAudioRecordingColumns {
	return buildNoteAudioRecordingColumns(alias)
}

// NoteAudioRecordingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type NoteAudioRecordingSetter struct {
	Created    omitnull.Val[time.Time] `db:"created" `
	Deleted    omitnull.Val[time.Time] `db:"deleted" `
	Duration   omit.Val[string]        `db:"duration" `
	NoteUUID   omitnull.Val[string]    `db:"note_uuid" `
	Transcript omitnull.Val[string]    `db:"transcript" `
	UUID       omit.Val[string]        `db:"uuid,pk" `
}

func (s NoteAudioRecordingSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.Deleted.IsUnset() {
		vals = append(vals, "deleted")
	}
	if s.Duration.IsValue() {
		vals = append(vals, "duration")
	}
	if !s.NoteUUID.IsUnset() {
		vals = append(vals, "note_uuid")
	}
	if !s.Transcript.IsUnset() {
		vals = append(vals, "transcript")
	}
	if s.UUID.IsValue() {
		vals = append(vals, "uuid")
	}
	return vals
}

func (s NoteAudioRecordingSetter) Overwrite(t *NoteAudioRecording) {
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.Deleted.IsUnset() {
		t.Deleted = s.Deleted.MustGetNull()
	}
	if s.Duration.IsValue() {
		t.Duration = s.Duration.MustGet()
	}
	if !s.NoteUUID.IsUnset() {
		t.NoteUUID = s.NoteUUID.MustGetNull()
	}
	if !s.Transcript.IsUnset() {
		t.Transcript = s.Transcript.MustGetNull()
	}
	if s.UUID.IsValue() {
		t.UUID = s.UUID.MustGet()
	}
}

func (s *NoteAudioRecordingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return NoteAudioRecordings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if !s.Created.IsUnset() {
			vals[0] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Deleted.IsUnset() {
			vals[1] = psql.Arg(s.Deleted.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Duration.IsValue() {
			vals[2] = psql.Arg(s.Duration.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.NoteUUID.IsUnset() {
			vals[3] = psql.Arg(s.NoteUUID.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Transcript.IsUnset() {
			vals[4] = psql.Arg(s.Transcript.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UUID.IsValue() {
			vals[5] = psql.Arg(s.UUID.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s NoteAudioRecordingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s NoteAudioRecordingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.Deleted.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deleted")...),
			psql.Arg(s.Deleted),
		}})
	}

	if s.Duration.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "duration")...),
			psql.Arg(s.Duration),
		}})
	}

	if !s.NoteUUID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "note_uuid")...),
			psql.Arg(s.NoteUUID),
		}})
	}

	if !s.Transcript.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "transcript")...),
			psql.Arg(s.Transcript),
		}})
	}

	if s.UUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "uuid")...),
			psql.Arg(s.UUID),
		}})
	}

	return exprs
}

// FindNoteAudioRecording retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindNoteAudioRecording(ctx context.Context, exec bob.Executor, UUIDPK string, cols ...string) (*NoteAudioRecording, error) {
	if len(cols) == 0 {
		return NoteAudioRecordings.Query(
			sm.Where(NoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		).One(ctx, exec)
	}

	return NoteAudioRecordings.Query(
		sm.Where(NoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Columns(NoteAudioRecordings.Columns.Only(cols...)),
	).One(ctx, exec)
}

// NoteAudioRecordingExists checks the presence of a single record by primary key
func NoteAudioRecordingExists(ctx context.Context, exec bob.Executor, UUIDPK string) (bool, error) {
	return NoteAudioRecordings.Query(
		sm.Where(NoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after NoteAudioRecording is retrieved from the database
func (o *NoteAudioRecording) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = NoteAudioRecordings.AfterSelectHooks.RunHooks(ctx, exec, NoteAudioRecordingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = NoteAudioRecordings.AfterInsertHooks.RunHooks(ctx, exec, NoteAudioRecordingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = NoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, NoteAudioRecordingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = NoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, NoteAudioRecordingSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the NoteAudioRecording
func (o *NoteAudioRecording) primaryKeyVals() bob.Expression {
	return psql.Arg(o.UUID)
}

func (o *NoteAudioRecording) pkEQ() dialect.Expression {
	return psql.Quote("note_audio_recording", "uuid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the NoteAudioRecording
func (o *NoteAudioRecording) Update(ctx context.Context, exec bob.Executor, s *NoteAudioRecordingSetter) error {
	v, err := NoteAudioRecordings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single NoteAudioRecording record with an executor
func (o *NoteAudioRecording) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := NoteAudioRecordings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the NoteAudioRecording using the executor
func (o *NoteAudioRecording) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := NoteAudioRecordings.Query(
		sm.Where(NoteAudioRecordings.Columns.UUID.EQ(psql.Arg(o.UUID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after NoteAudioRecordingSlice is retrieved from the database
func (o NoteAudioRecordingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = NoteAudioRecordings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = NoteAudioRecordings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = NoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = NoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o NoteAudioRecordingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("note_audio_recording", "uuid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o NoteAudioRecordingSlice) copyMatchingRows(from ...*NoteAudioRecording) {
	for i, old := range o {
		for _, new := range from {
			if new.UUID != old.UUID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o NoteAudioRecordingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return NoteAudioRecordings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *NoteAudioRecording:
				o.copyMatchingRows(retrieved)
			case []*NoteAudioRecording:
				o.copyMatchingRows(retrieved...)
			case NoteAudioRecordingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a NoteAudioRecording or a slice of NoteAudioRecording
				// then run the AfterUpdateHooks on the slice
				_, err = NoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o NoteAudioRecordingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return NoteAudioRecordings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *NoteAudioRecording:
				o.copyMatchingRows(retrieved)
			case []*NoteAudioRecording:
				o.copyMatchingRows(retrieved...)
			case NoteAudioRecordingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a NoteAudioRecording or a slice of NoteAudioRecording
				// then run the AfterDeleteHooks on the slice
				_, err = NoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o NoteAudioRecordingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals NoteAudioRecordingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := NoteAudioRecordings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o NoteAudioRecordingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := NoteAudioRecordings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o NoteAudioRecordingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := NoteAudioRecordings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Note starts a query for related objects on note
func (o *NoteAudioRecording) Note(mods ...bob.Mod[*dialect.SelectQuery]) NotesQuery {
	return Notes.Query(append(mods,
		sm.Where(Notes.Columns.UUID.EQ(psql.Arg(o.NoteUUID))),
	)...)
}

func (os NoteAudioRecordingSlice) Note(mods ...bob.Mod[*dialect.SelectQuery]) NotesQuery {
	pkNoteUUID := make(pgtypes.Array[null.Val[string]], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkNoteUUID = append(pkNoteUUID, o.NoteUUID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkNoteUUID), "text[]")),
	))

	return Notes.Query(append(mods,
		sm.Where(psql.Group(Notes.Columns.UUID).OP("IN", PKArgExpr)),
	)...)
}

func attachNoteAudioRecordingNote0(ctx context.Context, exec bob.Executor, count int, noteAudioRecording0 *NoteAudioRecording, note1 *Note) (*NoteAudioRecording, error) {
	setter := &NoteAudioRecordingSetter{
		NoteUUID: omitnull.From(note1.UUID),
	}

	err := noteAudioRecording0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachNoteAudioRecordingNote0: %w", err)
	}

	return noteAudioRecording0, nil
}

func (noteAudioRecording0 *NoteAudioRecording) InsertNote(ctx context.Context, exec bob.Executor, related *NoteSetter) error {
	var err error

	note1, err := Notes.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachNoteAudioRecordingNote0(ctx, exec, 1, noteAudioRecording0, note1)
	if err != nil {
		return err
	}

	noteAudioRecording0.R.Note = note1

	note1.R.NoteAudioRecordings = append(note1.R.NoteAudioRecordings, noteAudioRecording0)

	return nil
}

func (noteAudioRecording0 *NoteAudioRecording) AttachNote(ctx context.Context, exec bob.Executor, note1 *Note) error {
	var err error

	_, err = attachNoteAudioRecordingNote0(ctx, exec, 1, noteAudioRecording0, note1)
	if err != nil {
		return err
	}

	noteAudioRecording0.R.Note = note1

	note1.R.NoteAudioRecordings = append(note1.R.NoteAudioRecordings, noteAudioRecording0)

	return nil
}

type noteAudioRecordingWhere[Q psql.Filterable] struct {
	Created    psql.WhereNullMod[Q, time.Time]
	Deleted    psql.WhereNullMod[Q, time.Time]
	Duration   psql.WhereMod[Q, string]
	NoteUUID   psql.WhereNullMod[Q, string]
	Transcript psql.WhereNullMod[Q, string]
	UUID       psql.WhereMod[Q, string]
}

func (noteAudioRecordingWhere[Q]) AliasedAs(alias string) noteAudioRecordingWhere[Q] {
	return buildNoteAudioRecordingWhere[Q](buildNoteAudioRecordingColumns(alias))
}

func buildNoteAudioRecordingWhere[Q psql.Filterable](cols noteAudioRecordingColumns) noteAudioRecordingWhere[Q] {
	return noteAudioRecordingWhere[Q]{
		Created:    psql.WhereNull[Q, time.Time](cols.Created),
		Deleted:    psql.WhereNull[Q, time.Time](cols.Deleted),
		Duration:   psql.Where[Q, string](cols.Duration),
		NoteUUID:   psql.WhereNull[Q, string](cols.NoteUUID),
		Transcript: psql.WhereNull[Q, string](cols.Transcript),
		UUID:       psql.Where[Q, string](cols.UUID),
	}
}

func (o *NoteAudioRecording) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Note":
		rel, ok := retrieved.(*Note)
		if !ok {
			return fmt.Errorf("noteAudioRecording cannot load %T as %q", retrieved, name)
		}

		o.R.Note = rel

		if rel != nil {
			rel.R.NoteAudioRecordings = NoteAudioRecordingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("noteAudioRecording has no relationship %q", name)
	}
}

type noteAudioRecordingPreloader struct {
	Note func(...psql.PreloadOption) psql.Preloader
}

func buildNoteAudioRecordingPreloader() noteAudioRecordingPreloader {
	return noteAudioRecordingPreloader{
		Note: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Note, NoteSlice](psql.PreloadRel{
				Name: "Note",
				Sides: []psql.PreloadSide{
					{
						From:        NoteAudioRecordings,
						To:          Notes,
						FromColumns: []string{"note_uuid"},
						ToColumns:   []string{"uuid"},
					},
				},
			}, Notes.Columns.Names(), opts...)
		},
	}
}

type noteAudioRecordingThenLoader[Q orm.Loadable] struct {
	Note func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildNoteAudioRecordingThenLoader[Q orm.Loadable]() noteAudioRecordingThenLoader[Q] {
	type NoteLoadInterface interface {
		LoadNote(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return noteAudioRecordingThenLoader[Q]{
		Note: thenLoadBuilder[Q](
			"Note",
			func(ctx context.Context, exec bob.Executor, retrieved NoteLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadNote(ctx, exec, mods...)
			},
		),
	}
}

// LoadNote loads the noteAudioRecording's Note into the .R struct
func (o *NoteAudioRecording) LoadNote(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Note = nil

	related, err := o.Note(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.NoteAudioRecordings = NoteAudioRecordingSlice{o}

	o.R.Note = related
	return nil
}

// LoadNote loads the noteAudioRecording's Note into the .R struct
func (os NoteAudioRecordingSlice) LoadNote(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	notes, err := os.Note(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range notes {
			if !o.NoteUUID.IsValue() {
				continue
			}

			if !(o.NoteUUID.IsValue() && o.NoteUUID.MustGet() == rel.UUID) {
				continue
			}

			rel.R.NoteAudioRecordings = append(rel.R.NoteAudioRecordings, o)

			o.R.Note = rel
			break
		}
	}

	return nil
}

type noteAudioRecordingJoins[Q dialect.Joinable] struct {
	typ  string
	Note modAs[Q, noteColumns]
}

func (j noteAudioRecordingJoins[Q]) aliasedAs(alias string) noteAudioRecordingJoins[Q] {
	return buildNoteAudioRecordingJoins[Q](buildNoteAudioRecordingColumns(alias), j.typ)
}

func buildNoteAudioRecordingJoins[Q dialect.Joinable](cols noteAudioRecordingColumns, typ string) noteAudioRecordingJoins[Q] {
	return noteAudioRecordingJoins[Q]{
		typ: typ,
		Note: modAs[Q, noteColumns]{
			c: Notes.Columns,
			f: func(to noteColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Notes.Name().As(to.Alias())).On(
						to.UUID.EQ(cols.NoteUUID),
					))
				}

				return mods
			},
		},
	}
}
