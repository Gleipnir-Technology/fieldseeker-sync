// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// HistoryNoteAudioRecording is an object representing the database table.
type HistoryNoteAudioRecording struct {
	Created    null.Val[time.Time] `db:"created" `
	Duration   string              `db:"duration" `
	NoteUUID   null.Val[string]    `db:"note_uuid" `
	Transcript null.Val[string]    `db:"transcript" `
	UUID       string              `db:"uuid,pk" `
	Version    int32               `db:"version,pk" `

	R historyNoteAudioRecordingR `db:"-" `
}

// HistoryNoteAudioRecordingSlice is an alias for a slice of pointers to HistoryNoteAudioRecording.
// This should almost always be used instead of []*HistoryNoteAudioRecording.
type HistoryNoteAudioRecordingSlice []*HistoryNoteAudioRecording

// HistoryNoteAudioRecordings contains methods to work with the history_note_audio_recording table
var HistoryNoteAudioRecordings = psql.NewTablex[*HistoryNoteAudioRecording, HistoryNoteAudioRecordingSlice, *HistoryNoteAudioRecordingSetter]("", "history_note_audio_recording", buildHistoryNoteAudioRecordingColumns("history_note_audio_recording"))

// HistoryNoteAudioRecordingsQuery is a query on the history_note_audio_recording table
type HistoryNoteAudioRecordingsQuery = *psql.ViewQuery[*HistoryNoteAudioRecording, HistoryNoteAudioRecordingSlice]

// historyNoteAudioRecordingR is where relationships are stored.
type historyNoteAudioRecordingR struct {
	Note *Note // history_note_audio_recording.history_note_audio_recording_note_uuid_fkey
}

func buildHistoryNoteAudioRecordingColumns(alias string) historyNoteAudioRecordingColumns {
	return historyNoteAudioRecordingColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"created", "duration", "note_uuid", "transcript", "uuid", "version",
		).WithParent("history_note_audio_recording"),
		tableAlias: alias,
		Created:    psql.Quote(alias, "created"),
		Duration:   psql.Quote(alias, "duration"),
		NoteUUID:   psql.Quote(alias, "note_uuid"),
		Transcript: psql.Quote(alias, "transcript"),
		UUID:       psql.Quote(alias, "uuid"),
		Version:    psql.Quote(alias, "version"),
	}
}

type historyNoteAudioRecordingColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Created    psql.Expression
	Duration   psql.Expression
	NoteUUID   psql.Expression
	Transcript psql.Expression
	UUID       psql.Expression
	Version    psql.Expression
}

func (c historyNoteAudioRecordingColumns) Alias() string {
	return c.tableAlias
}

func (historyNoteAudioRecordingColumns) AliasedAs(alias string) historyNoteAudioRecordingColumns {
	return buildHistoryNoteAudioRecordingColumns(alias)
}

// HistoryNoteAudioRecordingSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryNoteAudioRecordingSetter struct {
	Created    omitnull.Val[time.Time] `db:"created" `
	Duration   omit.Val[string]        `db:"duration" `
	NoteUUID   omitnull.Val[string]    `db:"note_uuid" `
	Transcript omitnull.Val[string]    `db:"transcript" `
	UUID       omit.Val[string]        `db:"uuid,pk" `
	Version    omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryNoteAudioRecordingSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if s.Duration.IsValue() {
		vals = append(vals, "duration")
	}
	if !s.NoteUUID.IsUnset() {
		vals = append(vals, "note_uuid")
	}
	if !s.Transcript.IsUnset() {
		vals = append(vals, "transcript")
	}
	if s.UUID.IsValue() {
		vals = append(vals, "uuid")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryNoteAudioRecordingSetter) Overwrite(t *HistoryNoteAudioRecording) {
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if s.Duration.IsValue() {
		t.Duration = s.Duration.MustGet()
	}
	if !s.NoteUUID.IsUnset() {
		t.NoteUUID = s.NoteUUID.MustGetNull()
	}
	if !s.Transcript.IsUnset() {
		t.Transcript = s.Transcript.MustGetNull()
	}
	if s.UUID.IsValue() {
		t.UUID = s.UUID.MustGet()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryNoteAudioRecordingSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryNoteAudioRecordings.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if !s.Created.IsUnset() {
			vals[0] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Duration.IsValue() {
			vals[1] = psql.Arg(s.Duration.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.NoteUUID.IsUnset() {
			vals[2] = psql.Arg(s.NoteUUID.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Transcript.IsUnset() {
			vals[3] = psql.Arg(s.Transcript.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.UUID.IsValue() {
			vals[4] = psql.Arg(s.UUID.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[5] = psql.Arg(s.Version.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryNoteAudioRecordingSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryNoteAudioRecordingSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if s.Duration.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "duration")...),
			psql.Arg(s.Duration),
		}})
	}

	if !s.NoteUUID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "note_uuid")...),
			psql.Arg(s.NoteUUID),
		}})
	}

	if !s.Transcript.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "transcript")...),
			psql.Arg(s.Transcript),
		}})
	}

	if s.UUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "uuid")...),
			psql.Arg(s.UUID),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryNoteAudioRecording retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryNoteAudioRecording(ctx context.Context, exec bob.Executor, UUIDPK string, VersionPK int32, cols ...string) (*HistoryNoteAudioRecording, error) {
	if len(cols) == 0 {
		return HistoryNoteAudioRecordings.Query(
			sm.Where(HistoryNoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
			sm.Where(HistoryNoteAudioRecordings.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryNoteAudioRecordings.Query(
		sm.Where(HistoryNoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Where(HistoryNoteAudioRecordings.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryNoteAudioRecordings.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryNoteAudioRecordingExists checks the presence of a single record by primary key
func HistoryNoteAudioRecordingExists(ctx context.Context, exec bob.Executor, UUIDPK string, VersionPK int32) (bool, error) {
	return HistoryNoteAudioRecordings.Query(
		sm.Where(HistoryNoteAudioRecordings.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Where(HistoryNoteAudioRecordings.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryNoteAudioRecording is retrieved from the database
func (o *HistoryNoteAudioRecording) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryNoteAudioRecordings.AfterSelectHooks.RunHooks(ctx, exec, HistoryNoteAudioRecordingSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryNoteAudioRecordings.AfterInsertHooks.RunHooks(ctx, exec, HistoryNoteAudioRecordingSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryNoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, HistoryNoteAudioRecordingSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryNoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, HistoryNoteAudioRecordingSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryNoteAudioRecording
func (o *HistoryNoteAudioRecording) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.UUID,
		o.Version,
	)
}

func (o *HistoryNoteAudioRecording) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_note_audio_recording", "uuid"), psql.Quote("history_note_audio_recording", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryNoteAudioRecording
func (o *HistoryNoteAudioRecording) Update(ctx context.Context, exec bob.Executor, s *HistoryNoteAudioRecordingSetter) error {
	v, err := HistoryNoteAudioRecordings.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single HistoryNoteAudioRecording record with an executor
func (o *HistoryNoteAudioRecording) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryNoteAudioRecordings.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryNoteAudioRecording using the executor
func (o *HistoryNoteAudioRecording) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryNoteAudioRecordings.Query(
		sm.Where(HistoryNoteAudioRecordings.Columns.UUID.EQ(psql.Arg(o.UUID))),
		sm.Where(HistoryNoteAudioRecordings.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryNoteAudioRecordingSlice is retrieved from the database
func (o HistoryNoteAudioRecordingSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryNoteAudioRecordings.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryNoteAudioRecordings.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryNoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryNoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryNoteAudioRecordingSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_note_audio_recording", "uuid"), psql.Quote("history_note_audio_recording", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryNoteAudioRecordingSlice) copyMatchingRows(from ...*HistoryNoteAudioRecording) {
	for i, old := range o {
		for _, new := range from {
			if new.UUID != old.UUID {
				continue
			}
			if new.Version != old.Version {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryNoteAudioRecordingSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryNoteAudioRecordings.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryNoteAudioRecording:
				o.copyMatchingRows(retrieved)
			case []*HistoryNoteAudioRecording:
				o.copyMatchingRows(retrieved...)
			case HistoryNoteAudioRecordingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryNoteAudioRecording or a slice of HistoryNoteAudioRecording
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryNoteAudioRecordings.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryNoteAudioRecordingSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryNoteAudioRecordings.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryNoteAudioRecording:
				o.copyMatchingRows(retrieved)
			case []*HistoryNoteAudioRecording:
				o.copyMatchingRows(retrieved...)
			case HistoryNoteAudioRecordingSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryNoteAudioRecording or a slice of HistoryNoteAudioRecording
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryNoteAudioRecordings.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryNoteAudioRecordingSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryNoteAudioRecordingSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryNoteAudioRecordings.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryNoteAudioRecordingSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryNoteAudioRecordings.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryNoteAudioRecordingSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryNoteAudioRecordings.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Note starts a query for related objects on note
func (o *HistoryNoteAudioRecording) Note(mods ...bob.Mod[*dialect.SelectQuery]) NotesQuery {
	return Notes.Query(append(mods,
		sm.Where(Notes.Columns.UUID.EQ(psql.Arg(o.NoteUUID))),
	)...)
}

func (os HistoryNoteAudioRecordingSlice) Note(mods ...bob.Mod[*dialect.SelectQuery]) NotesQuery {
	pkNoteUUID := make(pgtypes.Array[null.Val[string]], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkNoteUUID = append(pkNoteUUID, o.NoteUUID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkNoteUUID), "text[]")),
	))

	return Notes.Query(append(mods,
		sm.Where(psql.Group(Notes.Columns.UUID).OP("IN", PKArgExpr)),
	)...)
}

func attachHistoryNoteAudioRecordingNote0(ctx context.Context, exec bob.Executor, count int, historyNoteAudioRecording0 *HistoryNoteAudioRecording, note1 *Note) (*HistoryNoteAudioRecording, error) {
	setter := &HistoryNoteAudioRecordingSetter{
		NoteUUID: omitnull.From(note1.UUID),
	}

	err := historyNoteAudioRecording0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachHistoryNoteAudioRecordingNote0: %w", err)
	}

	return historyNoteAudioRecording0, nil
}

func (historyNoteAudioRecording0 *HistoryNoteAudioRecording) InsertNote(ctx context.Context, exec bob.Executor, related *NoteSetter) error {
	var err error

	note1, err := Notes.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachHistoryNoteAudioRecordingNote0(ctx, exec, 1, historyNoteAudioRecording0, note1)
	if err != nil {
		return err
	}

	historyNoteAudioRecording0.R.Note = note1

	note1.R.HistoryNoteAudioRecordings = append(note1.R.HistoryNoteAudioRecordings, historyNoteAudioRecording0)

	return nil
}

func (historyNoteAudioRecording0 *HistoryNoteAudioRecording) AttachNote(ctx context.Context, exec bob.Executor, note1 *Note) error {
	var err error

	_, err = attachHistoryNoteAudioRecordingNote0(ctx, exec, 1, historyNoteAudioRecording0, note1)
	if err != nil {
		return err
	}

	historyNoteAudioRecording0.R.Note = note1

	note1.R.HistoryNoteAudioRecordings = append(note1.R.HistoryNoteAudioRecordings, historyNoteAudioRecording0)

	return nil
}

type historyNoteAudioRecordingWhere[Q psql.Filterable] struct {
	Created    psql.WhereNullMod[Q, time.Time]
	Duration   psql.WhereMod[Q, string]
	NoteUUID   psql.WhereNullMod[Q, string]
	Transcript psql.WhereNullMod[Q, string]
	UUID       psql.WhereMod[Q, string]
	Version    psql.WhereMod[Q, int32]
}

func (historyNoteAudioRecordingWhere[Q]) AliasedAs(alias string) historyNoteAudioRecordingWhere[Q] {
	return buildHistoryNoteAudioRecordingWhere[Q](buildHistoryNoteAudioRecordingColumns(alias))
}

func buildHistoryNoteAudioRecordingWhere[Q psql.Filterable](cols historyNoteAudioRecordingColumns) historyNoteAudioRecordingWhere[Q] {
	return historyNoteAudioRecordingWhere[Q]{
		Created:    psql.WhereNull[Q, time.Time](cols.Created),
		Duration:   psql.Where[Q, string](cols.Duration),
		NoteUUID:   psql.WhereNull[Q, string](cols.NoteUUID),
		Transcript: psql.WhereNull[Q, string](cols.Transcript),
		UUID:       psql.Where[Q, string](cols.UUID),
		Version:    psql.Where[Q, int32](cols.Version),
	}
}

func (o *HistoryNoteAudioRecording) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Note":
		rel, ok := retrieved.(*Note)
		if !ok {
			return fmt.Errorf("historyNoteAudioRecording cannot load %T as %q", retrieved, name)
		}

		o.R.Note = rel

		if rel != nil {
			rel.R.HistoryNoteAudioRecordings = HistoryNoteAudioRecordingSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("historyNoteAudioRecording has no relationship %q", name)
	}
}

type historyNoteAudioRecordingPreloader struct {
	Note func(...psql.PreloadOption) psql.Preloader
}

func buildHistoryNoteAudioRecordingPreloader() historyNoteAudioRecordingPreloader {
	return historyNoteAudioRecordingPreloader{
		Note: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Note, NoteSlice](psql.PreloadRel{
				Name: "Note",
				Sides: []psql.PreloadSide{
					{
						From:        HistoryNoteAudioRecordings,
						To:          Notes,
						FromColumns: []string{"note_uuid"},
						ToColumns:   []string{"uuid"},
					},
				},
			}, Notes.Columns.Names(), opts...)
		},
	}
}

type historyNoteAudioRecordingThenLoader[Q orm.Loadable] struct {
	Note func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildHistoryNoteAudioRecordingThenLoader[Q orm.Loadable]() historyNoteAudioRecordingThenLoader[Q] {
	type NoteLoadInterface interface {
		LoadNote(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return historyNoteAudioRecordingThenLoader[Q]{
		Note: thenLoadBuilder[Q](
			"Note",
			func(ctx context.Context, exec bob.Executor, retrieved NoteLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadNote(ctx, exec, mods...)
			},
		),
	}
}

// LoadNote loads the historyNoteAudioRecording's Note into the .R struct
func (o *HistoryNoteAudioRecording) LoadNote(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Note = nil

	related, err := o.Note(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.HistoryNoteAudioRecordings = HistoryNoteAudioRecordingSlice{o}

	o.R.Note = related
	return nil
}

// LoadNote loads the historyNoteAudioRecording's Note into the .R struct
func (os HistoryNoteAudioRecordingSlice) LoadNote(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	notes, err := os.Note(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range notes {
			if !o.NoteUUID.IsValue() {
				continue
			}

			if !(o.NoteUUID.IsValue() && o.NoteUUID.MustGet() == rel.UUID) {
				continue
			}

			rel.R.HistoryNoteAudioRecordings = append(rel.R.HistoryNoteAudioRecordings, o)

			o.R.Note = rel
			break
		}
	}

	return nil
}

type historyNoteAudioRecordingJoins[Q dialect.Joinable] struct {
	typ  string
	Note modAs[Q, noteColumns]
}

func (j historyNoteAudioRecordingJoins[Q]) aliasedAs(alias string) historyNoteAudioRecordingJoins[Q] {
	return buildHistoryNoteAudioRecordingJoins[Q](buildHistoryNoteAudioRecordingColumns(alias), j.typ)
}

func buildHistoryNoteAudioRecordingJoins[Q dialect.Joinable](cols historyNoteAudioRecordingColumns, typ string) historyNoteAudioRecordingJoins[Q] {
	return historyNoteAudioRecordingJoins[Q]{
		typ: typ,
		Note: modAs[Q, noteColumns]{
			c: Notes.Columns,
			f: func(to noteColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Notes.Name().As(to.Alias())).On(
						to.UUID.EQ(cols.NoteUUID),
					))
				}

				return mods
			},
		},
	}
}
