// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSContainerrelate is an object representing the database table.
type FSContainerrelate struct {
	Containertype  null.Val[string]  `db:"containertype" `
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	Globalid       null.Val[string]  `db:"globalid" `
	Inspsampleid   null.Val[string]  `db:"inspsampleid" `
	Mosquitoinspid null.Val[string]  `db:"mosquitoinspid" `
	Objectid       int32             `db:"objectid,pk" `
	Treatmentid    null.Val[string]  `db:"treatmentid" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSContainerrelateSlice is an alias for a slice of pointers to FSContainerrelate.
// This should almost always be used instead of []*FSContainerrelate.
type FSContainerrelateSlice []*FSContainerrelate

// FSContainerrelates contains methods to work with the fs_containerrelate table
var FSContainerrelates = psql.NewTablex[*FSContainerrelate, FSContainerrelateSlice, *FSContainerrelateSetter]("", "fs_containerrelate", buildFSContainerrelateColumns("fs_containerrelate"))

// FSContainerrelatesQuery is a query on the fs_containerrelate table
type FSContainerrelatesQuery = *psql.ViewQuery[*FSContainerrelate, FSContainerrelateSlice]

func buildFSContainerrelateColumns(alias string) fsContainerrelateColumns {
	return fsContainerrelateColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"containertype", "creationdate", "creator", "editdate", "editor", "globalid", "inspsampleid", "mosquitoinspid", "objectid", "treatmentid", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_containerrelate"),
		tableAlias:     alias,
		Containertype:  psql.Quote(alias, "containertype"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Inspsampleid:   psql.Quote(alias, "inspsampleid"),
		Mosquitoinspid: psql.Quote(alias, "mosquitoinspid"),
		Objectid:       psql.Quote(alias, "objectid"),
		Treatmentid:    psql.Quote(alias, "treatmentid"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsContainerrelateColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Containertype  psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Inspsampleid   psql.Expression
	Mosquitoinspid psql.Expression
	Objectid       psql.Expression
	Treatmentid    psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsContainerrelateColumns) Alias() string {
	return c.tableAlias
}

func (fsContainerrelateColumns) AliasedAs(alias string) fsContainerrelateColumns {
	return buildFSContainerrelateColumns(alias)
}

// FSContainerrelateSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSContainerrelateSetter struct {
	Containertype  omitnull.Val[string]  `db:"containertype" `
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Inspsampleid   omitnull.Val[string]  `db:"inspsampleid" `
	Mosquitoinspid omitnull.Val[string]  `db:"mosquitoinspid" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	Treatmentid    omitnull.Val[string]  `db:"treatmentid" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSContainerrelateSetter) SetColumns() []string {
	vals := make([]string, 0, 17)
	if !s.Containertype.IsUnset() {
		vals = append(vals, "containertype")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Inspsampleid.IsUnset() {
		vals = append(vals, "inspsampleid")
	}
	if !s.Mosquitoinspid.IsUnset() {
		vals = append(vals, "mosquitoinspid")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Treatmentid.IsUnset() {
		vals = append(vals, "treatmentid")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSContainerrelateSetter) Overwrite(t *FSContainerrelate) {
	if !s.Containertype.IsUnset() {
		t.Containertype = s.Containertype.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Inspsampleid.IsUnset() {
		t.Inspsampleid = s.Inspsampleid.MustGetNull()
	}
	if !s.Mosquitoinspid.IsUnset() {
		t.Mosquitoinspid = s.Mosquitoinspid.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Treatmentid.IsUnset() {
		t.Treatmentid = s.Treatmentid.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSContainerrelateSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSContainerrelates.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 17)
		if !s.Containertype.IsUnset() {
			vals[0] = psql.Arg(s.Containertype.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[3] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[4] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Inspsampleid.IsUnset() {
			vals[6] = psql.Arg(s.Inspsampleid.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Mosquitoinspid.IsUnset() {
			vals[7] = psql.Arg(s.Mosquitoinspid.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[8] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Treatmentid.IsUnset() {
			vals[9] = psql.Arg(s.Treatmentid.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[10] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[11] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[12] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[13] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[14] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[15] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[16] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSContainerrelateSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSContainerrelateSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 17)

	if !s.Containertype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "containertype")...),
			psql.Arg(s.Containertype),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Inspsampleid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "inspsampleid")...),
			psql.Arg(s.Inspsampleid),
		}})
	}

	if !s.Mosquitoinspid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "mosquitoinspid")...),
			psql.Arg(s.Mosquitoinspid),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Treatmentid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "treatmentid")...),
			psql.Arg(s.Treatmentid),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSContainerrelate retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSContainerrelate(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSContainerrelate, error) {
	if len(cols) == 0 {
		return FSContainerrelates.Query(
			sm.Where(FSContainerrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSContainerrelates.Query(
		sm.Where(FSContainerrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSContainerrelates.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSContainerrelateExists checks the presence of a single record by primary key
func FSContainerrelateExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSContainerrelates.Query(
		sm.Where(FSContainerrelates.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSContainerrelate is retrieved from the database
func (o *FSContainerrelate) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSContainerrelates.AfterSelectHooks.RunHooks(ctx, exec, FSContainerrelateSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSContainerrelates.AfterInsertHooks.RunHooks(ctx, exec, FSContainerrelateSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSContainerrelates.AfterUpdateHooks.RunHooks(ctx, exec, FSContainerrelateSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSContainerrelates.AfterDeleteHooks.RunHooks(ctx, exec, FSContainerrelateSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSContainerrelate
func (o *FSContainerrelate) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSContainerrelate) pkEQ() dialect.Expression {
	return psql.Quote("fs_containerrelate", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSContainerrelate
func (o *FSContainerrelate) Update(ctx context.Context, exec bob.Executor, s *FSContainerrelateSetter) error {
	v, err := FSContainerrelates.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSContainerrelate record with an executor
func (o *FSContainerrelate) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSContainerrelates.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSContainerrelate using the executor
func (o *FSContainerrelate) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSContainerrelates.Query(
		sm.Where(FSContainerrelates.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSContainerrelateSlice is retrieved from the database
func (o FSContainerrelateSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSContainerrelates.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSContainerrelates.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSContainerrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSContainerrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSContainerrelateSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_containerrelate", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSContainerrelateSlice) copyMatchingRows(from ...*FSContainerrelate) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSContainerrelateSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSContainerrelates.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSContainerrelate:
				o.copyMatchingRows(retrieved)
			case []*FSContainerrelate:
				o.copyMatchingRows(retrieved...)
			case FSContainerrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSContainerrelate or a slice of FSContainerrelate
				// then run the AfterUpdateHooks on the slice
				_, err = FSContainerrelates.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSContainerrelateSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSContainerrelates.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSContainerrelate:
				o.copyMatchingRows(retrieved)
			case []*FSContainerrelate:
				o.copyMatchingRows(retrieved...)
			case FSContainerrelateSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSContainerrelate or a slice of FSContainerrelate
				// then run the AfterDeleteHooks on the slice
				_, err = FSContainerrelates.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSContainerrelateSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSContainerrelateSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSContainerrelates.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSContainerrelateSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSContainerrelates.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSContainerrelateSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSContainerrelates.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsContainerrelateWhere[Q psql.Filterable] struct {
	Containertype  psql.WhereNullMod[Q, string]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Inspsampleid   psql.WhereNullMod[Q, string]
	Mosquitoinspid psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	Treatmentid    psql.WhereNullMod[Q, string]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsContainerrelateWhere[Q]) AliasedAs(alias string) fsContainerrelateWhere[Q] {
	return buildFSContainerrelateWhere[Q](buildFSContainerrelateColumns(alias))
}

func buildFSContainerrelateWhere[Q psql.Filterable](cols fsContainerrelateColumns) fsContainerrelateWhere[Q] {
	return fsContainerrelateWhere[Q]{
		Containertype:  psql.WhereNull[Q, string](cols.Containertype),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Inspsampleid:   psql.WhereNull[Q, string](cols.Inspsampleid),
		Mosquitoinspid: psql.WhereNull[Q, string](cols.Mosquitoinspid),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Treatmentid:    psql.WhereNull[Q, string](cols.Treatmentid),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
