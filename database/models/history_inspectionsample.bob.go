// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryInspectionsample is an object representing the database table.
type HistoryInspectionsample struct {
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	Globalid       null.Val[string]    `db:"globalid" `
	Idbytech       null.Val[string]    `db:"idbytech" `
	InspID         null.Val[string]    `db:"insp_id" `
	Objectid       int32               `db:"objectid,pk" `
	Processed      null.Val[int16]     `db:"processed" `
	Sampleid       null.Val[string]    `db:"sampleid" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	Version        int32               `db:"version,pk" `
}

// HistoryInspectionsampleSlice is an alias for a slice of pointers to HistoryInspectionsample.
// This should almost always be used instead of []*HistoryInspectionsample.
type HistoryInspectionsampleSlice []*HistoryInspectionsample

// HistoryInspectionsamples contains methods to work with the history_inspectionsample table
var HistoryInspectionsamples = psql.NewTablex[*HistoryInspectionsample, HistoryInspectionsampleSlice, *HistoryInspectionsampleSetter]("", "history_inspectionsample", buildHistoryInspectionsampleColumns("history_inspectionsample"))

// HistoryInspectionsamplesQuery is a query on the history_inspectionsample table
type HistoryInspectionsamplesQuery = *psql.ViewQuery[*HistoryInspectionsample, HistoryInspectionsampleSlice]

func buildHistoryInspectionsampleColumns(alias string) historyInspectionsampleColumns {
	return historyInspectionsampleColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "globalid", "idbytech", "insp_id", "objectid", "processed", "sampleid", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_inspectionsample"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Idbytech:       psql.Quote(alias, "idbytech"),
		InspID:         psql.Quote(alias, "insp_id"),
		Objectid:       psql.Quote(alias, "objectid"),
		Processed:      psql.Quote(alias, "processed"),
		Sampleid:       psql.Quote(alias, "sampleid"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historyInspectionsampleColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Idbytech       psql.Expression
	InspID         psql.Expression
	Objectid       psql.Expression
	Processed      psql.Expression
	Sampleid       psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Version        psql.Expression
}

func (c historyInspectionsampleColumns) Alias() string {
	return c.tableAlias
}

func (historyInspectionsampleColumns) AliasedAs(alias string) historyInspectionsampleColumns {
	return buildHistoryInspectionsampleColumns(alias)
}

// HistoryInspectionsampleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryInspectionsampleSetter struct {
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	Idbytech       omitnull.Val[string]    `db:"idbytech" `
	InspID         omitnull.Val[string]    `db:"insp_id" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	Processed      omitnull.Val[int16]     `db:"processed" `
	Sampleid       omitnull.Val[string]    `db:"sampleid" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryInspectionsampleSetter) SetColumns() []string {
	vals := make([]string, 0, 18)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Idbytech.IsUnset() {
		vals = append(vals, "idbytech")
	}
	if !s.InspID.IsUnset() {
		vals = append(vals, "insp_id")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Processed.IsUnset() {
		vals = append(vals, "processed")
	}
	if !s.Sampleid.IsUnset() {
		vals = append(vals, "sampleid")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryInspectionsampleSetter) Overwrite(t *HistoryInspectionsample) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Idbytech.IsUnset() {
		t.Idbytech = s.Idbytech.MustGetNull()
	}
	if !s.InspID.IsUnset() {
		t.InspID = s.InspID.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Processed.IsUnset() {
		t.Processed = s.Processed.MustGetNull()
	}
	if !s.Sampleid.IsUnset() {
		t.Sampleid = s.Sampleid.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryInspectionsampleSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryInspectionsamples.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 18)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[4] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Idbytech.IsUnset() {
			vals[5] = psql.Arg(s.Idbytech.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.InspID.IsUnset() {
			vals[6] = psql.Arg(s.InspID.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Processed.IsUnset() {
			vals[8] = psql.Arg(s.Processed.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Sampleid.IsUnset() {
			vals[9] = psql.Arg(s.Sampleid.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[10] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[11] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[12] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[13] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[14] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[15] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[16] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[17] = psql.Arg(s.Version.MustGet())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryInspectionsampleSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryInspectionsampleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 18)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Idbytech.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "idbytech")...),
			psql.Arg(s.Idbytech),
		}})
	}

	if !s.InspID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "insp_id")...),
			psql.Arg(s.InspID),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Processed.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "processed")...),
			psql.Arg(s.Processed),
		}})
	}

	if !s.Sampleid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "sampleid")...),
			psql.Arg(s.Sampleid),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryInspectionsample retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryInspectionsample(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryInspectionsample, error) {
	if len(cols) == 0 {
		return HistoryInspectionsamples.Query(
			sm.Where(HistoryInspectionsamples.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryInspectionsamples.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryInspectionsamples.Query(
		sm.Where(HistoryInspectionsamples.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryInspectionsamples.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryInspectionsamples.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryInspectionsampleExists checks the presence of a single record by primary key
func HistoryInspectionsampleExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryInspectionsamples.Query(
		sm.Where(HistoryInspectionsamples.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryInspectionsamples.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryInspectionsample is retrieved from the database
func (o *HistoryInspectionsample) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryInspectionsamples.AfterSelectHooks.RunHooks(ctx, exec, HistoryInspectionsampleSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryInspectionsamples.AfterInsertHooks.RunHooks(ctx, exec, HistoryInspectionsampleSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryInspectionsamples.AfterUpdateHooks.RunHooks(ctx, exec, HistoryInspectionsampleSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryInspectionsamples.AfterDeleteHooks.RunHooks(ctx, exec, HistoryInspectionsampleSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryInspectionsample
func (o *HistoryInspectionsample) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryInspectionsample) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_inspectionsample", "objectid"), psql.Quote("history_inspectionsample", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryInspectionsample
func (o *HistoryInspectionsample) Update(ctx context.Context, exec bob.Executor, s *HistoryInspectionsampleSetter) error {
	v, err := HistoryInspectionsamples.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryInspectionsample record with an executor
func (o *HistoryInspectionsample) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryInspectionsamples.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryInspectionsample using the executor
func (o *HistoryInspectionsample) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryInspectionsamples.Query(
		sm.Where(HistoryInspectionsamples.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryInspectionsamples.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryInspectionsampleSlice is retrieved from the database
func (o HistoryInspectionsampleSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryInspectionsamples.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryInspectionsamples.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryInspectionsamples.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryInspectionsamples.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryInspectionsampleSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_inspectionsample", "objectid"), psql.Quote("history_inspectionsample", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryInspectionsampleSlice) copyMatchingRows(from ...*HistoryInspectionsample) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryInspectionsampleSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryInspectionsamples.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryInspectionsample:
				o.copyMatchingRows(retrieved)
			case []*HistoryInspectionsample:
				o.copyMatchingRows(retrieved...)
			case HistoryInspectionsampleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryInspectionsample or a slice of HistoryInspectionsample
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryInspectionsamples.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryInspectionsampleSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryInspectionsamples.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryInspectionsample:
				o.copyMatchingRows(retrieved)
			case []*HistoryInspectionsample:
				o.copyMatchingRows(retrieved...)
			case HistoryInspectionsampleSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryInspectionsample or a slice of HistoryInspectionsample
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryInspectionsamples.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryInspectionsampleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryInspectionsampleSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryInspectionsamples.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryInspectionsampleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryInspectionsamples.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryInspectionsampleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryInspectionsamples.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyInspectionsampleWhere[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Idbytech       psql.WhereNullMod[Q, string]
	InspID         psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	Processed      psql.WhereNullMod[Q, int16]
	Sampleid       psql.WhereNullMod[Q, string]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Version        psql.WhereMod[Q, int32]
}

func (historyInspectionsampleWhere[Q]) AliasedAs(alias string) historyInspectionsampleWhere[Q] {
	return buildHistoryInspectionsampleWhere[Q](buildHistoryInspectionsampleColumns(alias))
}

func buildHistoryInspectionsampleWhere[Q psql.Filterable](cols historyInspectionsampleColumns) historyInspectionsampleWhere[Q] {
	return historyInspectionsampleWhere[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Idbytech:       psql.WhereNull[Q, string](cols.Idbytech),
		InspID:         psql.WhereNull[Q, string](cols.InspID),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Processed:      psql.WhereNull[Q, int16](cols.Processed),
		Sampleid:       psql.WhereNull[Q, string](cols.Sampleid),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
