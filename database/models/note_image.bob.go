// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// NoteImage is an object representing the database table.
type NoteImage struct {
	Created time.Time           `db:"created" `
	Deleted null.Val[time.Time] `db:"deleted" `
	Version int32               `db:"version,pk" `
	UUID    string              `db:"uuid,pk" `
	Creator int32               `db:"creator" `

	R noteImageR `db:"-" `
}

// NoteImageSlice is an alias for a slice of pointers to NoteImage.
// This should almost always be used instead of []*NoteImage.
type NoteImageSlice []*NoteImage

// NoteImages contains methods to work with the note_image table
var NoteImages = psql.NewTablex[*NoteImage, NoteImageSlice, *NoteImageSetter]("", "note_image", buildNoteImageColumns("note_image"))

// NoteImagesQuery is a query on the note_image table
type NoteImagesQuery = *psql.ViewQuery[*NoteImage, NoteImageSlice]

// noteImageR is where relationships are stored.
type noteImageR struct {
	CreatorUser *User // note_image.note_image_creator_fkey
}

func buildNoteImageColumns(alias string) noteImageColumns {
	return noteImageColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"created", "deleted", "version", "uuid", "creator",
		).WithParent("note_image"),
		tableAlias: alias,
		Created:    psql.Quote(alias, "created"),
		Deleted:    psql.Quote(alias, "deleted"),
		Version:    psql.Quote(alias, "version"),
		UUID:       psql.Quote(alias, "uuid"),
		Creator:    psql.Quote(alias, "creator"),
	}
}

type noteImageColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Created    psql.Expression
	Deleted    psql.Expression
	Version    psql.Expression
	UUID       psql.Expression
	Creator    psql.Expression
}

func (c noteImageColumns) Alias() string {
	return c.tableAlias
}

func (noteImageColumns) AliasedAs(alias string) noteImageColumns {
	return buildNoteImageColumns(alias)
}

// NoteImageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type NoteImageSetter struct {
	Created omit.Val[time.Time]     `db:"created" `
	Deleted omitnull.Val[time.Time] `db:"deleted" `
	Version omit.Val[int32]         `db:"version,pk" `
	UUID    omit.Val[string]        `db:"uuid,pk" `
	Creator omit.Val[int32]         `db:"creator" `
}

func (s NoteImageSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.Created.IsValue() {
		vals = append(vals, "created")
	}
	if !s.Deleted.IsUnset() {
		vals = append(vals, "deleted")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	if s.UUID.IsValue() {
		vals = append(vals, "uuid")
	}
	if s.Creator.IsValue() {
		vals = append(vals, "creator")
	}
	return vals
}

func (s NoteImageSetter) Overwrite(t *NoteImage) {
	if s.Created.IsValue() {
		t.Created = s.Created.MustGet()
	}
	if !s.Deleted.IsUnset() {
		t.Deleted = s.Deleted.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
	if s.UUID.IsValue() {
		t.UUID = s.UUID.MustGet()
	}
	if s.Creator.IsValue() {
		t.Creator = s.Creator.MustGet()
	}
}

func (s *NoteImageSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return NoteImages.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.Created.IsValue() {
			vals[0] = psql.Arg(s.Created.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Deleted.IsUnset() {
			vals[1] = psql.Arg(s.Deleted.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[2] = psql.Arg(s.Version.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.UUID.IsValue() {
			vals[3] = psql.Arg(s.UUID.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Creator.IsValue() {
			vals[4] = psql.Arg(s.Creator.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s NoteImageSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s NoteImageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.Created.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.Deleted.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deleted")...),
			psql.Arg(s.Deleted),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	if s.UUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "uuid")...),
			psql.Arg(s.UUID),
		}})
	}

	if s.Creator.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	return exprs
}

// FindNoteImage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindNoteImage(ctx context.Context, exec bob.Executor, VersionPK int32, UUIDPK string, cols ...string) (*NoteImage, error) {
	if len(cols) == 0 {
		return NoteImages.Query(
			sm.Where(NoteImages.Columns.Version.EQ(psql.Arg(VersionPK))),
			sm.Where(NoteImages.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		).One(ctx, exec)
	}

	return NoteImages.Query(
		sm.Where(NoteImages.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Where(NoteImages.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Columns(NoteImages.Columns.Only(cols...)),
	).One(ctx, exec)
}

// NoteImageExists checks the presence of a single record by primary key
func NoteImageExists(ctx context.Context, exec bob.Executor, VersionPK int32, UUIDPK string) (bool, error) {
	return NoteImages.Query(
		sm.Where(NoteImages.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Where(NoteImages.Columns.UUID.EQ(psql.Arg(UUIDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after NoteImage is retrieved from the database
func (o *NoteImage) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = NoteImages.AfterSelectHooks.RunHooks(ctx, exec, NoteImageSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = NoteImages.AfterInsertHooks.RunHooks(ctx, exec, NoteImageSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = NoteImages.AfterUpdateHooks.RunHooks(ctx, exec, NoteImageSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = NoteImages.AfterDeleteHooks.RunHooks(ctx, exec, NoteImageSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the NoteImage
func (o *NoteImage) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Version,
		o.UUID,
	)
}

func (o *NoteImage) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("note_image", "version"), psql.Quote("note_image", "uuid")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the NoteImage
func (o *NoteImage) Update(ctx context.Context, exec bob.Executor, s *NoteImageSetter) error {
	v, err := NoteImages.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single NoteImage record with an executor
func (o *NoteImage) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := NoteImages.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the NoteImage using the executor
func (o *NoteImage) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := NoteImages.Query(
		sm.Where(NoteImages.Columns.Version.EQ(psql.Arg(o.Version))),
		sm.Where(NoteImages.Columns.UUID.EQ(psql.Arg(o.UUID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after NoteImageSlice is retrieved from the database
func (o NoteImageSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = NoteImages.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = NoteImages.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = NoteImages.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = NoteImages.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o NoteImageSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("note_image", "version"), psql.Quote("note_image", "uuid")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o NoteImageSlice) copyMatchingRows(from ...*NoteImage) {
	for i, old := range o {
		for _, new := range from {
			if new.Version != old.Version {
				continue
			}
			if new.UUID != old.UUID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o NoteImageSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return NoteImages.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *NoteImage:
				o.copyMatchingRows(retrieved)
			case []*NoteImage:
				o.copyMatchingRows(retrieved...)
			case NoteImageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a NoteImage or a slice of NoteImage
				// then run the AfterUpdateHooks on the slice
				_, err = NoteImages.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o NoteImageSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return NoteImages.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *NoteImage:
				o.copyMatchingRows(retrieved)
			case []*NoteImage:
				o.copyMatchingRows(retrieved...)
			case NoteImageSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a NoteImage or a slice of NoteImage
				// then run the AfterDeleteHooks on the slice
				_, err = NoteImages.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o NoteImageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals NoteImageSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := NoteImages.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o NoteImageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := NoteImages.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o NoteImageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := NoteImages.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CreatorUser starts a query for related objects on user_
func (o *NoteImage) CreatorUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.Creator))),
	)...)
}

func (os NoteImageSlice) CreatorUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkCreator := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkCreator = append(pkCreator, o.Creator)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkCreator), "integer[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachNoteImageCreatorUser0(ctx context.Context, exec bob.Executor, count int, noteImage0 *NoteImage, user1 *User) (*NoteImage, error) {
	setter := &NoteImageSetter{
		Creator: omit.From(user1.ID),
	}

	err := noteImage0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachNoteImageCreatorUser0: %w", err)
	}

	return noteImage0, nil
}

func (noteImage0 *NoteImage) InsertCreatorUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachNoteImageCreatorUser0(ctx, exec, 1, noteImage0, user1)
	if err != nil {
		return err
	}

	noteImage0.R.CreatorUser = user1

	user1.R.CreatorNoteImages = append(user1.R.CreatorNoteImages, noteImage0)

	return nil
}

func (noteImage0 *NoteImage) AttachCreatorUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachNoteImageCreatorUser0(ctx, exec, 1, noteImage0, user1)
	if err != nil {
		return err
	}

	noteImage0.R.CreatorUser = user1

	user1.R.CreatorNoteImages = append(user1.R.CreatorNoteImages, noteImage0)

	return nil
}

type noteImageWhere[Q psql.Filterable] struct {
	Created psql.WhereMod[Q, time.Time]
	Deleted psql.WhereNullMod[Q, time.Time]
	Version psql.WhereMod[Q, int32]
	UUID    psql.WhereMod[Q, string]
	Creator psql.WhereMod[Q, int32]
}

func (noteImageWhere[Q]) AliasedAs(alias string) noteImageWhere[Q] {
	return buildNoteImageWhere[Q](buildNoteImageColumns(alias))
}

func buildNoteImageWhere[Q psql.Filterable](cols noteImageColumns) noteImageWhere[Q] {
	return noteImageWhere[Q]{
		Created: psql.Where[Q, time.Time](cols.Created),
		Deleted: psql.WhereNull[Q, time.Time](cols.Deleted),
		Version: psql.Where[Q, int32](cols.Version),
		UUID:    psql.Where[Q, string](cols.UUID),
		Creator: psql.Where[Q, int32](cols.Creator),
	}
}

func (o *NoteImage) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CreatorUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("noteImage cannot load %T as %q", retrieved, name)
		}

		o.R.CreatorUser = rel

		if rel != nil {
			rel.R.CreatorNoteImages = NoteImageSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("noteImage has no relationship %q", name)
	}
}

type noteImagePreloader struct {
	CreatorUser func(...psql.PreloadOption) psql.Preloader
}

func buildNoteImagePreloader() noteImagePreloader {
	return noteImagePreloader{
		CreatorUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](psql.PreloadRel{
				Name: "CreatorUser",
				Sides: []psql.PreloadSide{
					{
						From:        NoteImages,
						To:          Users,
						FromColumns: []string{"creator"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
	}
}

type noteImageThenLoader[Q orm.Loadable] struct {
	CreatorUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildNoteImageThenLoader[Q orm.Loadable]() noteImageThenLoader[Q] {
	type CreatorUserLoadInterface interface {
		LoadCreatorUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return noteImageThenLoader[Q]{
		CreatorUser: thenLoadBuilder[Q](
			"CreatorUser",
			func(ctx context.Context, exec bob.Executor, retrieved CreatorUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCreatorUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadCreatorUser loads the noteImage's CreatorUser into the .R struct
func (o *NoteImage) LoadCreatorUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatorUser = nil

	related, err := o.CreatorUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CreatorNoteImages = NoteImageSlice{o}

	o.R.CreatorUser = related
	return nil
}

// LoadCreatorUser loads the noteImage's CreatorUser into the .R struct
func (os NoteImageSlice) LoadCreatorUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CreatorUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {

			if !(o.Creator == rel.ID) {
				continue
			}

			rel.R.CreatorNoteImages = append(rel.R.CreatorNoteImages, o)

			o.R.CreatorUser = rel
			break
		}
	}

	return nil
}

type noteImageJoins[Q dialect.Joinable] struct {
	typ         string
	CreatorUser modAs[Q, userColumns]
}

func (j noteImageJoins[Q]) aliasedAs(alias string) noteImageJoins[Q] {
	return buildNoteImageJoins[Q](buildNoteImageColumns(alias), j.typ)
}

func buildNoteImageJoins[Q dialect.Joinable](cols noteImageColumns, typ string) noteImageJoins[Q] {
	return noteImageJoins[Q]{
		typ: typ,
		CreatorUser: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.Creator),
					))
				}

				return mods
			},
		},
	}
}
