// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// TaskAudioReview is an object representing the database table.
type TaskAudioReview struct {
	ID               int32           `db:"id,pk" `
	CompletedBy      null.Val[int32] `db:"completed_by" `
	Created          time.Time       `db:"created" `
	NeedsReview      bool            `db:"needs_review" `
	NoteAudioUUID    string          `db:"note_audio_uuid" `
	NoteAudioVersion int32           `db:"note_audio_version" `
	ReviewedBy       null.Val[int32] `db:"reviewed_by" `

	R taskAudioReviewR `db:"-" `
}

// TaskAudioReviewSlice is an alias for a slice of pointers to TaskAudioReview.
// This should almost always be used instead of []*TaskAudioReview.
type TaskAudioReviewSlice []*TaskAudioReview

// TaskAudioReviews contains methods to work with the task_audio_review table
var TaskAudioReviews = psql.NewTablex[*TaskAudioReview, TaskAudioReviewSlice, *TaskAudioReviewSetter]("", "task_audio_review", buildTaskAudioReviewColumns("task_audio_review"))

// TaskAudioReviewsQuery is a query on the task_audio_review table
type TaskAudioReviewsQuery = *psql.ViewQuery[*TaskAudioReview, TaskAudioReviewSlice]

// taskAudioReviewR is where relationships are stored.
type taskAudioReviewR struct {
	CompletedByUser *User      // task_audio_review.task_audio_review_completed_by_fkey
	NoteAudio       *NoteAudio // task_audio_review.task_audio_review_note_audio_uuid_note_audio_version_fkey
	ReviewedByUser  *User      // task_audio_review.task_audio_review_reviewed_by_fkey
}

func buildTaskAudioReviewColumns(alias string) taskAudioReviewColumns {
	return taskAudioReviewColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "completed_by", "created", "needs_review", "note_audio_uuid", "note_audio_version", "reviewed_by",
		).WithParent("task_audio_review"),
		tableAlias:       alias,
		ID:               psql.Quote(alias, "id"),
		CompletedBy:      psql.Quote(alias, "completed_by"),
		Created:          psql.Quote(alias, "created"),
		NeedsReview:      psql.Quote(alias, "needs_review"),
		NoteAudioUUID:    psql.Quote(alias, "note_audio_uuid"),
		NoteAudioVersion: psql.Quote(alias, "note_audio_version"),
		ReviewedBy:       psql.Quote(alias, "reviewed_by"),
	}
}

type taskAudioReviewColumns struct {
	expr.ColumnsExpr
	tableAlias       string
	ID               psql.Expression
	CompletedBy      psql.Expression
	Created          psql.Expression
	NeedsReview      psql.Expression
	NoteAudioUUID    psql.Expression
	NoteAudioVersion psql.Expression
	ReviewedBy       psql.Expression
}

func (c taskAudioReviewColumns) Alias() string {
	return c.tableAlias
}

func (taskAudioReviewColumns) AliasedAs(alias string) taskAudioReviewColumns {
	return buildTaskAudioReviewColumns(alias)
}

// TaskAudioReviewSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TaskAudioReviewSetter struct {
	ID               omit.Val[int32]     `db:"id,pk" `
	CompletedBy      omitnull.Val[int32] `db:"completed_by" `
	Created          omit.Val[time.Time] `db:"created" `
	NeedsReview      omit.Val[bool]      `db:"needs_review" `
	NoteAudioUUID    omit.Val[string]    `db:"note_audio_uuid" `
	NoteAudioVersion omit.Val[int32]     `db:"note_audio_version" `
	ReviewedBy       omitnull.Val[int32] `db:"reviewed_by" `
}

func (s TaskAudioReviewSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if !s.CompletedBy.IsUnset() {
		vals = append(vals, "completed_by")
	}
	if s.Created.IsValue() {
		vals = append(vals, "created")
	}
	if s.NeedsReview.IsValue() {
		vals = append(vals, "needs_review")
	}
	if s.NoteAudioUUID.IsValue() {
		vals = append(vals, "note_audio_uuid")
	}
	if s.NoteAudioVersion.IsValue() {
		vals = append(vals, "note_audio_version")
	}
	if !s.ReviewedBy.IsUnset() {
		vals = append(vals, "reviewed_by")
	}
	return vals
}

func (s TaskAudioReviewSetter) Overwrite(t *TaskAudioReview) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if !s.CompletedBy.IsUnset() {
		t.CompletedBy = s.CompletedBy.MustGetNull()
	}
	if s.Created.IsValue() {
		t.Created = s.Created.MustGet()
	}
	if s.NeedsReview.IsValue() {
		t.NeedsReview = s.NeedsReview.MustGet()
	}
	if s.NoteAudioUUID.IsValue() {
		t.NoteAudioUUID = s.NoteAudioUUID.MustGet()
	}
	if s.NoteAudioVersion.IsValue() {
		t.NoteAudioVersion = s.NoteAudioVersion.MustGet()
	}
	if !s.ReviewedBy.IsUnset() {
		t.ReviewedBy = s.ReviewedBy.MustGetNull()
	}
}

func (s *TaskAudioReviewSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return TaskAudioReviews.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.CompletedBy.IsUnset() {
			vals[1] = psql.Arg(s.CompletedBy.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Created.IsValue() {
			vals[2] = psql.Arg(s.Created.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.NeedsReview.IsValue() {
			vals[3] = psql.Arg(s.NeedsReview.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.NoteAudioUUID.IsValue() {
			vals[4] = psql.Arg(s.NoteAudioUUID.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.NoteAudioVersion.IsValue() {
			vals[5] = psql.Arg(s.NoteAudioVersion.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.ReviewedBy.IsUnset() {
			vals[6] = psql.Arg(s.ReviewedBy.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TaskAudioReviewSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TaskAudioReviewSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.CompletedBy.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "completed_by")...),
			psql.Arg(s.CompletedBy),
		}})
	}

	if s.Created.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if s.NeedsReview.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "needs_review")...),
			psql.Arg(s.NeedsReview),
		}})
	}

	if s.NoteAudioUUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "note_audio_uuid")...),
			psql.Arg(s.NoteAudioUUID),
		}})
	}

	if s.NoteAudioVersion.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "note_audio_version")...),
			psql.Arg(s.NoteAudioVersion),
		}})
	}

	if !s.ReviewedBy.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "reviewed_by")...),
			psql.Arg(s.ReviewedBy),
		}})
	}

	return exprs
}

// FindTaskAudioReview retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTaskAudioReview(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*TaskAudioReview, error) {
	if len(cols) == 0 {
		return TaskAudioReviews.Query(
			sm.Where(TaskAudioReviews.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return TaskAudioReviews.Query(
		sm.Where(TaskAudioReviews.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(TaskAudioReviews.Columns.Only(cols...)),
	).One(ctx, exec)
}

// TaskAudioReviewExists checks the presence of a single record by primary key
func TaskAudioReviewExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return TaskAudioReviews.Query(
		sm.Where(TaskAudioReviews.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after TaskAudioReview is retrieved from the database
func (o *TaskAudioReview) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TaskAudioReviews.AfterSelectHooks.RunHooks(ctx, exec, TaskAudioReviewSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = TaskAudioReviews.AfterInsertHooks.RunHooks(ctx, exec, TaskAudioReviewSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = TaskAudioReviews.AfterUpdateHooks.RunHooks(ctx, exec, TaskAudioReviewSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = TaskAudioReviews.AfterDeleteHooks.RunHooks(ctx, exec, TaskAudioReviewSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the TaskAudioReview
func (o *TaskAudioReview) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *TaskAudioReview) pkEQ() dialect.Expression {
	return psql.Quote("task_audio_review", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the TaskAudioReview
func (o *TaskAudioReview) Update(ctx context.Context, exec bob.Executor, s *TaskAudioReviewSetter) error {
	v, err := TaskAudioReviews.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single TaskAudioReview record with an executor
func (o *TaskAudioReview) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := TaskAudioReviews.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the TaskAudioReview using the executor
func (o *TaskAudioReview) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TaskAudioReviews.Query(
		sm.Where(TaskAudioReviews.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TaskAudioReviewSlice is retrieved from the database
func (o TaskAudioReviewSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = TaskAudioReviews.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = TaskAudioReviews.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = TaskAudioReviews.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = TaskAudioReviews.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TaskAudioReviewSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("task_audio_review", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TaskAudioReviewSlice) copyMatchingRows(from ...*TaskAudioReview) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TaskAudioReviewSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TaskAudioReviews.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TaskAudioReview:
				o.copyMatchingRows(retrieved)
			case []*TaskAudioReview:
				o.copyMatchingRows(retrieved...)
			case TaskAudioReviewSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TaskAudioReview or a slice of TaskAudioReview
				// then run the AfterUpdateHooks on the slice
				_, err = TaskAudioReviews.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TaskAudioReviewSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return TaskAudioReviews.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *TaskAudioReview:
				o.copyMatchingRows(retrieved)
			case []*TaskAudioReview:
				o.copyMatchingRows(retrieved...)
			case TaskAudioReviewSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a TaskAudioReview or a slice of TaskAudioReview
				// then run the AfterDeleteHooks on the slice
				_, err = TaskAudioReviews.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TaskAudioReviewSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TaskAudioReviewSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TaskAudioReviews.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TaskAudioReviewSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := TaskAudioReviews.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TaskAudioReviewSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := TaskAudioReviews.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CompletedByUser starts a query for related objects on user_
func (o *TaskAudioReview) CompletedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.CompletedBy))),
	)...)
}

func (os TaskAudioReviewSlice) CompletedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkCompletedBy := make(pgtypes.Array[null.Val[int32]], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkCompletedBy = append(pkCompletedBy, o.CompletedBy)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkCompletedBy), "integer[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

// NoteAudio starts a query for related objects on note_audio
func (o *TaskAudioReview) NoteAudio(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	return NoteAudios.Query(append(mods,
		sm.Where(NoteAudios.Columns.UUID.EQ(psql.Arg(o.NoteAudioUUID))), sm.Where(NoteAudios.Columns.Version.EQ(psql.Arg(o.NoteAudioVersion))),
	)...)
}

func (os TaskAudioReviewSlice) NoteAudio(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	pkNoteAudioUUID := make(pgtypes.Array[string], 0, len(os))

	pkNoteAudioVersion := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkNoteAudioUUID = append(pkNoteAudioUUID, o.NoteAudioUUID)
		pkNoteAudioVersion = append(pkNoteAudioVersion, o.NoteAudioVersion)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkNoteAudioUUID), "text[]")),
		psql.F("unnest", psql.Cast(psql.Arg(pkNoteAudioVersion), "integer[]")),
	))

	return NoteAudios.Query(append(mods,
		sm.Where(psql.Group(NoteAudios.Columns.UUID, NoteAudios.Columns.Version).OP("IN", PKArgExpr)),
	)...)
}

// ReviewedByUser starts a query for related objects on user_
func (o *TaskAudioReview) ReviewedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.ReviewedBy))),
	)...)
}

func (os TaskAudioReviewSlice) ReviewedByUser(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkReviewedBy := make(pgtypes.Array[null.Val[int32]], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkReviewedBy = append(pkReviewedBy, o.ReviewedBy)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkReviewedBy), "integer[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachTaskAudioReviewCompletedByUser0(ctx context.Context, exec bob.Executor, count int, taskAudioReview0 *TaskAudioReview, user1 *User) (*TaskAudioReview, error) {
	setter := &TaskAudioReviewSetter{
		CompletedBy: omitnull.From(user1.ID),
	}

	err := taskAudioReview0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTaskAudioReviewCompletedByUser0: %w", err)
	}

	return taskAudioReview0, nil
}

func (taskAudioReview0 *TaskAudioReview) InsertCompletedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTaskAudioReviewCompletedByUser0(ctx, exec, 1, taskAudioReview0, user1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.CompletedByUser = user1

	user1.R.CompletedByTaskAudioReviews = append(user1.R.CompletedByTaskAudioReviews, taskAudioReview0)

	return nil
}

func (taskAudioReview0 *TaskAudioReview) AttachCompletedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTaskAudioReviewCompletedByUser0(ctx, exec, 1, taskAudioReview0, user1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.CompletedByUser = user1

	user1.R.CompletedByTaskAudioReviews = append(user1.R.CompletedByTaskAudioReviews, taskAudioReview0)

	return nil
}

func attachTaskAudioReviewNoteAudio0(ctx context.Context, exec bob.Executor, count int, taskAudioReview0 *TaskAudioReview, noteAudio1 *NoteAudio) (*TaskAudioReview, error) {
	setter := &TaskAudioReviewSetter{
		NoteAudioUUID:    omit.From(noteAudio1.UUID),
		NoteAudioVersion: omit.From(noteAudio1.Version),
	}

	err := taskAudioReview0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTaskAudioReviewNoteAudio0: %w", err)
	}

	return taskAudioReview0, nil
}

func (taskAudioReview0 *TaskAudioReview) InsertNoteAudio(ctx context.Context, exec bob.Executor, related *NoteAudioSetter) error {
	var err error

	noteAudio1, err := NoteAudios.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTaskAudioReviewNoteAudio0(ctx, exec, 1, taskAudioReview0, noteAudio1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.NoteAudio = noteAudio1

	noteAudio1.R.TaskAudioReviews = append(noteAudio1.R.TaskAudioReviews, taskAudioReview0)

	return nil
}

func (taskAudioReview0 *TaskAudioReview) AttachNoteAudio(ctx context.Context, exec bob.Executor, noteAudio1 *NoteAudio) error {
	var err error

	_, err = attachTaskAudioReviewNoteAudio0(ctx, exec, 1, taskAudioReview0, noteAudio1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.NoteAudio = noteAudio1

	noteAudio1.R.TaskAudioReviews = append(noteAudio1.R.TaskAudioReviews, taskAudioReview0)

	return nil
}

func attachTaskAudioReviewReviewedByUser0(ctx context.Context, exec bob.Executor, count int, taskAudioReview0 *TaskAudioReview, user1 *User) (*TaskAudioReview, error) {
	setter := &TaskAudioReviewSetter{
		ReviewedBy: omitnull.From(user1.ID),
	}

	err := taskAudioReview0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTaskAudioReviewReviewedByUser0: %w", err)
	}

	return taskAudioReview0, nil
}

func (taskAudioReview0 *TaskAudioReview) InsertReviewedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTaskAudioReviewReviewedByUser0(ctx, exec, 1, taskAudioReview0, user1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.ReviewedByUser = user1

	user1.R.ReviewedByTaskAudioReviews = append(user1.R.ReviewedByTaskAudioReviews, taskAudioReview0)

	return nil
}

func (taskAudioReview0 *TaskAudioReview) AttachReviewedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTaskAudioReviewReviewedByUser0(ctx, exec, 1, taskAudioReview0, user1)
	if err != nil {
		return err
	}

	taskAudioReview0.R.ReviewedByUser = user1

	user1.R.ReviewedByTaskAudioReviews = append(user1.R.ReviewedByTaskAudioReviews, taskAudioReview0)

	return nil
}

type taskAudioReviewWhere[Q psql.Filterable] struct {
	ID               psql.WhereMod[Q, int32]
	CompletedBy      psql.WhereNullMod[Q, int32]
	Created          psql.WhereMod[Q, time.Time]
	NeedsReview      psql.WhereMod[Q, bool]
	NoteAudioUUID    psql.WhereMod[Q, string]
	NoteAudioVersion psql.WhereMod[Q, int32]
	ReviewedBy       psql.WhereNullMod[Q, int32]
}

func (taskAudioReviewWhere[Q]) AliasedAs(alias string) taskAudioReviewWhere[Q] {
	return buildTaskAudioReviewWhere[Q](buildTaskAudioReviewColumns(alias))
}

func buildTaskAudioReviewWhere[Q psql.Filterable](cols taskAudioReviewColumns) taskAudioReviewWhere[Q] {
	return taskAudioReviewWhere[Q]{
		ID:               psql.Where[Q, int32](cols.ID),
		CompletedBy:      psql.WhereNull[Q, int32](cols.CompletedBy),
		Created:          psql.Where[Q, time.Time](cols.Created),
		NeedsReview:      psql.Where[Q, bool](cols.NeedsReview),
		NoteAudioUUID:    psql.Where[Q, string](cols.NoteAudioUUID),
		NoteAudioVersion: psql.Where[Q, int32](cols.NoteAudioVersion),
		ReviewedBy:       psql.WhereNull[Q, int32](cols.ReviewedBy),
	}
}

func (o *TaskAudioReview) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CompletedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("taskAudioReview cannot load %T as %q", retrieved, name)
		}

		o.R.CompletedByUser = rel

		if rel != nil {
			rel.R.CompletedByTaskAudioReviews = TaskAudioReviewSlice{o}
		}
		return nil
	case "NoteAudio":
		rel, ok := retrieved.(*NoteAudio)
		if !ok {
			return fmt.Errorf("taskAudioReview cannot load %T as %q", retrieved, name)
		}

		o.R.NoteAudio = rel

		if rel != nil {
			rel.R.TaskAudioReviews = TaskAudioReviewSlice{o}
		}
		return nil
	case "ReviewedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("taskAudioReview cannot load %T as %q", retrieved, name)
		}

		o.R.ReviewedByUser = rel

		if rel != nil {
			rel.R.ReviewedByTaskAudioReviews = TaskAudioReviewSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("taskAudioReview has no relationship %q", name)
	}
}

type taskAudioReviewPreloader struct {
	CompletedByUser func(...psql.PreloadOption) psql.Preloader
	NoteAudio       func(...psql.PreloadOption) psql.Preloader
	ReviewedByUser  func(...psql.PreloadOption) psql.Preloader
}

func buildTaskAudioReviewPreloader() taskAudioReviewPreloader {
	return taskAudioReviewPreloader{
		CompletedByUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](psql.PreloadRel{
				Name: "CompletedByUser",
				Sides: []psql.PreloadSide{
					{
						From:        TaskAudioReviews,
						To:          Users,
						FromColumns: []string{"completed_by"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
		NoteAudio: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*NoteAudio, NoteAudioSlice](psql.PreloadRel{
				Name: "NoteAudio",
				Sides: []psql.PreloadSide{
					{
						From:        TaskAudioReviews,
						To:          NoteAudios,
						FromColumns: []string{"note_audio_uuid", "note_audio_version"},
						ToColumns:   []string{"uuid", "version"},
					},
				},
			}, NoteAudios.Columns.Names(), opts...)
		},
		ReviewedByUser: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](psql.PreloadRel{
				Name: "ReviewedByUser",
				Sides: []psql.PreloadSide{
					{
						From:        TaskAudioReviews,
						To:          Users,
						FromColumns: []string{"reviewed_by"},
						ToColumns:   []string{"id"},
					},
				},
			}, Users.Columns.Names(), opts...)
		},
	}
}

type taskAudioReviewThenLoader[Q orm.Loadable] struct {
	CompletedByUser func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	NoteAudio       func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	ReviewedByUser  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildTaskAudioReviewThenLoader[Q orm.Loadable]() taskAudioReviewThenLoader[Q] {
	type CompletedByUserLoadInterface interface {
		LoadCompletedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type NoteAudioLoadInterface interface {
		LoadNoteAudio(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ReviewedByUserLoadInterface interface {
		LoadReviewedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return taskAudioReviewThenLoader[Q]{
		CompletedByUser: thenLoadBuilder[Q](
			"CompletedByUser",
			func(ctx context.Context, exec bob.Executor, retrieved CompletedByUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCompletedByUser(ctx, exec, mods...)
			},
		),
		NoteAudio: thenLoadBuilder[Q](
			"NoteAudio",
			func(ctx context.Context, exec bob.Executor, retrieved NoteAudioLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadNoteAudio(ctx, exec, mods...)
			},
		),
		ReviewedByUser: thenLoadBuilder[Q](
			"ReviewedByUser",
			func(ctx context.Context, exec bob.Executor, retrieved ReviewedByUserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadReviewedByUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadCompletedByUser loads the taskAudioReview's CompletedByUser into the .R struct
func (o *TaskAudioReview) LoadCompletedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CompletedByUser = nil

	related, err := o.CompletedByUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.CompletedByTaskAudioReviews = TaskAudioReviewSlice{o}

	o.R.CompletedByUser = related
	return nil
}

// LoadCompletedByUser loads the taskAudioReview's CompletedByUser into the .R struct
func (os TaskAudioReviewSlice) LoadCompletedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CompletedByUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {
			if !o.CompletedBy.IsValue() {
				continue
			}

			if !(o.CompletedBy.IsValue() && o.CompletedBy.MustGet() == rel.ID) {
				continue
			}

			rel.R.CompletedByTaskAudioReviews = append(rel.R.CompletedByTaskAudioReviews, o)

			o.R.CompletedByUser = rel
			break
		}
	}

	return nil
}

// LoadNoteAudio loads the taskAudioReview's NoteAudio into the .R struct
func (o *TaskAudioReview) LoadNoteAudio(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.NoteAudio = nil

	related, err := o.NoteAudio(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.TaskAudioReviews = TaskAudioReviewSlice{o}

	o.R.NoteAudio = related
	return nil
}

// LoadNoteAudio loads the taskAudioReview's NoteAudio into the .R struct
func (os TaskAudioReviewSlice) LoadNoteAudio(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	noteAudios, err := os.NoteAudio(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range noteAudios {

			if !(o.NoteAudioUUID == rel.UUID) {
				continue
			}

			if !(o.NoteAudioVersion == rel.Version) {
				continue
			}

			rel.R.TaskAudioReviews = append(rel.R.TaskAudioReviews, o)

			o.R.NoteAudio = rel
			break
		}
	}

	return nil
}

// LoadReviewedByUser loads the taskAudioReview's ReviewedByUser into the .R struct
func (o *TaskAudioReview) LoadReviewedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ReviewedByUser = nil

	related, err := o.ReviewedByUser(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.ReviewedByTaskAudioReviews = TaskAudioReviewSlice{o}

	o.R.ReviewedByUser = related
	return nil
}

// LoadReviewedByUser loads the taskAudioReview's ReviewedByUser into the .R struct
func (os TaskAudioReviewSlice) LoadReviewedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.ReviewedByUser(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range users {
			if !o.ReviewedBy.IsValue() {
				continue
			}

			if !(o.ReviewedBy.IsValue() && o.ReviewedBy.MustGet() == rel.ID) {
				continue
			}

			rel.R.ReviewedByTaskAudioReviews = append(rel.R.ReviewedByTaskAudioReviews, o)

			o.R.ReviewedByUser = rel
			break
		}
	}

	return nil
}

type taskAudioReviewJoins[Q dialect.Joinable] struct {
	typ             string
	CompletedByUser modAs[Q, userColumns]
	NoteAudio       modAs[Q, noteAudioColumns]
	ReviewedByUser  modAs[Q, userColumns]
}

func (j taskAudioReviewJoins[Q]) aliasedAs(alias string) taskAudioReviewJoins[Q] {
	return buildTaskAudioReviewJoins[Q](buildTaskAudioReviewColumns(alias), j.typ)
}

func buildTaskAudioReviewJoins[Q dialect.Joinable](cols taskAudioReviewColumns, typ string) taskAudioReviewJoins[Q] {
	return taskAudioReviewJoins[Q]{
		typ: typ,
		CompletedByUser: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.CompletedBy),
					))
				}

				return mods
			},
		},
		NoteAudio: modAs[Q, noteAudioColumns]{
			c: NoteAudios.Columns,
			f: func(to noteAudioColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, NoteAudios.Name().As(to.Alias())).On(
						to.UUID.EQ(cols.NoteAudioUUID), to.Version.EQ(cols.NoteAudioVersion),
					))
				}

				return mods
			},
		},
		ReviewedByUser: modAs[Q, userColumns]{
			c: Users.Columns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.ReviewedBy),
					))
				}

				return mods
			},
		},
	}
}
