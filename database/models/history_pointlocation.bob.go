// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryPointlocation is an object representing the database table.
type HistoryPointlocation struct {
	Accessdesc              null.Val[string]    `db:"accessdesc" `
	Active                  null.Val[int16]     `db:"active" `
	Assignedtech            null.Val[string]    `db:"assignedtech" `
	Comments                null.Val[string]    `db:"comments" `
	Creationdate            null.Val[int64]     `db:"creationdate" `
	Creator                 null.Val[string]    `db:"creator" `
	Description             null.Val[string]    `db:"description" `
	Externalid              null.Val[string]    `db:"externalid" `
	Editdate                null.Val[int64]     `db:"editdate" `
	Editor                  null.Val[string]    `db:"editor" `
	Globalid                null.Val[string]    `db:"globalid" `
	Habitat                 null.Val[string]    `db:"habitat" `
	Jurisdiction            null.Val[string]    `db:"jurisdiction" `
	Larvinspectinterval     null.Val[int16]     `db:"larvinspectinterval" `
	Lastinspectactiontaken  null.Val[string]    `db:"lastinspectactiontaken" `
	Lastinspectactivity     null.Val[string]    `db:"lastinspectactivity" `
	Lastinspectavglarvae    null.Val[float64]   `db:"lastinspectavglarvae" `
	Lastinspectavgpupae     null.Val[float64]   `db:"lastinspectavgpupae" `
	Lastinspectbreeding     null.Val[string]    `db:"lastinspectbreeding" `
	Lastinspectconditions   null.Val[string]    `db:"lastinspectconditions" `
	Lastinspectdate         null.Val[int64]     `db:"lastinspectdate" `
	Lastinspectfieldspecies null.Val[string]    `db:"lastinspectfieldspecies" `
	Lastinspectlstages      null.Val[string]    `db:"lastinspectlstages" `
	Lasttreatactivity       null.Val[string]    `db:"lasttreatactivity" `
	Lasttreatdate           null.Val[int64]     `db:"lasttreatdate" `
	Lasttreatproduct        null.Val[string]    `db:"lasttreatproduct" `
	Lasttreatqty            null.Val[float64]   `db:"lasttreatqty" `
	Lasttreatqtyunit        null.Val[string]    `db:"lasttreatqtyunit" `
	Locationnumber          null.Val[int64]     `db:"locationnumber" `
	Name                    null.Val[string]    `db:"name" `
	Nextactiondatescheduled null.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                int32               `db:"objectid,pk" `
	Priority                null.Val[string]    `db:"priority" `
	Stype                   null.Val[string]    `db:"stype" `
	Symbology               null.Val[string]    `db:"symbology" `
	Usetype                 null.Val[string]    `db:"usetype" `
	Waterorigin             null.Val[string]    `db:"waterorigin" `
	X                       null.Val[float64]   `db:"x" `
	Y                       null.Val[float64]   `db:"y" `
	Zone                    null.Val[string]    `db:"zone" `
	Zone2                   null.Val[string]    `db:"zone2" `
	DeactivateReason        null.Val[string]    `db:"deactivate_reason" `
	Created                 null.Val[time.Time] `db:"created" `
	GeometryX               null.Val[float64]   `db:"geometry_x" `
	GeometryY               null.Val[float64]   `db:"geometry_y" `
	Scalarpriority          null.Val[int64]     `db:"scalarpriority" `
	Sourcestatus            null.Val[string]    `db:"sourcestatus" `
	Version                 int32               `db:"version,pk" `
}

// HistoryPointlocationSlice is an alias for a slice of pointers to HistoryPointlocation.
// This should almost always be used instead of []*HistoryPointlocation.
type HistoryPointlocationSlice []*HistoryPointlocation

// HistoryPointlocations contains methods to work with the history_pointlocation table
var HistoryPointlocations = psql.NewTablex[*HistoryPointlocation, HistoryPointlocationSlice, *HistoryPointlocationSetter]("", "history_pointlocation", buildHistoryPointlocationColumns("history_pointlocation"))

// HistoryPointlocationsQuery is a query on the history_pointlocation table
type HistoryPointlocationsQuery = *psql.ViewQuery[*HistoryPointlocation, HistoryPointlocationSlice]

func buildHistoryPointlocationColumns(alias string) historyPointlocationColumns {
	return historyPointlocationColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"accessdesc", "active", "assignedtech", "comments", "creationdate", "creator", "description", "externalid", "editdate", "editor", "globalid", "habitat", "jurisdiction", "larvinspectinterval", "lastinspectactiontaken", "lastinspectactivity", "lastinspectavglarvae", "lastinspectavgpupae", "lastinspectbreeding", "lastinspectconditions", "lastinspectdate", "lastinspectfieldspecies", "lastinspectlstages", "lasttreatactivity", "lasttreatdate", "lasttreatproduct", "lasttreatqty", "lasttreatqtyunit", "locationnumber", "name", "nextactiondatescheduled", "objectid", "priority", "stype", "symbology", "usetype", "waterorigin", "x", "y", "zone", "zone2", "deactivate_reason", "created", "geometry_x", "geometry_y", "scalarpriority", "sourcestatus", "version",
		).WithParent("history_pointlocation"),
		tableAlias:              alias,
		Accessdesc:              psql.Quote(alias, "accessdesc"),
		Active:                  psql.Quote(alias, "active"),
		Assignedtech:            psql.Quote(alias, "assignedtech"),
		Comments:                psql.Quote(alias, "comments"),
		Creationdate:            psql.Quote(alias, "creationdate"),
		Creator:                 psql.Quote(alias, "creator"),
		Description:             psql.Quote(alias, "description"),
		Externalid:              psql.Quote(alias, "externalid"),
		Editdate:                psql.Quote(alias, "editdate"),
		Editor:                  psql.Quote(alias, "editor"),
		Globalid:                psql.Quote(alias, "globalid"),
		Habitat:                 psql.Quote(alias, "habitat"),
		Jurisdiction:            psql.Quote(alias, "jurisdiction"),
		Larvinspectinterval:     psql.Quote(alias, "larvinspectinterval"),
		Lastinspectactiontaken:  psql.Quote(alias, "lastinspectactiontaken"),
		Lastinspectactivity:     psql.Quote(alias, "lastinspectactivity"),
		Lastinspectavglarvae:    psql.Quote(alias, "lastinspectavglarvae"),
		Lastinspectavgpupae:     psql.Quote(alias, "lastinspectavgpupae"),
		Lastinspectbreeding:     psql.Quote(alias, "lastinspectbreeding"),
		Lastinspectconditions:   psql.Quote(alias, "lastinspectconditions"),
		Lastinspectdate:         psql.Quote(alias, "lastinspectdate"),
		Lastinspectfieldspecies: psql.Quote(alias, "lastinspectfieldspecies"),
		Lastinspectlstages:      psql.Quote(alias, "lastinspectlstages"),
		Lasttreatactivity:       psql.Quote(alias, "lasttreatactivity"),
		Lasttreatdate:           psql.Quote(alias, "lasttreatdate"),
		Lasttreatproduct:        psql.Quote(alias, "lasttreatproduct"),
		Lasttreatqty:            psql.Quote(alias, "lasttreatqty"),
		Lasttreatqtyunit:        psql.Quote(alias, "lasttreatqtyunit"),
		Locationnumber:          psql.Quote(alias, "locationnumber"),
		Name:                    psql.Quote(alias, "name"),
		Nextactiondatescheduled: psql.Quote(alias, "nextactiondatescheduled"),
		Objectid:                psql.Quote(alias, "objectid"),
		Priority:                psql.Quote(alias, "priority"),
		Stype:                   psql.Quote(alias, "stype"),
		Symbology:               psql.Quote(alias, "symbology"),
		Usetype:                 psql.Quote(alias, "usetype"),
		Waterorigin:             psql.Quote(alias, "waterorigin"),
		X:                       psql.Quote(alias, "x"),
		Y:                       psql.Quote(alias, "y"),
		Zone:                    psql.Quote(alias, "zone"),
		Zone2:                   psql.Quote(alias, "zone2"),
		DeactivateReason:        psql.Quote(alias, "deactivate_reason"),
		Created:                 psql.Quote(alias, "created"),
		GeometryX:               psql.Quote(alias, "geometry_x"),
		GeometryY:               psql.Quote(alias, "geometry_y"),
		Scalarpriority:          psql.Quote(alias, "scalarpriority"),
		Sourcestatus:            psql.Quote(alias, "sourcestatus"),
		Version:                 psql.Quote(alias, "version"),
	}
}

type historyPointlocationColumns struct {
	expr.ColumnsExpr
	tableAlias              string
	Accessdesc              psql.Expression
	Active                  psql.Expression
	Assignedtech            psql.Expression
	Comments                psql.Expression
	Creationdate            psql.Expression
	Creator                 psql.Expression
	Description             psql.Expression
	Externalid              psql.Expression
	Editdate                psql.Expression
	Editor                  psql.Expression
	Globalid                psql.Expression
	Habitat                 psql.Expression
	Jurisdiction            psql.Expression
	Larvinspectinterval     psql.Expression
	Lastinspectactiontaken  psql.Expression
	Lastinspectactivity     psql.Expression
	Lastinspectavglarvae    psql.Expression
	Lastinspectavgpupae     psql.Expression
	Lastinspectbreeding     psql.Expression
	Lastinspectconditions   psql.Expression
	Lastinspectdate         psql.Expression
	Lastinspectfieldspecies psql.Expression
	Lastinspectlstages      psql.Expression
	Lasttreatactivity       psql.Expression
	Lasttreatdate           psql.Expression
	Lasttreatproduct        psql.Expression
	Lasttreatqty            psql.Expression
	Lasttreatqtyunit        psql.Expression
	Locationnumber          psql.Expression
	Name                    psql.Expression
	Nextactiondatescheduled psql.Expression
	Objectid                psql.Expression
	Priority                psql.Expression
	Stype                   psql.Expression
	Symbology               psql.Expression
	Usetype                 psql.Expression
	Waterorigin             psql.Expression
	X                       psql.Expression
	Y                       psql.Expression
	Zone                    psql.Expression
	Zone2                   psql.Expression
	DeactivateReason        psql.Expression
	Created                 psql.Expression
	GeometryX               psql.Expression
	GeometryY               psql.Expression
	Scalarpriority          psql.Expression
	Sourcestatus            psql.Expression
	Version                 psql.Expression
}

func (c historyPointlocationColumns) Alias() string {
	return c.tableAlias
}

func (historyPointlocationColumns) AliasedAs(alias string) historyPointlocationColumns {
	return buildHistoryPointlocationColumns(alias)
}

// HistoryPointlocationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryPointlocationSetter struct {
	Accessdesc              omitnull.Val[string]    `db:"accessdesc" `
	Active                  omitnull.Val[int16]     `db:"active" `
	Assignedtech            omitnull.Val[string]    `db:"assignedtech" `
	Comments                omitnull.Val[string]    `db:"comments" `
	Creationdate            omitnull.Val[int64]     `db:"creationdate" `
	Creator                 omitnull.Val[string]    `db:"creator" `
	Description             omitnull.Val[string]    `db:"description" `
	Externalid              omitnull.Val[string]    `db:"externalid" `
	Editdate                omitnull.Val[int64]     `db:"editdate" `
	Editor                  omitnull.Val[string]    `db:"editor" `
	Globalid                omitnull.Val[string]    `db:"globalid" `
	Habitat                 omitnull.Val[string]    `db:"habitat" `
	Jurisdiction            omitnull.Val[string]    `db:"jurisdiction" `
	Larvinspectinterval     omitnull.Val[int16]     `db:"larvinspectinterval" `
	Lastinspectactiontaken  omitnull.Val[string]    `db:"lastinspectactiontaken" `
	Lastinspectactivity     omitnull.Val[string]    `db:"lastinspectactivity" `
	Lastinspectavglarvae    omitnull.Val[float64]   `db:"lastinspectavglarvae" `
	Lastinspectavgpupae     omitnull.Val[float64]   `db:"lastinspectavgpupae" `
	Lastinspectbreeding     omitnull.Val[string]    `db:"lastinspectbreeding" `
	Lastinspectconditions   omitnull.Val[string]    `db:"lastinspectconditions" `
	Lastinspectdate         omitnull.Val[int64]     `db:"lastinspectdate" `
	Lastinspectfieldspecies omitnull.Val[string]    `db:"lastinspectfieldspecies" `
	Lastinspectlstages      omitnull.Val[string]    `db:"lastinspectlstages" `
	Lasttreatactivity       omitnull.Val[string]    `db:"lasttreatactivity" `
	Lasttreatdate           omitnull.Val[int64]     `db:"lasttreatdate" `
	Lasttreatproduct        omitnull.Val[string]    `db:"lasttreatproduct" `
	Lasttreatqty            omitnull.Val[float64]   `db:"lasttreatqty" `
	Lasttreatqtyunit        omitnull.Val[string]    `db:"lasttreatqtyunit" `
	Locationnumber          omitnull.Val[int64]     `db:"locationnumber" `
	Name                    omitnull.Val[string]    `db:"name" `
	Nextactiondatescheduled omitnull.Val[int64]     `db:"nextactiondatescheduled" `
	Objectid                omit.Val[int32]         `db:"objectid,pk" `
	Priority                omitnull.Val[string]    `db:"priority" `
	Stype                   omitnull.Val[string]    `db:"stype" `
	Symbology               omitnull.Val[string]    `db:"symbology" `
	Usetype                 omitnull.Val[string]    `db:"usetype" `
	Waterorigin             omitnull.Val[string]    `db:"waterorigin" `
	X                       omitnull.Val[float64]   `db:"x" `
	Y                       omitnull.Val[float64]   `db:"y" `
	Zone                    omitnull.Val[string]    `db:"zone" `
	Zone2                   omitnull.Val[string]    `db:"zone2" `
	DeactivateReason        omitnull.Val[string]    `db:"deactivate_reason" `
	Created                 omitnull.Val[time.Time] `db:"created" `
	GeometryX               omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY               omitnull.Val[float64]   `db:"geometry_y" `
	Scalarpriority          omitnull.Val[int64]     `db:"scalarpriority" `
	Sourcestatus            omitnull.Val[string]    `db:"sourcestatus" `
	Version                 omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryPointlocationSetter) SetColumns() []string {
	vals := make([]string, 0, 48)
	if !s.Accessdesc.IsUnset() {
		vals = append(vals, "accessdesc")
	}
	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}
	if !s.Assignedtech.IsUnset() {
		vals = append(vals, "assignedtech")
	}
	if !s.Comments.IsUnset() {
		vals = append(vals, "comments")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if !s.Externalid.IsUnset() {
		vals = append(vals, "externalid")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Habitat.IsUnset() {
		vals = append(vals, "habitat")
	}
	if !s.Jurisdiction.IsUnset() {
		vals = append(vals, "jurisdiction")
	}
	if !s.Larvinspectinterval.IsUnset() {
		vals = append(vals, "larvinspectinterval")
	}
	if !s.Lastinspectactiontaken.IsUnset() {
		vals = append(vals, "lastinspectactiontaken")
	}
	if !s.Lastinspectactivity.IsUnset() {
		vals = append(vals, "lastinspectactivity")
	}
	if !s.Lastinspectavglarvae.IsUnset() {
		vals = append(vals, "lastinspectavglarvae")
	}
	if !s.Lastinspectavgpupae.IsUnset() {
		vals = append(vals, "lastinspectavgpupae")
	}
	if !s.Lastinspectbreeding.IsUnset() {
		vals = append(vals, "lastinspectbreeding")
	}
	if !s.Lastinspectconditions.IsUnset() {
		vals = append(vals, "lastinspectconditions")
	}
	if !s.Lastinspectdate.IsUnset() {
		vals = append(vals, "lastinspectdate")
	}
	if !s.Lastinspectfieldspecies.IsUnset() {
		vals = append(vals, "lastinspectfieldspecies")
	}
	if !s.Lastinspectlstages.IsUnset() {
		vals = append(vals, "lastinspectlstages")
	}
	if !s.Lasttreatactivity.IsUnset() {
		vals = append(vals, "lasttreatactivity")
	}
	if !s.Lasttreatdate.IsUnset() {
		vals = append(vals, "lasttreatdate")
	}
	if !s.Lasttreatproduct.IsUnset() {
		vals = append(vals, "lasttreatproduct")
	}
	if !s.Lasttreatqty.IsUnset() {
		vals = append(vals, "lasttreatqty")
	}
	if !s.Lasttreatqtyunit.IsUnset() {
		vals = append(vals, "lasttreatqtyunit")
	}
	if !s.Locationnumber.IsUnset() {
		vals = append(vals, "locationnumber")
	}
	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		vals = append(vals, "nextactiondatescheduled")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Priority.IsUnset() {
		vals = append(vals, "priority")
	}
	if !s.Stype.IsUnset() {
		vals = append(vals, "stype")
	}
	if !s.Symbology.IsUnset() {
		vals = append(vals, "symbology")
	}
	if !s.Usetype.IsUnset() {
		vals = append(vals, "usetype")
	}
	if !s.Waterorigin.IsUnset() {
		vals = append(vals, "waterorigin")
	}
	if !s.X.IsUnset() {
		vals = append(vals, "x")
	}
	if !s.Y.IsUnset() {
		vals = append(vals, "y")
	}
	if !s.Zone.IsUnset() {
		vals = append(vals, "zone")
	}
	if !s.Zone2.IsUnset() {
		vals = append(vals, "zone2")
	}
	if !s.DeactivateReason.IsUnset() {
		vals = append(vals, "deactivate_reason")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.Scalarpriority.IsUnset() {
		vals = append(vals, "scalarpriority")
	}
	if !s.Sourcestatus.IsUnset() {
		vals = append(vals, "sourcestatus")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryPointlocationSetter) Overwrite(t *HistoryPointlocation) {
	if !s.Accessdesc.IsUnset() {
		t.Accessdesc = s.Accessdesc.MustGetNull()
	}
	if !s.Active.IsUnset() {
		t.Active = s.Active.MustGetNull()
	}
	if !s.Assignedtech.IsUnset() {
		t.Assignedtech = s.Assignedtech.MustGetNull()
	}
	if !s.Comments.IsUnset() {
		t.Comments = s.Comments.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if !s.Externalid.IsUnset() {
		t.Externalid = s.Externalid.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Habitat.IsUnset() {
		t.Habitat = s.Habitat.MustGetNull()
	}
	if !s.Jurisdiction.IsUnset() {
		t.Jurisdiction = s.Jurisdiction.MustGetNull()
	}
	if !s.Larvinspectinterval.IsUnset() {
		t.Larvinspectinterval = s.Larvinspectinterval.MustGetNull()
	}
	if !s.Lastinspectactiontaken.IsUnset() {
		t.Lastinspectactiontaken = s.Lastinspectactiontaken.MustGetNull()
	}
	if !s.Lastinspectactivity.IsUnset() {
		t.Lastinspectactivity = s.Lastinspectactivity.MustGetNull()
	}
	if !s.Lastinspectavglarvae.IsUnset() {
		t.Lastinspectavglarvae = s.Lastinspectavglarvae.MustGetNull()
	}
	if !s.Lastinspectavgpupae.IsUnset() {
		t.Lastinspectavgpupae = s.Lastinspectavgpupae.MustGetNull()
	}
	if !s.Lastinspectbreeding.IsUnset() {
		t.Lastinspectbreeding = s.Lastinspectbreeding.MustGetNull()
	}
	if !s.Lastinspectconditions.IsUnset() {
		t.Lastinspectconditions = s.Lastinspectconditions.MustGetNull()
	}
	if !s.Lastinspectdate.IsUnset() {
		t.Lastinspectdate = s.Lastinspectdate.MustGetNull()
	}
	if !s.Lastinspectfieldspecies.IsUnset() {
		t.Lastinspectfieldspecies = s.Lastinspectfieldspecies.MustGetNull()
	}
	if !s.Lastinspectlstages.IsUnset() {
		t.Lastinspectlstages = s.Lastinspectlstages.MustGetNull()
	}
	if !s.Lasttreatactivity.IsUnset() {
		t.Lasttreatactivity = s.Lasttreatactivity.MustGetNull()
	}
	if !s.Lasttreatdate.IsUnset() {
		t.Lasttreatdate = s.Lasttreatdate.MustGetNull()
	}
	if !s.Lasttreatproduct.IsUnset() {
		t.Lasttreatproduct = s.Lasttreatproduct.MustGetNull()
	}
	if !s.Lasttreatqty.IsUnset() {
		t.Lasttreatqty = s.Lasttreatqty.MustGetNull()
	}
	if !s.Lasttreatqtyunit.IsUnset() {
		t.Lasttreatqtyunit = s.Lasttreatqtyunit.MustGetNull()
	}
	if !s.Locationnumber.IsUnset() {
		t.Locationnumber = s.Locationnumber.MustGetNull()
	}
	if !s.Name.IsUnset() {
		t.Name = s.Name.MustGetNull()
	}
	if !s.Nextactiondatescheduled.IsUnset() {
		t.Nextactiondatescheduled = s.Nextactiondatescheduled.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Priority.IsUnset() {
		t.Priority = s.Priority.MustGetNull()
	}
	if !s.Stype.IsUnset() {
		t.Stype = s.Stype.MustGetNull()
	}
	if !s.Symbology.IsUnset() {
		t.Symbology = s.Symbology.MustGetNull()
	}
	if !s.Usetype.IsUnset() {
		t.Usetype = s.Usetype.MustGetNull()
	}
	if !s.Waterorigin.IsUnset() {
		t.Waterorigin = s.Waterorigin.MustGetNull()
	}
	if !s.X.IsUnset() {
		t.X = s.X.MustGetNull()
	}
	if !s.Y.IsUnset() {
		t.Y = s.Y.MustGetNull()
	}
	if !s.Zone.IsUnset() {
		t.Zone = s.Zone.MustGetNull()
	}
	if !s.Zone2.IsUnset() {
		t.Zone2 = s.Zone2.MustGetNull()
	}
	if !s.DeactivateReason.IsUnset() {
		t.DeactivateReason = s.DeactivateReason.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.Scalarpriority.IsUnset() {
		t.Scalarpriority = s.Scalarpriority.MustGetNull()
	}
	if !s.Sourcestatus.IsUnset() {
		t.Sourcestatus = s.Sourcestatus.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryPointlocationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryPointlocations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 48)
		if !s.Accessdesc.IsUnset() {
			vals[0] = psql.Arg(s.Accessdesc.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Active.IsUnset() {
			vals[1] = psql.Arg(s.Active.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Assignedtech.IsUnset() {
			vals[2] = psql.Arg(s.Assignedtech.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Comments.IsUnset() {
			vals[3] = psql.Arg(s.Comments.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[4] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[5] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Description.IsUnset() {
			vals[6] = psql.Arg(s.Description.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Externalid.IsUnset() {
			vals[7] = psql.Arg(s.Externalid.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[8] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[9] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[10] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Habitat.IsUnset() {
			vals[11] = psql.Arg(s.Habitat.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Jurisdiction.IsUnset() {
			vals[12] = psql.Arg(s.Jurisdiction.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Larvinspectinterval.IsUnset() {
			vals[13] = psql.Arg(s.Larvinspectinterval.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectactiontaken.IsUnset() {
			vals[14] = psql.Arg(s.Lastinspectactiontaken.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectactivity.IsUnset() {
			vals[15] = psql.Arg(s.Lastinspectactivity.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectavglarvae.IsUnset() {
			vals[16] = psql.Arg(s.Lastinspectavglarvae.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectavgpupae.IsUnset() {
			vals[17] = psql.Arg(s.Lastinspectavgpupae.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectbreeding.IsUnset() {
			vals[18] = psql.Arg(s.Lastinspectbreeding.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectconditions.IsUnset() {
			vals[19] = psql.Arg(s.Lastinspectconditions.MustGetNull())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectdate.IsUnset() {
			vals[20] = psql.Arg(s.Lastinspectdate.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectfieldspecies.IsUnset() {
			vals[21] = psql.Arg(s.Lastinspectfieldspecies.MustGetNull())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		if !s.Lastinspectlstages.IsUnset() {
			vals[22] = psql.Arg(s.Lastinspectlstages.MustGetNull())
		} else {
			vals[22] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatactivity.IsUnset() {
			vals[23] = psql.Arg(s.Lasttreatactivity.MustGetNull())
		} else {
			vals[23] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatdate.IsUnset() {
			vals[24] = psql.Arg(s.Lasttreatdate.MustGetNull())
		} else {
			vals[24] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatproduct.IsUnset() {
			vals[25] = psql.Arg(s.Lasttreatproduct.MustGetNull())
		} else {
			vals[25] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatqty.IsUnset() {
			vals[26] = psql.Arg(s.Lasttreatqty.MustGetNull())
		} else {
			vals[26] = psql.Raw("DEFAULT")
		}

		if !s.Lasttreatqtyunit.IsUnset() {
			vals[27] = psql.Arg(s.Lasttreatqtyunit.MustGetNull())
		} else {
			vals[27] = psql.Raw("DEFAULT")
		}

		if !s.Locationnumber.IsUnset() {
			vals[28] = psql.Arg(s.Locationnumber.MustGetNull())
		} else {
			vals[28] = psql.Raw("DEFAULT")
		}

		if !s.Name.IsUnset() {
			vals[29] = psql.Arg(s.Name.MustGetNull())
		} else {
			vals[29] = psql.Raw("DEFAULT")
		}

		if !s.Nextactiondatescheduled.IsUnset() {
			vals[30] = psql.Arg(s.Nextactiondatescheduled.MustGetNull())
		} else {
			vals[30] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[31] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[31] = psql.Raw("DEFAULT")
		}

		if !s.Priority.IsUnset() {
			vals[32] = psql.Arg(s.Priority.MustGetNull())
		} else {
			vals[32] = psql.Raw("DEFAULT")
		}

		if !s.Stype.IsUnset() {
			vals[33] = psql.Arg(s.Stype.MustGetNull())
		} else {
			vals[33] = psql.Raw("DEFAULT")
		}

		if !s.Symbology.IsUnset() {
			vals[34] = psql.Arg(s.Symbology.MustGetNull())
		} else {
			vals[34] = psql.Raw("DEFAULT")
		}

		if !s.Usetype.IsUnset() {
			vals[35] = psql.Arg(s.Usetype.MustGetNull())
		} else {
			vals[35] = psql.Raw("DEFAULT")
		}

		if !s.Waterorigin.IsUnset() {
			vals[36] = psql.Arg(s.Waterorigin.MustGetNull())
		} else {
			vals[36] = psql.Raw("DEFAULT")
		}

		if !s.X.IsUnset() {
			vals[37] = psql.Arg(s.X.MustGetNull())
		} else {
			vals[37] = psql.Raw("DEFAULT")
		}

		if !s.Y.IsUnset() {
			vals[38] = psql.Arg(s.Y.MustGetNull())
		} else {
			vals[38] = psql.Raw("DEFAULT")
		}

		if !s.Zone.IsUnset() {
			vals[39] = psql.Arg(s.Zone.MustGetNull())
		} else {
			vals[39] = psql.Raw("DEFAULT")
		}

		if !s.Zone2.IsUnset() {
			vals[40] = psql.Arg(s.Zone2.MustGetNull())
		} else {
			vals[40] = psql.Raw("DEFAULT")
		}

		if !s.DeactivateReason.IsUnset() {
			vals[41] = psql.Arg(s.DeactivateReason.MustGetNull())
		} else {
			vals[41] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[42] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[42] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[43] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[43] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[44] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[44] = psql.Raw("DEFAULT")
		}

		if !s.Scalarpriority.IsUnset() {
			vals[45] = psql.Arg(s.Scalarpriority.MustGetNull())
		} else {
			vals[45] = psql.Raw("DEFAULT")
		}

		if !s.Sourcestatus.IsUnset() {
			vals[46] = psql.Arg(s.Sourcestatus.MustGetNull())
		} else {
			vals[46] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[47] = psql.Arg(s.Version.MustGet())
		} else {
			vals[47] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryPointlocationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryPointlocationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 48)

	if !s.Accessdesc.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "accessdesc")...),
			psql.Arg(s.Accessdesc),
		}})
	}

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Assignedtech.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "assignedtech")...),
			psql.Arg(s.Assignedtech),
		}})
	}

	if !s.Comments.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "comments")...),
			psql.Arg(s.Comments),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if !s.Externalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "externalid")...),
			psql.Arg(s.Externalid),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Habitat.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "habitat")...),
			psql.Arg(s.Habitat),
		}})
	}

	if !s.Jurisdiction.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "jurisdiction")...),
			psql.Arg(s.Jurisdiction),
		}})
	}

	if !s.Larvinspectinterval.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "larvinspectinterval")...),
			psql.Arg(s.Larvinspectinterval),
		}})
	}

	if !s.Lastinspectactiontaken.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectactiontaken")...),
			psql.Arg(s.Lastinspectactiontaken),
		}})
	}

	if !s.Lastinspectactivity.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectactivity")...),
			psql.Arg(s.Lastinspectactivity),
		}})
	}

	if !s.Lastinspectavglarvae.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectavglarvae")...),
			psql.Arg(s.Lastinspectavglarvae),
		}})
	}

	if !s.Lastinspectavgpupae.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectavgpupae")...),
			psql.Arg(s.Lastinspectavgpupae),
		}})
	}

	if !s.Lastinspectbreeding.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectbreeding")...),
			psql.Arg(s.Lastinspectbreeding),
		}})
	}

	if !s.Lastinspectconditions.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectconditions")...),
			psql.Arg(s.Lastinspectconditions),
		}})
	}

	if !s.Lastinspectdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectdate")...),
			psql.Arg(s.Lastinspectdate),
		}})
	}

	if !s.Lastinspectfieldspecies.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectfieldspecies")...),
			psql.Arg(s.Lastinspectfieldspecies),
		}})
	}

	if !s.Lastinspectlstages.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lastinspectlstages")...),
			psql.Arg(s.Lastinspectlstages),
		}})
	}

	if !s.Lasttreatactivity.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatactivity")...),
			psql.Arg(s.Lasttreatactivity),
		}})
	}

	if !s.Lasttreatdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatdate")...),
			psql.Arg(s.Lasttreatdate),
		}})
	}

	if !s.Lasttreatproduct.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatproduct")...),
			psql.Arg(s.Lasttreatproduct),
		}})
	}

	if !s.Lasttreatqty.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatqty")...),
			psql.Arg(s.Lasttreatqty),
		}})
	}

	if !s.Lasttreatqtyunit.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "lasttreatqtyunit")...),
			psql.Arg(s.Lasttreatqtyunit),
		}})
	}

	if !s.Locationnumber.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "locationnumber")...),
			psql.Arg(s.Locationnumber),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Nextactiondatescheduled.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "nextactiondatescheduled")...),
			psql.Arg(s.Nextactiondatescheduled),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Priority.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "priority")...),
			psql.Arg(s.Priority),
		}})
	}

	if !s.Stype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "stype")...),
			psql.Arg(s.Stype),
		}})
	}

	if !s.Symbology.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "symbology")...),
			psql.Arg(s.Symbology),
		}})
	}

	if !s.Usetype.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "usetype")...),
			psql.Arg(s.Usetype),
		}})
	}

	if !s.Waterorigin.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "waterorigin")...),
			psql.Arg(s.Waterorigin),
		}})
	}

	if !s.X.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "x")...),
			psql.Arg(s.X),
		}})
	}

	if !s.Y.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "y")...),
			psql.Arg(s.Y),
		}})
	}

	if !s.Zone.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone")...),
			psql.Arg(s.Zone),
		}})
	}

	if !s.Zone2.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "zone2")...),
			psql.Arg(s.Zone2),
		}})
	}

	if !s.DeactivateReason.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deactivate_reason")...),
			psql.Arg(s.DeactivateReason),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.Scalarpriority.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "scalarpriority")...),
			psql.Arg(s.Scalarpriority),
		}})
	}

	if !s.Sourcestatus.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "sourcestatus")...),
			psql.Arg(s.Sourcestatus),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryPointlocation retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryPointlocation(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryPointlocation, error) {
	if len(cols) == 0 {
		return HistoryPointlocations.Query(
			sm.Where(HistoryPointlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryPointlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryPointlocations.Query(
		sm.Where(HistoryPointlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryPointlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryPointlocations.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryPointlocationExists checks the presence of a single record by primary key
func HistoryPointlocationExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryPointlocations.Query(
		sm.Where(HistoryPointlocations.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryPointlocations.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryPointlocation is retrieved from the database
func (o *HistoryPointlocation) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryPointlocations.AfterSelectHooks.RunHooks(ctx, exec, HistoryPointlocationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryPointlocations.AfterInsertHooks.RunHooks(ctx, exec, HistoryPointlocationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryPointlocations.AfterUpdateHooks.RunHooks(ctx, exec, HistoryPointlocationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryPointlocations.AfterDeleteHooks.RunHooks(ctx, exec, HistoryPointlocationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryPointlocation
func (o *HistoryPointlocation) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryPointlocation) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_pointlocation", "objectid"), psql.Quote("history_pointlocation", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryPointlocation
func (o *HistoryPointlocation) Update(ctx context.Context, exec bob.Executor, s *HistoryPointlocationSetter) error {
	v, err := HistoryPointlocations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryPointlocation record with an executor
func (o *HistoryPointlocation) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryPointlocations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryPointlocation using the executor
func (o *HistoryPointlocation) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryPointlocations.Query(
		sm.Where(HistoryPointlocations.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryPointlocations.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryPointlocationSlice is retrieved from the database
func (o HistoryPointlocationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryPointlocations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryPointlocations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryPointlocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryPointlocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryPointlocationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_pointlocation", "objectid"), psql.Quote("history_pointlocation", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryPointlocationSlice) copyMatchingRows(from ...*HistoryPointlocation) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryPointlocationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryPointlocations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryPointlocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryPointlocation:
				o.copyMatchingRows(retrieved...)
			case HistoryPointlocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryPointlocation or a slice of HistoryPointlocation
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryPointlocations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryPointlocationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryPointlocations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryPointlocation:
				o.copyMatchingRows(retrieved)
			case []*HistoryPointlocation:
				o.copyMatchingRows(retrieved...)
			case HistoryPointlocationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryPointlocation or a slice of HistoryPointlocation
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryPointlocations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryPointlocationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryPointlocationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryPointlocations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryPointlocationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryPointlocations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryPointlocationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryPointlocations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyPointlocationWhere[Q psql.Filterable] struct {
	Accessdesc              psql.WhereNullMod[Q, string]
	Active                  psql.WhereNullMod[Q, int16]
	Assignedtech            psql.WhereNullMod[Q, string]
	Comments                psql.WhereNullMod[Q, string]
	Creationdate            psql.WhereNullMod[Q, int64]
	Creator                 psql.WhereNullMod[Q, string]
	Description             psql.WhereNullMod[Q, string]
	Externalid              psql.WhereNullMod[Q, string]
	Editdate                psql.WhereNullMod[Q, int64]
	Editor                  psql.WhereNullMod[Q, string]
	Globalid                psql.WhereNullMod[Q, string]
	Habitat                 psql.WhereNullMod[Q, string]
	Jurisdiction            psql.WhereNullMod[Q, string]
	Larvinspectinterval     psql.WhereNullMod[Q, int16]
	Lastinspectactiontaken  psql.WhereNullMod[Q, string]
	Lastinspectactivity     psql.WhereNullMod[Q, string]
	Lastinspectavglarvae    psql.WhereNullMod[Q, float64]
	Lastinspectavgpupae     psql.WhereNullMod[Q, float64]
	Lastinspectbreeding     psql.WhereNullMod[Q, string]
	Lastinspectconditions   psql.WhereNullMod[Q, string]
	Lastinspectdate         psql.WhereNullMod[Q, int64]
	Lastinspectfieldspecies psql.WhereNullMod[Q, string]
	Lastinspectlstages      psql.WhereNullMod[Q, string]
	Lasttreatactivity       psql.WhereNullMod[Q, string]
	Lasttreatdate           psql.WhereNullMod[Q, int64]
	Lasttreatproduct        psql.WhereNullMod[Q, string]
	Lasttreatqty            psql.WhereNullMod[Q, float64]
	Lasttreatqtyunit        psql.WhereNullMod[Q, string]
	Locationnumber          psql.WhereNullMod[Q, int64]
	Name                    psql.WhereNullMod[Q, string]
	Nextactiondatescheduled psql.WhereNullMod[Q, int64]
	Objectid                psql.WhereMod[Q, int32]
	Priority                psql.WhereNullMod[Q, string]
	Stype                   psql.WhereNullMod[Q, string]
	Symbology               psql.WhereNullMod[Q, string]
	Usetype                 psql.WhereNullMod[Q, string]
	Waterorigin             psql.WhereNullMod[Q, string]
	X                       psql.WhereNullMod[Q, float64]
	Y                       psql.WhereNullMod[Q, float64]
	Zone                    psql.WhereNullMod[Q, string]
	Zone2                   psql.WhereNullMod[Q, string]
	DeactivateReason        psql.WhereNullMod[Q, string]
	Created                 psql.WhereNullMod[Q, time.Time]
	GeometryX               psql.WhereNullMod[Q, float64]
	GeometryY               psql.WhereNullMod[Q, float64]
	Scalarpriority          psql.WhereNullMod[Q, int64]
	Sourcestatus            psql.WhereNullMod[Q, string]
	Version                 psql.WhereMod[Q, int32]
}

func (historyPointlocationWhere[Q]) AliasedAs(alias string) historyPointlocationWhere[Q] {
	return buildHistoryPointlocationWhere[Q](buildHistoryPointlocationColumns(alias))
}

func buildHistoryPointlocationWhere[Q psql.Filterable](cols historyPointlocationColumns) historyPointlocationWhere[Q] {
	return historyPointlocationWhere[Q]{
		Accessdesc:              psql.WhereNull[Q, string](cols.Accessdesc),
		Active:                  psql.WhereNull[Q, int16](cols.Active),
		Assignedtech:            psql.WhereNull[Q, string](cols.Assignedtech),
		Comments:                psql.WhereNull[Q, string](cols.Comments),
		Creationdate:            psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:                 psql.WhereNull[Q, string](cols.Creator),
		Description:             psql.WhereNull[Q, string](cols.Description),
		Externalid:              psql.WhereNull[Q, string](cols.Externalid),
		Editdate:                psql.WhereNull[Q, int64](cols.Editdate),
		Editor:                  psql.WhereNull[Q, string](cols.Editor),
		Globalid:                psql.WhereNull[Q, string](cols.Globalid),
		Habitat:                 psql.WhereNull[Q, string](cols.Habitat),
		Jurisdiction:            psql.WhereNull[Q, string](cols.Jurisdiction),
		Larvinspectinterval:     psql.WhereNull[Q, int16](cols.Larvinspectinterval),
		Lastinspectactiontaken:  psql.WhereNull[Q, string](cols.Lastinspectactiontaken),
		Lastinspectactivity:     psql.WhereNull[Q, string](cols.Lastinspectactivity),
		Lastinspectavglarvae:    psql.WhereNull[Q, float64](cols.Lastinspectavglarvae),
		Lastinspectavgpupae:     psql.WhereNull[Q, float64](cols.Lastinspectavgpupae),
		Lastinspectbreeding:     psql.WhereNull[Q, string](cols.Lastinspectbreeding),
		Lastinspectconditions:   psql.WhereNull[Q, string](cols.Lastinspectconditions),
		Lastinspectdate:         psql.WhereNull[Q, int64](cols.Lastinspectdate),
		Lastinspectfieldspecies: psql.WhereNull[Q, string](cols.Lastinspectfieldspecies),
		Lastinspectlstages:      psql.WhereNull[Q, string](cols.Lastinspectlstages),
		Lasttreatactivity:       psql.WhereNull[Q, string](cols.Lasttreatactivity),
		Lasttreatdate:           psql.WhereNull[Q, int64](cols.Lasttreatdate),
		Lasttreatproduct:        psql.WhereNull[Q, string](cols.Lasttreatproduct),
		Lasttreatqty:            psql.WhereNull[Q, float64](cols.Lasttreatqty),
		Lasttreatqtyunit:        psql.WhereNull[Q, string](cols.Lasttreatqtyunit),
		Locationnumber:          psql.WhereNull[Q, int64](cols.Locationnumber),
		Name:                    psql.WhereNull[Q, string](cols.Name),
		Nextactiondatescheduled: psql.WhereNull[Q, int64](cols.Nextactiondatescheduled),
		Objectid:                psql.Where[Q, int32](cols.Objectid),
		Priority:                psql.WhereNull[Q, string](cols.Priority),
		Stype:                   psql.WhereNull[Q, string](cols.Stype),
		Symbology:               psql.WhereNull[Q, string](cols.Symbology),
		Usetype:                 psql.WhereNull[Q, string](cols.Usetype),
		Waterorigin:             psql.WhereNull[Q, string](cols.Waterorigin),
		X:                       psql.WhereNull[Q, float64](cols.X),
		Y:                       psql.WhereNull[Q, float64](cols.Y),
		Zone:                    psql.WhereNull[Q, string](cols.Zone),
		Zone2:                   psql.WhereNull[Q, string](cols.Zone2),
		DeactivateReason:        psql.WhereNull[Q, string](cols.DeactivateReason),
		Created:                 psql.WhereNull[Q, time.Time](cols.Created),
		GeometryX:               psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:               psql.WhereNull[Q, float64](cols.GeometryY),
		Scalarpriority:          psql.WhereNull[Q, int64](cols.Scalarpriority),
		Sourcestatus:            psql.WhereNull[Q, string](cols.Sourcestatus),
		Version:                 psql.Where[Q, int32](cols.Version),
	}
}
