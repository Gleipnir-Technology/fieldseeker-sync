// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSZones2 is an object representing the database table.
type FSZones2 struct {
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	Globalid       null.Val[string]  `db:"globalid" `
	Name           null.Val[string]  `db:"name" `
	Objectid       int32             `db:"objectid,pk" `
	ShapeArea      null.Val[float64] `db:"shape__area" `
	ShapeLength    null.Val[float64] `db:"shape__length" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSZones2Slice is an alias for a slice of pointers to FSZones2.
// This should almost always be used instead of []*FSZones2.
type FSZones2Slice []*FSZones2

// FSZones2s contains methods to work with the fs_zones2 table
var FSZones2s = psql.NewTablex[*FSZones2, FSZones2Slice, *FSZones2Setter]("", "fs_zones2", buildFSZones2Columns("fs_zones2"))

// FSZones2sQuery is a query on the fs_zones2 table
type FSZones2sQuery = *psql.ViewQuery[*FSZones2, FSZones2Slice]

func buildFSZones2Columns(alias string) fsZones2Columns {
	return fsZones2Columns{
		ColumnsExpr: expr.NewColumnsExpr(
			"creationdate", "creator", "editdate", "editor", "globalid", "name", "objectid", "shape__area", "shape__length", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_zones2"),
		tableAlias:     alias,
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Name:           psql.Quote(alias, "name"),
		Objectid:       psql.Quote(alias, "objectid"),
		ShapeArea:      psql.Quote(alias, "shape__area"),
		ShapeLength:    psql.Quote(alias, "shape__length"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsZones2Columns struct {
	expr.ColumnsExpr
	tableAlias     string
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Name           psql.Expression
	Objectid       psql.Expression
	ShapeArea      psql.Expression
	ShapeLength    psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsZones2Columns) Alias() string {
	return c.tableAlias
}

func (fsZones2Columns) AliasedAs(alias string) fsZones2Columns {
	return buildFSZones2Columns(alias)
}

// FSZones2Setter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSZones2Setter struct {
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Name           omitnull.Val[string]  `db:"name" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	ShapeArea      omitnull.Val[float64] `db:"shape__area" `
	ShapeLength    omitnull.Val[float64] `db:"shape__length" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSZones2Setter) SetColumns() []string {
	vals := make([]string, 0, 16)
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.ShapeArea.IsUnset() {
		vals = append(vals, "shape__area")
	}
	if !s.ShapeLength.IsUnset() {
		vals = append(vals, "shape__length")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSZones2Setter) Overwrite(t *FSZones2) {
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Name.IsUnset() {
		t.Name = s.Name.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.ShapeArea.IsUnset() {
		t.ShapeArea = s.ShapeArea.MustGetNull()
	}
	if !s.ShapeLength.IsUnset() {
		t.ShapeLength = s.ShapeLength.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSZones2Setter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSZones2s.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 16)
		if !s.Creationdate.IsUnset() {
			vals[0] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[1] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[2] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[3] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[4] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Name.IsUnset() {
			vals[5] = psql.Arg(s.Name.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[6] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.ShapeArea.IsUnset() {
			vals[7] = psql.Arg(s.ShapeArea.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.ShapeLength.IsUnset() {
			vals[8] = psql.Arg(s.ShapeLength.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[9] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[10] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[11] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[12] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[13] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[14] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[15] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSZones2Setter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSZones2Setter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 16)

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.ShapeArea.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__area")...),
			psql.Arg(s.ShapeArea),
		}})
	}

	if !s.ShapeLength.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__length")...),
			psql.Arg(s.ShapeLength),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSZones2 retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSZones2(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSZones2, error) {
	if len(cols) == 0 {
		return FSZones2s.Query(
			sm.Where(FSZones2s.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSZones2s.Query(
		sm.Where(FSZones2s.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSZones2s.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSZones2Exists checks the presence of a single record by primary key
func FSZones2Exists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSZones2s.Query(
		sm.Where(FSZones2s.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSZones2 is retrieved from the database
func (o *FSZones2) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSZones2s.AfterSelectHooks.RunHooks(ctx, exec, FSZones2Slice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSZones2s.AfterInsertHooks.RunHooks(ctx, exec, FSZones2Slice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSZones2s.AfterUpdateHooks.RunHooks(ctx, exec, FSZones2Slice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSZones2s.AfterDeleteHooks.RunHooks(ctx, exec, FSZones2Slice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSZones2
func (o *FSZones2) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSZones2) pkEQ() dialect.Expression {
	return psql.Quote("fs_zones2", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSZones2
func (o *FSZones2) Update(ctx context.Context, exec bob.Executor, s *FSZones2Setter) error {
	v, err := FSZones2s.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSZones2 record with an executor
func (o *FSZones2) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSZones2s.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSZones2 using the executor
func (o *FSZones2) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSZones2s.Query(
		sm.Where(FSZones2s.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSZones2Slice is retrieved from the database
func (o FSZones2Slice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSZones2s.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSZones2s.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSZones2s.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSZones2s.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSZones2Slice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_zones2", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSZones2Slice) copyMatchingRows(from ...*FSZones2) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSZones2Slice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSZones2s.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSZones2:
				o.copyMatchingRows(retrieved)
			case []*FSZones2:
				o.copyMatchingRows(retrieved...)
			case FSZones2Slice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSZones2 or a slice of FSZones2
				// then run the AfterUpdateHooks on the slice
				_, err = FSZones2s.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSZones2Slice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSZones2s.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSZones2:
				o.copyMatchingRows(retrieved)
			case []*FSZones2:
				o.copyMatchingRows(retrieved...)
			case FSZones2Slice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSZones2 or a slice of FSZones2
				// then run the AfterDeleteHooks on the slice
				_, err = FSZones2s.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSZones2Slice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSZones2Setter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSZones2s.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSZones2Slice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSZones2s.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSZones2Slice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSZones2s.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsZones2Where[Q psql.Filterable] struct {
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Name           psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	ShapeArea      psql.WhereNullMod[Q, float64]
	ShapeLength    psql.WhereNullMod[Q, float64]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsZones2Where[Q]) AliasedAs(alias string) fsZones2Where[Q] {
	return buildFSZones2Where[Q](buildFSZones2Columns(alias))
}

func buildFSZones2Where[Q psql.Filterable](cols fsZones2Columns) fsZones2Where[Q] {
	return fsZones2Where[Q]{
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Name:           psql.WhereNull[Q, string](cols.Name),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		ShapeArea:      psql.WhereNull[Q, float64](cols.ShapeArea),
		ShapeLength:    psql.WhereNull[Q, float64](cols.ShapeLength),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
