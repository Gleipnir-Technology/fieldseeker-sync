// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/orm"
)

var Preload = getPreloaders()

type preloaders struct {
	HistoryNoteAudioRecording historyNoteAudioRecordingPreloader
	Note                      notePreloader
	NoteAudio                 noteAudioPreloader
	NoteAudioBreadcrumb       noteAudioBreadcrumbPreloader
	NoteAudioRecording        noteAudioRecordingPreloader
	NoteImage                 noteImagePreloader
	TaskAudioReview           taskAudioReviewPreloader
	User                      userPreloader
}

func getPreloaders() preloaders {
	return preloaders{
		HistoryNoteAudioRecording: buildHistoryNoteAudioRecordingPreloader(),
		Note:                      buildNotePreloader(),
		NoteAudio:                 buildNoteAudioPreloader(),
		NoteAudioBreadcrumb:       buildNoteAudioBreadcrumbPreloader(),
		NoteAudioRecording:        buildNoteAudioRecordingPreloader(),
		NoteImage:                 buildNoteImagePreloader(),
		TaskAudioReview:           buildTaskAudioReviewPreloader(),
		User:                      buildUserPreloader(),
	}
}

var (
	SelectThenLoad = getThenLoaders[*dialect.SelectQuery]()
	InsertThenLoad = getThenLoaders[*dialect.InsertQuery]()
	UpdateThenLoad = getThenLoaders[*dialect.UpdateQuery]()
)

type thenLoaders[Q orm.Loadable] struct {
	HistoryNoteAudioRecording historyNoteAudioRecordingThenLoader[Q]
	Note                      noteThenLoader[Q]
	NoteAudio                 noteAudioThenLoader[Q]
	NoteAudioBreadcrumb       noteAudioBreadcrumbThenLoader[Q]
	NoteAudioRecording        noteAudioRecordingThenLoader[Q]
	NoteImage                 noteImageThenLoader[Q]
	TaskAudioReview           taskAudioReviewThenLoader[Q]
	User                      userThenLoader[Q]
}

func getThenLoaders[Q orm.Loadable]() thenLoaders[Q] {
	return thenLoaders[Q]{
		HistoryNoteAudioRecording: buildHistoryNoteAudioRecordingThenLoader[Q](),
		Note:                      buildNoteThenLoader[Q](),
		NoteAudio:                 buildNoteAudioThenLoader[Q](),
		NoteAudioBreadcrumb:       buildNoteAudioBreadcrumbThenLoader[Q](),
		NoteAudioRecording:        buildNoteAudioRecordingThenLoader[Q](),
		NoteImage:                 buildNoteImageThenLoader[Q](),
		TaskAudioReview:           buildTaskAudioReviewThenLoader[Q](),
		User:                      buildUserThenLoader[Q](),
	}
}

func thenLoadBuilder[Q orm.Loadable, T any](name string, f func(context.Context, bob.Executor, T, ...bob.Mod[*dialect.SelectQuery]) error) func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
	return func(queryMods ...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q] {
		return func(ctx context.Context, exec bob.Executor, retrieved any) error {
			loader, isLoader := retrieved.(T)
			if !isLoader {
				return fmt.Errorf("object %T cannot load %q", retrieved, name)
			}

			err := f(ctx, exec, loader, queryMods...)

			// Don't cause an issue due to missing relationships
			if errors.Is(err, sql.ErrNoRows) {
				return nil
			}

			return err
		}
	}
}
