// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	enums "github.com/Gleipnir-Technology/fieldseeker-sync/database/enums"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// User is an object representing the database table.
type User struct {
	ID               int32                    `db:"id,pk" `
	DisplayName      null.Val[string]         `db:"display_name" `
	PasswordHashType null.Val[enums.Hashtype] `db:"password_hash_type" `
	PasswordHash     null.Val[string]         `db:"password_hash" `
	Username         null.Val[string]         `db:"username" `

	R userR `db:"-" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the user_ table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "user_", buildUserColumns("user_"))

// UsersQuery is a query on the user_ table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	CreatorNoteAudios           NoteAudioSlice       // note_audio.note_audio_creator_fkey
	DeletedByNoteAudios         NoteAudioSlice       // note_audio.note_audio_deleted_by_fkey
	CreatorNoteImages           NoteImageSlice       // note_image.note_image_creator_fkey
	CompletedByTaskAudioReviews TaskAudioReviewSlice // task_audio_review.task_audio_review_completed_by_fkey
	ReviewedByTaskAudioReviews  TaskAudioReviewSlice // task_audio_review.task_audio_review_reviewed_by_fkey
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "display_name", "password_hash_type", "password_hash", "username",
		).WithParent("user_"),
		tableAlias:       alias,
		ID:               psql.Quote(alias, "id"),
		DisplayName:      psql.Quote(alias, "display_name"),
		PasswordHashType: psql.Quote(alias, "password_hash_type"),
		PasswordHash:     psql.Quote(alias, "password_hash"),
		Username:         psql.Quote(alias, "username"),
	}
}

type userColumns struct {
	expr.ColumnsExpr
	tableAlias       string
	ID               psql.Expression
	DisplayName      psql.Expression
	PasswordHashType psql.Expression
	PasswordHash     psql.Expression
	Username         psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID               omit.Val[int32]              `db:"id,pk" `
	DisplayName      omitnull.Val[string]         `db:"display_name" `
	PasswordHashType omitnull.Val[enums.Hashtype] `db:"password_hash_type" `
	PasswordHash     omitnull.Val[string]         `db:"password_hash" `
	Username         omitnull.Val[string]         `db:"username" `
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if !s.DisplayName.IsUnset() {
		vals = append(vals, "display_name")
	}
	if !s.PasswordHashType.IsUnset() {
		vals = append(vals, "password_hash_type")
	}
	if !s.PasswordHash.IsUnset() {
		vals = append(vals, "password_hash")
	}
	if !s.Username.IsUnset() {
		vals = append(vals, "username")
	}
	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if !s.DisplayName.IsUnset() {
		t.DisplayName = s.DisplayName.MustGetNull()
	}
	if !s.PasswordHashType.IsUnset() {
		t.PasswordHashType = s.PasswordHashType.MustGetNull()
	}
	if !s.PasswordHash.IsUnset() {
		t.PasswordHash = s.PasswordHash.MustGetNull()
	}
	if !s.Username.IsUnset() {
		t.Username = s.Username.MustGetNull()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.DisplayName.IsUnset() {
			vals[1] = psql.Arg(s.DisplayName.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.PasswordHashType.IsUnset() {
			vals[2] = psql.Arg(s.PasswordHashType.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.PasswordHash.IsUnset() {
			vals[3] = psql.Arg(s.PasswordHash.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Username.IsUnset() {
			vals[4] = psql.Arg(s.Username.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.DisplayName.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "display_name")...),
			psql.Arg(s.DisplayName),
		}})
	}

	if !s.PasswordHashType.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "password_hash_type")...),
			psql.Arg(s.PasswordHashType),
		}})
	}

	if !s.PasswordHash.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "password_hash")...),
			psql.Arg(s.PasswordHash),
		}})
	}

	if !s.Username.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "username")...),
			psql.Arg(s.Username),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(Users.Columns.Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("user_", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("user_", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// CreatorNoteAudios starts a query for related objects on note_audio
func (o *User) CreatorNoteAudios(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	return NoteAudios.Query(append(mods,
		sm.Where(NoteAudios.Columns.Creator.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) CreatorNoteAudios(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return NoteAudios.Query(append(mods,
		sm.Where(psql.Group(NoteAudios.Columns.Creator).OP("IN", PKArgExpr)),
	)...)
}

// DeletedByNoteAudios starts a query for related objects on note_audio
func (o *User) DeletedByNoteAudios(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	return NoteAudios.Query(append(mods,
		sm.Where(NoteAudios.Columns.DeletedBy.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) DeletedByNoteAudios(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudiosQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return NoteAudios.Query(append(mods,
		sm.Where(psql.Group(NoteAudios.Columns.DeletedBy).OP("IN", PKArgExpr)),
	)...)
}

// CreatorNoteImages starts a query for related objects on note_image
func (o *User) CreatorNoteImages(mods ...bob.Mod[*dialect.SelectQuery]) NoteImagesQuery {
	return NoteImages.Query(append(mods,
		sm.Where(NoteImages.Columns.Creator.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) CreatorNoteImages(mods ...bob.Mod[*dialect.SelectQuery]) NoteImagesQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return NoteImages.Query(append(mods,
		sm.Where(psql.Group(NoteImages.Columns.Creator).OP("IN", PKArgExpr)),
	)...)
}

// CompletedByTaskAudioReviews starts a query for related objects on task_audio_review
func (o *User) CompletedByTaskAudioReviews(mods ...bob.Mod[*dialect.SelectQuery]) TaskAudioReviewsQuery {
	return TaskAudioReviews.Query(append(mods,
		sm.Where(TaskAudioReviews.Columns.CompletedBy.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) CompletedByTaskAudioReviews(mods ...bob.Mod[*dialect.SelectQuery]) TaskAudioReviewsQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return TaskAudioReviews.Query(append(mods,
		sm.Where(psql.Group(TaskAudioReviews.Columns.CompletedBy).OP("IN", PKArgExpr)),
	)...)
}

// ReviewedByTaskAudioReviews starts a query for related objects on task_audio_review
func (o *User) ReviewedByTaskAudioReviews(mods ...bob.Mod[*dialect.SelectQuery]) TaskAudioReviewsQuery {
	return TaskAudioReviews.Query(append(mods,
		sm.Where(TaskAudioReviews.Columns.ReviewedBy.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) ReviewedByTaskAudioReviews(mods ...bob.Mod[*dialect.SelectQuery]) TaskAudioReviewsQuery {
	pkID := make(pgtypes.Array[int32], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return TaskAudioReviews.Query(append(mods,
		sm.Where(psql.Group(TaskAudioReviews.Columns.ReviewedBy).OP("IN", PKArgExpr)),
	)...)
}

func insertUserCreatorNoteAudios0(ctx context.Context, exec bob.Executor, noteAudios1 []*NoteAudioSetter, user0 *User) (NoteAudioSlice, error) {
	for i := range noteAudios1 {
		noteAudios1[i].Creator = omit.From(user0.ID)
	}

	ret, err := NoteAudios.Insert(bob.ToMods(noteAudios1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserCreatorNoteAudios0: %w", err)
	}

	return ret, nil
}

func attachUserCreatorNoteAudios0(ctx context.Context, exec bob.Executor, count int, noteAudios1 NoteAudioSlice, user0 *User) (NoteAudioSlice, error) {
	setter := &NoteAudioSetter{
		Creator: omit.From(user0.ID),
	}

	err := noteAudios1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserCreatorNoteAudios0: %w", err)
	}

	return noteAudios1, nil
}

func (user0 *User) InsertCreatorNoteAudios(ctx context.Context, exec bob.Executor, related ...*NoteAudioSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	noteAudios1, err := insertUserCreatorNoteAudios0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.CreatorNoteAudios = append(user0.R.CreatorNoteAudios, noteAudios1...)

	for _, rel := range noteAudios1 {
		rel.R.CreatorUser = user0
	}
	return nil
}

func (user0 *User) AttachCreatorNoteAudios(ctx context.Context, exec bob.Executor, related ...*NoteAudio) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	noteAudios1 := NoteAudioSlice(related)

	_, err = attachUserCreatorNoteAudios0(ctx, exec, len(related), noteAudios1, user0)
	if err != nil {
		return err
	}

	user0.R.CreatorNoteAudios = append(user0.R.CreatorNoteAudios, noteAudios1...)

	for _, rel := range related {
		rel.R.CreatorUser = user0
	}

	return nil
}

func insertUserDeletedByNoteAudios0(ctx context.Context, exec bob.Executor, noteAudios1 []*NoteAudioSetter, user0 *User) (NoteAudioSlice, error) {
	for i := range noteAudios1 {
		noteAudios1[i].DeletedBy = omitnull.From(user0.ID)
	}

	ret, err := NoteAudios.Insert(bob.ToMods(noteAudios1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserDeletedByNoteAudios0: %w", err)
	}

	return ret, nil
}

func attachUserDeletedByNoteAudios0(ctx context.Context, exec bob.Executor, count int, noteAudios1 NoteAudioSlice, user0 *User) (NoteAudioSlice, error) {
	setter := &NoteAudioSetter{
		DeletedBy: omitnull.From(user0.ID),
	}

	err := noteAudios1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserDeletedByNoteAudios0: %w", err)
	}

	return noteAudios1, nil
}

func (user0 *User) InsertDeletedByNoteAudios(ctx context.Context, exec bob.Executor, related ...*NoteAudioSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	noteAudios1, err := insertUserDeletedByNoteAudios0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.DeletedByNoteAudios = append(user0.R.DeletedByNoteAudios, noteAudios1...)

	for _, rel := range noteAudios1 {
		rel.R.DeletedByUser = user0
	}
	return nil
}

func (user0 *User) AttachDeletedByNoteAudios(ctx context.Context, exec bob.Executor, related ...*NoteAudio) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	noteAudios1 := NoteAudioSlice(related)

	_, err = attachUserDeletedByNoteAudios0(ctx, exec, len(related), noteAudios1, user0)
	if err != nil {
		return err
	}

	user0.R.DeletedByNoteAudios = append(user0.R.DeletedByNoteAudios, noteAudios1...)

	for _, rel := range related {
		rel.R.DeletedByUser = user0
	}

	return nil
}

func insertUserCreatorNoteImages0(ctx context.Context, exec bob.Executor, noteImages1 []*NoteImageSetter, user0 *User) (NoteImageSlice, error) {
	for i := range noteImages1 {
		noteImages1[i].Creator = omit.From(user0.ID)
	}

	ret, err := NoteImages.Insert(bob.ToMods(noteImages1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserCreatorNoteImages0: %w", err)
	}

	return ret, nil
}

func attachUserCreatorNoteImages0(ctx context.Context, exec bob.Executor, count int, noteImages1 NoteImageSlice, user0 *User) (NoteImageSlice, error) {
	setter := &NoteImageSetter{
		Creator: omit.From(user0.ID),
	}

	err := noteImages1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserCreatorNoteImages0: %w", err)
	}

	return noteImages1, nil
}

func (user0 *User) InsertCreatorNoteImages(ctx context.Context, exec bob.Executor, related ...*NoteImageSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	noteImages1, err := insertUserCreatorNoteImages0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.CreatorNoteImages = append(user0.R.CreatorNoteImages, noteImages1...)

	for _, rel := range noteImages1 {
		rel.R.CreatorUser = user0
	}
	return nil
}

func (user0 *User) AttachCreatorNoteImages(ctx context.Context, exec bob.Executor, related ...*NoteImage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	noteImages1 := NoteImageSlice(related)

	_, err = attachUserCreatorNoteImages0(ctx, exec, len(related), noteImages1, user0)
	if err != nil {
		return err
	}

	user0.R.CreatorNoteImages = append(user0.R.CreatorNoteImages, noteImages1...)

	for _, rel := range related {
		rel.R.CreatorUser = user0
	}

	return nil
}

func insertUserCompletedByTaskAudioReviews0(ctx context.Context, exec bob.Executor, taskAudioReviews1 []*TaskAudioReviewSetter, user0 *User) (TaskAudioReviewSlice, error) {
	for i := range taskAudioReviews1 {
		taskAudioReviews1[i].CompletedBy = omitnull.From(user0.ID)
	}

	ret, err := TaskAudioReviews.Insert(bob.ToMods(taskAudioReviews1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserCompletedByTaskAudioReviews0: %w", err)
	}

	return ret, nil
}

func attachUserCompletedByTaskAudioReviews0(ctx context.Context, exec bob.Executor, count int, taskAudioReviews1 TaskAudioReviewSlice, user0 *User) (TaskAudioReviewSlice, error) {
	setter := &TaskAudioReviewSetter{
		CompletedBy: omitnull.From(user0.ID),
	}

	err := taskAudioReviews1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserCompletedByTaskAudioReviews0: %w", err)
	}

	return taskAudioReviews1, nil
}

func (user0 *User) InsertCompletedByTaskAudioReviews(ctx context.Context, exec bob.Executor, related ...*TaskAudioReviewSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	taskAudioReviews1, err := insertUserCompletedByTaskAudioReviews0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.CompletedByTaskAudioReviews = append(user0.R.CompletedByTaskAudioReviews, taskAudioReviews1...)

	for _, rel := range taskAudioReviews1 {
		rel.R.CompletedByUser = user0
	}
	return nil
}

func (user0 *User) AttachCompletedByTaskAudioReviews(ctx context.Context, exec bob.Executor, related ...*TaskAudioReview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	taskAudioReviews1 := TaskAudioReviewSlice(related)

	_, err = attachUserCompletedByTaskAudioReviews0(ctx, exec, len(related), taskAudioReviews1, user0)
	if err != nil {
		return err
	}

	user0.R.CompletedByTaskAudioReviews = append(user0.R.CompletedByTaskAudioReviews, taskAudioReviews1...)

	for _, rel := range related {
		rel.R.CompletedByUser = user0
	}

	return nil
}

func insertUserReviewedByTaskAudioReviews0(ctx context.Context, exec bob.Executor, taskAudioReviews1 []*TaskAudioReviewSetter, user0 *User) (TaskAudioReviewSlice, error) {
	for i := range taskAudioReviews1 {
		taskAudioReviews1[i].ReviewedBy = omitnull.From(user0.ID)
	}

	ret, err := TaskAudioReviews.Insert(bob.ToMods(taskAudioReviews1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserReviewedByTaskAudioReviews0: %w", err)
	}

	return ret, nil
}

func attachUserReviewedByTaskAudioReviews0(ctx context.Context, exec bob.Executor, count int, taskAudioReviews1 TaskAudioReviewSlice, user0 *User) (TaskAudioReviewSlice, error) {
	setter := &TaskAudioReviewSetter{
		ReviewedBy: omitnull.From(user0.ID),
	}

	err := taskAudioReviews1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserReviewedByTaskAudioReviews0: %w", err)
	}

	return taskAudioReviews1, nil
}

func (user0 *User) InsertReviewedByTaskAudioReviews(ctx context.Context, exec bob.Executor, related ...*TaskAudioReviewSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	taskAudioReviews1, err := insertUserReviewedByTaskAudioReviews0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.ReviewedByTaskAudioReviews = append(user0.R.ReviewedByTaskAudioReviews, taskAudioReviews1...)

	for _, rel := range taskAudioReviews1 {
		rel.R.ReviewedByUser = user0
	}
	return nil
}

func (user0 *User) AttachReviewedByTaskAudioReviews(ctx context.Context, exec bob.Executor, related ...*TaskAudioReview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	taskAudioReviews1 := TaskAudioReviewSlice(related)

	_, err = attachUserReviewedByTaskAudioReviews0(ctx, exec, len(related), taskAudioReviews1, user0)
	if err != nil {
		return err
	}

	user0.R.ReviewedByTaskAudioReviews = append(user0.R.ReviewedByTaskAudioReviews, taskAudioReviews1...)

	for _, rel := range related {
		rel.R.ReviewedByUser = user0
	}

	return nil
}

type userWhere[Q psql.Filterable] struct {
	ID               psql.WhereMod[Q, int32]
	DisplayName      psql.WhereNullMod[Q, string]
	PasswordHashType psql.WhereNullMod[Q, enums.Hashtype]
	PasswordHash     psql.WhereNullMod[Q, string]
	Username         psql.WhereNullMod[Q, string]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:               psql.Where[Q, int32](cols.ID),
		DisplayName:      psql.WhereNull[Q, string](cols.DisplayName),
		PasswordHashType: psql.WhereNull[Q, enums.Hashtype](cols.PasswordHashType),
		PasswordHash:     psql.WhereNull[Q, string](cols.PasswordHash),
		Username:         psql.WhereNull[Q, string](cols.Username),
	}
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CreatorNoteAudios":
		rels, ok := retrieved.(NoteAudioSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.CreatorNoteAudios = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CreatorUser = o
			}
		}
		return nil
	case "DeletedByNoteAudios":
		rels, ok := retrieved.(NoteAudioSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.DeletedByNoteAudios = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.DeletedByUser = o
			}
		}
		return nil
	case "CreatorNoteImages":
		rels, ok := retrieved.(NoteImageSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.CreatorNoteImages = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CreatorUser = o
			}
		}
		return nil
	case "CompletedByTaskAudioReviews":
		rels, ok := retrieved.(TaskAudioReviewSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.CompletedByTaskAudioReviews = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.CompletedByUser = o
			}
		}
		return nil
	case "ReviewedByTaskAudioReviews":
		rels, ok := retrieved.(TaskAudioReviewSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.ReviewedByTaskAudioReviews = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ReviewedByUser = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct{}

func buildUserPreloader() userPreloader {
	return userPreloader{}
}

type userThenLoader[Q orm.Loadable] struct {
	CreatorNoteAudios           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	DeletedByNoteAudios         func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	CreatorNoteImages           func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	CompletedByTaskAudioReviews func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	ReviewedByTaskAudioReviews  func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type CreatorNoteAudiosLoadInterface interface {
		LoadCreatorNoteAudios(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type DeletedByNoteAudiosLoadInterface interface {
		LoadDeletedByNoteAudios(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type CreatorNoteImagesLoadInterface interface {
		LoadCreatorNoteImages(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type CompletedByTaskAudioReviewsLoadInterface interface {
		LoadCompletedByTaskAudioReviews(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ReviewedByTaskAudioReviewsLoadInterface interface {
		LoadReviewedByTaskAudioReviews(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		CreatorNoteAudios: thenLoadBuilder[Q](
			"CreatorNoteAudios",
			func(ctx context.Context, exec bob.Executor, retrieved CreatorNoteAudiosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCreatorNoteAudios(ctx, exec, mods...)
			},
		),
		DeletedByNoteAudios: thenLoadBuilder[Q](
			"DeletedByNoteAudios",
			func(ctx context.Context, exec bob.Executor, retrieved DeletedByNoteAudiosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadDeletedByNoteAudios(ctx, exec, mods...)
			},
		),
		CreatorNoteImages: thenLoadBuilder[Q](
			"CreatorNoteImages",
			func(ctx context.Context, exec bob.Executor, retrieved CreatorNoteImagesLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCreatorNoteImages(ctx, exec, mods...)
			},
		),
		CompletedByTaskAudioReviews: thenLoadBuilder[Q](
			"CompletedByTaskAudioReviews",
			func(ctx context.Context, exec bob.Executor, retrieved CompletedByTaskAudioReviewsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadCompletedByTaskAudioReviews(ctx, exec, mods...)
			},
		),
		ReviewedByTaskAudioReviews: thenLoadBuilder[Q](
			"ReviewedByTaskAudioReviews",
			func(ctx context.Context, exec bob.Executor, retrieved ReviewedByTaskAudioReviewsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadReviewedByTaskAudioReviews(ctx, exec, mods...)
			},
		),
	}
}

// LoadCreatorNoteAudios loads the user's CreatorNoteAudios into the .R struct
func (o *User) LoadCreatorNoteAudios(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatorNoteAudios = nil

	related, err := o.CreatorNoteAudios(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CreatorUser = o
	}

	o.R.CreatorNoteAudios = related
	return nil
}

// LoadCreatorNoteAudios loads the user's CreatorNoteAudios into the .R struct
func (os UserSlice) LoadCreatorNoteAudios(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	noteAudios, err := os.CreatorNoteAudios(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CreatorNoteAudios = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range noteAudios {

			if !(o.ID == rel.Creator) {
				continue
			}

			rel.R.CreatorUser = o

			o.R.CreatorNoteAudios = append(o.R.CreatorNoteAudios, rel)
		}
	}

	return nil
}

// LoadDeletedByNoteAudios loads the user's DeletedByNoteAudios into the .R struct
func (o *User) LoadDeletedByNoteAudios(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.DeletedByNoteAudios = nil

	related, err := o.DeletedByNoteAudios(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.DeletedByUser = o
	}

	o.R.DeletedByNoteAudios = related
	return nil
}

// LoadDeletedByNoteAudios loads the user's DeletedByNoteAudios into the .R struct
func (os UserSlice) LoadDeletedByNoteAudios(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	noteAudios, err := os.DeletedByNoteAudios(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.DeletedByNoteAudios = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range noteAudios {

			if !rel.DeletedBy.IsValue() {
				continue
			}
			if !(rel.DeletedBy.IsValue() && o.ID == rel.DeletedBy.MustGet()) {
				continue
			}

			rel.R.DeletedByUser = o

			o.R.DeletedByNoteAudios = append(o.R.DeletedByNoteAudios, rel)
		}
	}

	return nil
}

// LoadCreatorNoteImages loads the user's CreatorNoteImages into the .R struct
func (o *User) LoadCreatorNoteImages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatorNoteImages = nil

	related, err := o.CreatorNoteImages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CreatorUser = o
	}

	o.R.CreatorNoteImages = related
	return nil
}

// LoadCreatorNoteImages loads the user's CreatorNoteImages into the .R struct
func (os UserSlice) LoadCreatorNoteImages(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	noteImages, err := os.CreatorNoteImages(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CreatorNoteImages = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range noteImages {

			if !(o.ID == rel.Creator) {
				continue
			}

			rel.R.CreatorUser = o

			o.R.CreatorNoteImages = append(o.R.CreatorNoteImages, rel)
		}
	}

	return nil
}

// LoadCompletedByTaskAudioReviews loads the user's CompletedByTaskAudioReviews into the .R struct
func (o *User) LoadCompletedByTaskAudioReviews(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CompletedByTaskAudioReviews = nil

	related, err := o.CompletedByTaskAudioReviews(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.CompletedByUser = o
	}

	o.R.CompletedByTaskAudioReviews = related
	return nil
}

// LoadCompletedByTaskAudioReviews loads the user's CompletedByTaskAudioReviews into the .R struct
func (os UserSlice) LoadCompletedByTaskAudioReviews(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	taskAudioReviews, err := os.CompletedByTaskAudioReviews(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.CompletedByTaskAudioReviews = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range taskAudioReviews {

			if !rel.CompletedBy.IsValue() {
				continue
			}
			if !(rel.CompletedBy.IsValue() && o.ID == rel.CompletedBy.MustGet()) {
				continue
			}

			rel.R.CompletedByUser = o

			o.R.CompletedByTaskAudioReviews = append(o.R.CompletedByTaskAudioReviews, rel)
		}
	}

	return nil
}

// LoadReviewedByTaskAudioReviews loads the user's ReviewedByTaskAudioReviews into the .R struct
func (o *User) LoadReviewedByTaskAudioReviews(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ReviewedByTaskAudioReviews = nil

	related, err := o.ReviewedByTaskAudioReviews(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ReviewedByUser = o
	}

	o.R.ReviewedByTaskAudioReviews = related
	return nil
}

// LoadReviewedByTaskAudioReviews loads the user's ReviewedByTaskAudioReviews into the .R struct
func (os UserSlice) LoadReviewedByTaskAudioReviews(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	taskAudioReviews, err := os.ReviewedByTaskAudioReviews(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.ReviewedByTaskAudioReviews = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range taskAudioReviews {

			if !rel.ReviewedBy.IsValue() {
				continue
			}
			if !(rel.ReviewedBy.IsValue() && o.ID == rel.ReviewedBy.MustGet()) {
				continue
			}

			rel.R.ReviewedByUser = o

			o.R.ReviewedByTaskAudioReviews = append(o.R.ReviewedByTaskAudioReviews, rel)
		}
	}

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ                         string
	CreatorNoteAudios           modAs[Q, noteAudioColumns]
	DeletedByNoteAudios         modAs[Q, noteAudioColumns]
	CreatorNoteImages           modAs[Q, noteImageColumns]
	CompletedByTaskAudioReviews modAs[Q, taskAudioReviewColumns]
	ReviewedByTaskAudioReviews  modAs[Q, taskAudioReviewColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		CreatorNoteAudios: modAs[Q, noteAudioColumns]{
			c: NoteAudios.Columns,
			f: func(to noteAudioColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, NoteAudios.Name().As(to.Alias())).On(
						to.Creator.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		DeletedByNoteAudios: modAs[Q, noteAudioColumns]{
			c: NoteAudios.Columns,
			f: func(to noteAudioColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, NoteAudios.Name().As(to.Alias())).On(
						to.DeletedBy.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		CreatorNoteImages: modAs[Q, noteImageColumns]{
			c: NoteImages.Columns,
			f: func(to noteImageColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, NoteImages.Name().As(to.Alias())).On(
						to.Creator.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		CompletedByTaskAudioReviews: modAs[Q, taskAudioReviewColumns]{
			c: TaskAudioReviews.Columns,
			f: func(to taskAudioReviewColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, TaskAudioReviews.Name().As(to.Alias())).On(
						to.CompletedBy.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		ReviewedByTaskAudioReviews: modAs[Q, taskAudioReviewColumns]{
			c: TaskAudioReviews.Columns,
			f: func(to taskAudioReviewColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, TaskAudioReviews.Name().As(to.Alias())).On(
						to.ReviewedBy.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
