// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Note is an object representing the database table.
type Note struct {
	Created   null.Val[time.Time] `db:"created" `
	Deleted   null.Val[time.Time] `db:"deleted" `
	Latitude  null.Val[float64]   `db:"latitude" `
	Longitude null.Val[float64]   `db:"longitude" `
	Text      string              `db:"text" `
	Updated   null.Val[time.Time] `db:"updated" `
	UUID      string              `db:"uuid,pk" `

	R noteR `db:"-" `
}

// NoteSlice is an alias for a slice of pointers to Note.
// This should almost always be used instead of []*Note.
type NoteSlice []*Note

// Notes contains methods to work with the note table
var Notes = psql.NewTablex[*Note, NoteSlice, *NoteSetter]("", "note", buildNoteColumns("note"))

// NotesQuery is a query on the note table
type NotesQuery = *psql.ViewQuery[*Note, NoteSlice]

// noteR is where relationships are stored.
type noteR struct {
	HistoryNoteAudioRecordings HistoryNoteAudioRecordingSlice // history_note_audio_recording.history_note_audio_recording_note_uuid_fkey
	NoteAudioRecordings        NoteAudioRecordingSlice        // note_audio_recording.note_audio_recording_note_uuid_fkey
}

func buildNoteColumns(alias string) noteColumns {
	return noteColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"created", "deleted", "latitude", "longitude", "text", "updated", "uuid",
		).WithParent("note"),
		tableAlias: alias,
		Created:    psql.Quote(alias, "created"),
		Deleted:    psql.Quote(alias, "deleted"),
		Latitude:   psql.Quote(alias, "latitude"),
		Longitude:  psql.Quote(alias, "longitude"),
		Text:       psql.Quote(alias, "text"),
		Updated:    psql.Quote(alias, "updated"),
		UUID:       psql.Quote(alias, "uuid"),
	}
}

type noteColumns struct {
	expr.ColumnsExpr
	tableAlias string
	Created    psql.Expression
	Deleted    psql.Expression
	Latitude   psql.Expression
	Longitude  psql.Expression
	Text       psql.Expression
	Updated    psql.Expression
	UUID       psql.Expression
}

func (c noteColumns) Alias() string {
	return c.tableAlias
}

func (noteColumns) AliasedAs(alias string) noteColumns {
	return buildNoteColumns(alias)
}

// NoteSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type NoteSetter struct {
	Created   omitnull.Val[time.Time] `db:"created" `
	Deleted   omitnull.Val[time.Time] `db:"deleted" `
	Latitude  omitnull.Val[float64]   `db:"latitude" `
	Longitude omitnull.Val[float64]   `db:"longitude" `
	Text      omit.Val[string]        `db:"text" `
	Updated   omitnull.Val[time.Time] `db:"updated" `
	UUID      omit.Val[string]        `db:"uuid,pk" `
}

func (s NoteSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.Deleted.IsUnset() {
		vals = append(vals, "deleted")
	}
	if !s.Latitude.IsUnset() {
		vals = append(vals, "latitude")
	}
	if !s.Longitude.IsUnset() {
		vals = append(vals, "longitude")
	}
	if s.Text.IsValue() {
		vals = append(vals, "text")
	}
	if !s.Updated.IsUnset() {
		vals = append(vals, "updated")
	}
	if s.UUID.IsValue() {
		vals = append(vals, "uuid")
	}
	return vals
}

func (s NoteSetter) Overwrite(t *Note) {
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.Deleted.IsUnset() {
		t.Deleted = s.Deleted.MustGetNull()
	}
	if !s.Latitude.IsUnset() {
		t.Latitude = s.Latitude.MustGetNull()
	}
	if !s.Longitude.IsUnset() {
		t.Longitude = s.Longitude.MustGetNull()
	}
	if s.Text.IsValue() {
		t.Text = s.Text.MustGet()
	}
	if !s.Updated.IsUnset() {
		t.Updated = s.Updated.MustGetNull()
	}
	if s.UUID.IsValue() {
		t.UUID = s.UUID.MustGet()
	}
}

func (s *NoteSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Notes.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if !s.Created.IsUnset() {
			vals[0] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Deleted.IsUnset() {
			vals[1] = psql.Arg(s.Deleted.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Latitude.IsUnset() {
			vals[2] = psql.Arg(s.Latitude.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Longitude.IsUnset() {
			vals[3] = psql.Arg(s.Longitude.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Text.IsValue() {
			vals[4] = psql.Arg(s.Text.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Updated.IsUnset() {
			vals[5] = psql.Arg(s.Updated.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.UUID.IsValue() {
			vals[6] = psql.Arg(s.UUID.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s NoteSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s NoteSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.Deleted.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "deleted")...),
			psql.Arg(s.Deleted),
		}})
	}

	if !s.Latitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "latitude")...),
			psql.Arg(s.Latitude),
		}})
	}

	if !s.Longitude.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "longitude")...),
			psql.Arg(s.Longitude),
		}})
	}

	if s.Text.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "text")...),
			psql.Arg(s.Text),
		}})
	}

	if !s.Updated.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	if s.UUID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "uuid")...),
			psql.Arg(s.UUID),
		}})
	}

	return exprs
}

// FindNote retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindNote(ctx context.Context, exec bob.Executor, UUIDPK string, cols ...string) (*Note, error) {
	if len(cols) == 0 {
		return Notes.Query(
			sm.Where(Notes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		).One(ctx, exec)
	}

	return Notes.Query(
		sm.Where(Notes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
		sm.Columns(Notes.Columns.Only(cols...)),
	).One(ctx, exec)
}

// NoteExists checks the presence of a single record by primary key
func NoteExists(ctx context.Context, exec bob.Executor, UUIDPK string) (bool, error) {
	return Notes.Query(
		sm.Where(Notes.Columns.UUID.EQ(psql.Arg(UUIDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Note is retrieved from the database
func (o *Note) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Notes.AfterSelectHooks.RunHooks(ctx, exec, NoteSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Notes.AfterInsertHooks.RunHooks(ctx, exec, NoteSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Notes.AfterUpdateHooks.RunHooks(ctx, exec, NoteSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Notes.AfterDeleteHooks.RunHooks(ctx, exec, NoteSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Note
func (o *Note) primaryKeyVals() bob.Expression {
	return psql.Arg(o.UUID)
}

func (o *Note) pkEQ() dialect.Expression {
	return psql.Quote("note", "uuid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Note
func (o *Note) Update(ctx context.Context, exec bob.Executor, s *NoteSetter) error {
	v, err := Notes.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Note record with an executor
func (o *Note) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Notes.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Note using the executor
func (o *Note) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Notes.Query(
		sm.Where(Notes.Columns.UUID.EQ(psql.Arg(o.UUID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after NoteSlice is retrieved from the database
func (o NoteSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Notes.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Notes.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Notes.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Notes.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o NoteSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("note", "uuid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o NoteSlice) copyMatchingRows(from ...*Note) {
	for i, old := range o {
		for _, new := range from {
			if new.UUID != old.UUID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o NoteSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Notes.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Note:
				o.copyMatchingRows(retrieved)
			case []*Note:
				o.copyMatchingRows(retrieved...)
			case NoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Note or a slice of Note
				// then run the AfterUpdateHooks on the slice
				_, err = Notes.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o NoteSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Notes.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Note:
				o.copyMatchingRows(retrieved)
			case []*Note:
				o.copyMatchingRows(retrieved...)
			case NoteSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Note or a slice of Note
				// then run the AfterDeleteHooks on the slice
				_, err = Notes.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o NoteSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals NoteSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Notes.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o NoteSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Notes.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o NoteSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Notes.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// HistoryNoteAudioRecordings starts a query for related objects on history_note_audio_recording
func (o *Note) HistoryNoteAudioRecordings(mods ...bob.Mod[*dialect.SelectQuery]) HistoryNoteAudioRecordingsQuery {
	return HistoryNoteAudioRecordings.Query(append(mods,
		sm.Where(HistoryNoteAudioRecordings.Columns.NoteUUID.EQ(psql.Arg(o.UUID))),
	)...)
}

func (os NoteSlice) HistoryNoteAudioRecordings(mods ...bob.Mod[*dialect.SelectQuery]) HistoryNoteAudioRecordingsQuery {
	pkUUID := make(pgtypes.Array[string], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkUUID = append(pkUUID, o.UUID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUUID), "text[]")),
	))

	return HistoryNoteAudioRecordings.Query(append(mods,
		sm.Where(psql.Group(HistoryNoteAudioRecordings.Columns.NoteUUID).OP("IN", PKArgExpr)),
	)...)
}

// NoteAudioRecordings starts a query for related objects on note_audio_recording
func (o *Note) NoteAudioRecordings(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudioRecordingsQuery {
	return NoteAudioRecordings.Query(append(mods,
		sm.Where(NoteAudioRecordings.Columns.NoteUUID.EQ(psql.Arg(o.UUID))),
	)...)
}

func (os NoteSlice) NoteAudioRecordings(mods ...bob.Mod[*dialect.SelectQuery]) NoteAudioRecordingsQuery {
	pkUUID := make(pgtypes.Array[string], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkUUID = append(pkUUID, o.UUID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUUID), "text[]")),
	))

	return NoteAudioRecordings.Query(append(mods,
		sm.Where(psql.Group(NoteAudioRecordings.Columns.NoteUUID).OP("IN", PKArgExpr)),
	)...)
}

func insertNoteHistoryNoteAudioRecordings0(ctx context.Context, exec bob.Executor, historyNoteAudioRecordings1 []*HistoryNoteAudioRecordingSetter, note0 *Note) (HistoryNoteAudioRecordingSlice, error) {
	for i := range historyNoteAudioRecordings1 {
		historyNoteAudioRecordings1[i].NoteUUID = omitnull.From(note0.UUID)
	}

	ret, err := HistoryNoteAudioRecordings.Insert(bob.ToMods(historyNoteAudioRecordings1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertNoteHistoryNoteAudioRecordings0: %w", err)
	}

	return ret, nil
}

func attachNoteHistoryNoteAudioRecordings0(ctx context.Context, exec bob.Executor, count int, historyNoteAudioRecordings1 HistoryNoteAudioRecordingSlice, note0 *Note) (HistoryNoteAudioRecordingSlice, error) {
	setter := &HistoryNoteAudioRecordingSetter{
		NoteUUID: omitnull.From(note0.UUID),
	}

	err := historyNoteAudioRecordings1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachNoteHistoryNoteAudioRecordings0: %w", err)
	}

	return historyNoteAudioRecordings1, nil
}

func (note0 *Note) InsertHistoryNoteAudioRecordings(ctx context.Context, exec bob.Executor, related ...*HistoryNoteAudioRecordingSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	historyNoteAudioRecordings1, err := insertNoteHistoryNoteAudioRecordings0(ctx, exec, related, note0)
	if err != nil {
		return err
	}

	note0.R.HistoryNoteAudioRecordings = append(note0.R.HistoryNoteAudioRecordings, historyNoteAudioRecordings1...)

	for _, rel := range historyNoteAudioRecordings1 {
		rel.R.Note = note0
	}
	return nil
}

func (note0 *Note) AttachHistoryNoteAudioRecordings(ctx context.Context, exec bob.Executor, related ...*HistoryNoteAudioRecording) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	historyNoteAudioRecordings1 := HistoryNoteAudioRecordingSlice(related)

	_, err = attachNoteHistoryNoteAudioRecordings0(ctx, exec, len(related), historyNoteAudioRecordings1, note0)
	if err != nil {
		return err
	}

	note0.R.HistoryNoteAudioRecordings = append(note0.R.HistoryNoteAudioRecordings, historyNoteAudioRecordings1...)

	for _, rel := range related {
		rel.R.Note = note0
	}

	return nil
}

func insertNoteNoteAudioRecordings0(ctx context.Context, exec bob.Executor, noteAudioRecordings1 []*NoteAudioRecordingSetter, note0 *Note) (NoteAudioRecordingSlice, error) {
	for i := range noteAudioRecordings1 {
		noteAudioRecordings1[i].NoteUUID = omitnull.From(note0.UUID)
	}

	ret, err := NoteAudioRecordings.Insert(bob.ToMods(noteAudioRecordings1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertNoteNoteAudioRecordings0: %w", err)
	}

	return ret, nil
}

func attachNoteNoteAudioRecordings0(ctx context.Context, exec bob.Executor, count int, noteAudioRecordings1 NoteAudioRecordingSlice, note0 *Note) (NoteAudioRecordingSlice, error) {
	setter := &NoteAudioRecordingSetter{
		NoteUUID: omitnull.From(note0.UUID),
	}

	err := noteAudioRecordings1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachNoteNoteAudioRecordings0: %w", err)
	}

	return noteAudioRecordings1, nil
}

func (note0 *Note) InsertNoteAudioRecordings(ctx context.Context, exec bob.Executor, related ...*NoteAudioRecordingSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	noteAudioRecordings1, err := insertNoteNoteAudioRecordings0(ctx, exec, related, note0)
	if err != nil {
		return err
	}

	note0.R.NoteAudioRecordings = append(note0.R.NoteAudioRecordings, noteAudioRecordings1...)

	for _, rel := range noteAudioRecordings1 {
		rel.R.Note = note0
	}
	return nil
}

func (note0 *Note) AttachNoteAudioRecordings(ctx context.Context, exec bob.Executor, related ...*NoteAudioRecording) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	noteAudioRecordings1 := NoteAudioRecordingSlice(related)

	_, err = attachNoteNoteAudioRecordings0(ctx, exec, len(related), noteAudioRecordings1, note0)
	if err != nil {
		return err
	}

	note0.R.NoteAudioRecordings = append(note0.R.NoteAudioRecordings, noteAudioRecordings1...)

	for _, rel := range related {
		rel.R.Note = note0
	}

	return nil
}

type noteWhere[Q psql.Filterable] struct {
	Created   psql.WhereNullMod[Q, time.Time]
	Deleted   psql.WhereNullMod[Q, time.Time]
	Latitude  psql.WhereNullMod[Q, float64]
	Longitude psql.WhereNullMod[Q, float64]
	Text      psql.WhereMod[Q, string]
	Updated   psql.WhereNullMod[Q, time.Time]
	UUID      psql.WhereMod[Q, string]
}

func (noteWhere[Q]) AliasedAs(alias string) noteWhere[Q] {
	return buildNoteWhere[Q](buildNoteColumns(alias))
}

func buildNoteWhere[Q psql.Filterable](cols noteColumns) noteWhere[Q] {
	return noteWhere[Q]{
		Created:   psql.WhereNull[Q, time.Time](cols.Created),
		Deleted:   psql.WhereNull[Q, time.Time](cols.Deleted),
		Latitude:  psql.WhereNull[Q, float64](cols.Latitude),
		Longitude: psql.WhereNull[Q, float64](cols.Longitude),
		Text:      psql.Where[Q, string](cols.Text),
		Updated:   psql.WhereNull[Q, time.Time](cols.Updated),
		UUID:      psql.Where[Q, string](cols.UUID),
	}
}

func (o *Note) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "HistoryNoteAudioRecordings":
		rels, ok := retrieved.(HistoryNoteAudioRecordingSlice)
		if !ok {
			return fmt.Errorf("note cannot load %T as %q", retrieved, name)
		}

		o.R.HistoryNoteAudioRecordings = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Note = o
			}
		}
		return nil
	case "NoteAudioRecordings":
		rels, ok := retrieved.(NoteAudioRecordingSlice)
		if !ok {
			return fmt.Errorf("note cannot load %T as %q", retrieved, name)
		}

		o.R.NoteAudioRecordings = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Note = o
			}
		}
		return nil
	default:
		return fmt.Errorf("note has no relationship %q", name)
	}
}

type notePreloader struct{}

func buildNotePreloader() notePreloader {
	return notePreloader{}
}

type noteThenLoader[Q orm.Loadable] struct {
	HistoryNoteAudioRecordings func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	NoteAudioRecordings        func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildNoteThenLoader[Q orm.Loadable]() noteThenLoader[Q] {
	type HistoryNoteAudioRecordingsLoadInterface interface {
		LoadHistoryNoteAudioRecordings(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type NoteAudioRecordingsLoadInterface interface {
		LoadNoteAudioRecordings(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return noteThenLoader[Q]{
		HistoryNoteAudioRecordings: thenLoadBuilder[Q](
			"HistoryNoteAudioRecordings",
			func(ctx context.Context, exec bob.Executor, retrieved HistoryNoteAudioRecordingsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadHistoryNoteAudioRecordings(ctx, exec, mods...)
			},
		),
		NoteAudioRecordings: thenLoadBuilder[Q](
			"NoteAudioRecordings",
			func(ctx context.Context, exec bob.Executor, retrieved NoteAudioRecordingsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadNoteAudioRecordings(ctx, exec, mods...)
			},
		),
	}
}

// LoadHistoryNoteAudioRecordings loads the note's HistoryNoteAudioRecordings into the .R struct
func (o *Note) LoadHistoryNoteAudioRecordings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.HistoryNoteAudioRecordings = nil

	related, err := o.HistoryNoteAudioRecordings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Note = o
	}

	o.R.HistoryNoteAudioRecordings = related
	return nil
}

// LoadHistoryNoteAudioRecordings loads the note's HistoryNoteAudioRecordings into the .R struct
func (os NoteSlice) LoadHistoryNoteAudioRecordings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	historyNoteAudioRecordings, err := os.HistoryNoteAudioRecordings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.HistoryNoteAudioRecordings = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range historyNoteAudioRecordings {

			if !rel.NoteUUID.IsValue() {
				continue
			}
			if !(rel.NoteUUID.IsValue() && o.UUID == rel.NoteUUID.MustGet()) {
				continue
			}

			rel.R.Note = o

			o.R.HistoryNoteAudioRecordings = append(o.R.HistoryNoteAudioRecordings, rel)
		}
	}

	return nil
}

// LoadNoteAudioRecordings loads the note's NoteAudioRecordings into the .R struct
func (o *Note) LoadNoteAudioRecordings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.NoteAudioRecordings = nil

	related, err := o.NoteAudioRecordings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Note = o
	}

	o.R.NoteAudioRecordings = related
	return nil
}

// LoadNoteAudioRecordings loads the note's NoteAudioRecordings into the .R struct
func (os NoteSlice) LoadNoteAudioRecordings(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	noteAudioRecordings, err := os.NoteAudioRecordings(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.NoteAudioRecordings = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range noteAudioRecordings {

			if !rel.NoteUUID.IsValue() {
				continue
			}
			if !(rel.NoteUUID.IsValue() && o.UUID == rel.NoteUUID.MustGet()) {
				continue
			}

			rel.R.Note = o

			o.R.NoteAudioRecordings = append(o.R.NoteAudioRecordings, rel)
		}
	}

	return nil
}

type noteJoins[Q dialect.Joinable] struct {
	typ                        string
	HistoryNoteAudioRecordings modAs[Q, historyNoteAudioRecordingColumns]
	NoteAudioRecordings        modAs[Q, noteAudioRecordingColumns]
}

func (j noteJoins[Q]) aliasedAs(alias string) noteJoins[Q] {
	return buildNoteJoins[Q](buildNoteColumns(alias), j.typ)
}

func buildNoteJoins[Q dialect.Joinable](cols noteColumns, typ string) noteJoins[Q] {
	return noteJoins[Q]{
		typ: typ,
		HistoryNoteAudioRecordings: modAs[Q, historyNoteAudioRecordingColumns]{
			c: HistoryNoteAudioRecordings.Columns,
			f: func(to historyNoteAudioRecordingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, HistoryNoteAudioRecordings.Name().As(to.Alias())).On(
						to.NoteUUID.EQ(cols.UUID),
					))
				}

				return mods
			},
		},
		NoteAudioRecordings: modAs[Q, noteAudioRecordingColumns]{
			c: NoteAudioRecordings.Columns,
			f: func(to noteAudioRecordingColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, NoteAudioRecordings.Name().As(to.Alias())).On(
						to.NoteUUID.EQ(cols.UUID),
					))
				}

				return mods
			},
		},
	}
}
