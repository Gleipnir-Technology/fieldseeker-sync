// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistoryTreatmentarea is an object representing the database table.
type HistoryTreatmentarea struct {
	Comments       null.Val[string]    `db:"comments" `
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	Globalid       null.Val[string]    `db:"globalid" `
	Notified       null.Val[int16]     `db:"notified" `
	Objectid       int32               `db:"objectid,pk" `
	SessionID      null.Val[string]    `db:"session_id" `
	ShapeArea      null.Val[float64]   `db:"shape__area" `
	ShapeLength    null.Val[float64]   `db:"shape__length" `
	Treatdate      null.Val[int64]     `db:"treatdate" `
	TreatID        null.Val[string]    `db:"treat_id" `
	Type           null.Val[string]    `db:"type" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	Version        int32               `db:"version,pk" `
}

// HistoryTreatmentareaSlice is an alias for a slice of pointers to HistoryTreatmentarea.
// This should almost always be used instead of []*HistoryTreatmentarea.
type HistoryTreatmentareaSlice []*HistoryTreatmentarea

// HistoryTreatmentareas contains methods to work with the history_treatmentarea table
var HistoryTreatmentareas = psql.NewTablex[*HistoryTreatmentarea, HistoryTreatmentareaSlice, *HistoryTreatmentareaSetter]("", "history_treatmentarea", buildHistoryTreatmentareaColumns("history_treatmentarea"))

// HistoryTreatmentareasQuery is a query on the history_treatmentarea table
type HistoryTreatmentareasQuery = *psql.ViewQuery[*HistoryTreatmentarea, HistoryTreatmentareaSlice]

func buildHistoryTreatmentareaColumns(alias string) historyTreatmentareaColumns {
	return historyTreatmentareaColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"comments", "creationdate", "creator", "editdate", "editor", "globalid", "notified", "objectid", "session_id", "shape__area", "shape__length", "treatdate", "treat_id", "type", "created", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "version",
		).WithParent("history_treatmentarea"),
		tableAlias:     alias,
		Comments:       psql.Quote(alias, "comments"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Notified:       psql.Quote(alias, "notified"),
		Objectid:       psql.Quote(alias, "objectid"),
		SessionID:      psql.Quote(alias, "session_id"),
		ShapeArea:      psql.Quote(alias, "shape__area"),
		ShapeLength:    psql.Quote(alias, "shape__length"),
		Treatdate:      psql.Quote(alias, "treatdate"),
		TreatID:        psql.Quote(alias, "treat_id"),
		Type:           psql.Quote(alias, "type"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historyTreatmentareaColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Comments       psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Notified       psql.Expression
	Objectid       psql.Expression
	SessionID      psql.Expression
	ShapeArea      psql.Expression
	ShapeLength    psql.Expression
	Treatdate      psql.Expression
	TreatID        psql.Expression
	Type           psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Version        psql.Expression
}

func (c historyTreatmentareaColumns) Alias() string {
	return c.tableAlias
}

func (historyTreatmentareaColumns) AliasedAs(alias string) historyTreatmentareaColumns {
	return buildHistoryTreatmentareaColumns(alias)
}

// HistoryTreatmentareaSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistoryTreatmentareaSetter struct {
	Comments       omitnull.Val[string]    `db:"comments" `
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	Notified       omitnull.Val[int16]     `db:"notified" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	SessionID      omitnull.Val[string]    `db:"session_id" `
	ShapeArea      omitnull.Val[float64]   `db:"shape__area" `
	ShapeLength    omitnull.Val[float64]   `db:"shape__length" `
	Treatdate      omitnull.Val[int64]     `db:"treatdate" `
	TreatID        omitnull.Val[string]    `db:"treat_id" `
	Type           omitnull.Val[string]    `db:"type" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistoryTreatmentareaSetter) SetColumns() []string {
	vals := make([]string, 0, 22)
	if !s.Comments.IsUnset() {
		vals = append(vals, "comments")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Notified.IsUnset() {
		vals = append(vals, "notified")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.SessionID.IsUnset() {
		vals = append(vals, "session_id")
	}
	if !s.ShapeArea.IsUnset() {
		vals = append(vals, "shape__area")
	}
	if !s.ShapeLength.IsUnset() {
		vals = append(vals, "shape__length")
	}
	if !s.Treatdate.IsUnset() {
		vals = append(vals, "treatdate")
	}
	if !s.TreatID.IsUnset() {
		vals = append(vals, "treat_id")
	}
	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistoryTreatmentareaSetter) Overwrite(t *HistoryTreatmentarea) {
	if !s.Comments.IsUnset() {
		t.Comments = s.Comments.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Notified.IsUnset() {
		t.Notified = s.Notified.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.SessionID.IsUnset() {
		t.SessionID = s.SessionID.MustGetNull()
	}
	if !s.ShapeArea.IsUnset() {
		t.ShapeArea = s.ShapeArea.MustGetNull()
	}
	if !s.ShapeLength.IsUnset() {
		t.ShapeLength = s.ShapeLength.MustGetNull()
	}
	if !s.Treatdate.IsUnset() {
		t.Treatdate = s.Treatdate.MustGetNull()
	}
	if !s.TreatID.IsUnset() {
		t.TreatID = s.TreatID.MustGetNull()
	}
	if !s.Type.IsUnset() {
		t.Type = s.Type.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistoryTreatmentareaSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistoryTreatmentareas.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 22)
		if !s.Comments.IsUnset() {
			vals[0] = psql.Arg(s.Comments.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[3] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[4] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Notified.IsUnset() {
			vals[6] = psql.Arg(s.Notified.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.SessionID.IsUnset() {
			vals[8] = psql.Arg(s.SessionID.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.ShapeArea.IsUnset() {
			vals[9] = psql.Arg(s.ShapeArea.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.ShapeLength.IsUnset() {
			vals[10] = psql.Arg(s.ShapeLength.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.Treatdate.IsUnset() {
			vals[11] = psql.Arg(s.Treatdate.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.TreatID.IsUnset() {
			vals[12] = psql.Arg(s.TreatID.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Type.IsUnset() {
			vals[13] = psql.Arg(s.Type.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[14] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[15] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[16] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[17] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[18] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[19] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[20] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[21] = psql.Arg(s.Version.MustGet())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistoryTreatmentareaSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistoryTreatmentareaSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 22)

	if !s.Comments.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "comments")...),
			psql.Arg(s.Comments),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Notified.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "notified")...),
			psql.Arg(s.Notified),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.SessionID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "session_id")...),
			psql.Arg(s.SessionID),
		}})
	}

	if !s.ShapeArea.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__area")...),
			psql.Arg(s.ShapeArea),
		}})
	}

	if !s.ShapeLength.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__length")...),
			psql.Arg(s.ShapeLength),
		}})
	}

	if !s.Treatdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "treatdate")...),
			psql.Arg(s.Treatdate),
		}})
	}

	if !s.TreatID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "treat_id")...),
			psql.Arg(s.TreatID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "type")...),
			psql.Arg(s.Type),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistoryTreatmentarea retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistoryTreatmentarea(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistoryTreatmentarea, error) {
	if len(cols) == 0 {
		return HistoryTreatmentareas.Query(
			sm.Where(HistoryTreatmentareas.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistoryTreatmentareas.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistoryTreatmentareas.Query(
		sm.Where(HistoryTreatmentareas.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryTreatmentareas.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistoryTreatmentareas.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistoryTreatmentareaExists checks the presence of a single record by primary key
func HistoryTreatmentareaExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistoryTreatmentareas.Query(
		sm.Where(HistoryTreatmentareas.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistoryTreatmentareas.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistoryTreatmentarea is retrieved from the database
func (o *HistoryTreatmentarea) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryTreatmentareas.AfterSelectHooks.RunHooks(ctx, exec, HistoryTreatmentareaSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistoryTreatmentareas.AfterInsertHooks.RunHooks(ctx, exec, HistoryTreatmentareaSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistoryTreatmentareas.AfterUpdateHooks.RunHooks(ctx, exec, HistoryTreatmentareaSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistoryTreatmentareas.AfterDeleteHooks.RunHooks(ctx, exec, HistoryTreatmentareaSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistoryTreatmentarea
func (o *HistoryTreatmentarea) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistoryTreatmentarea) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_treatmentarea", "objectid"), psql.Quote("history_treatmentarea", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistoryTreatmentarea
func (o *HistoryTreatmentarea) Update(ctx context.Context, exec bob.Executor, s *HistoryTreatmentareaSetter) error {
	v, err := HistoryTreatmentareas.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistoryTreatmentarea record with an executor
func (o *HistoryTreatmentarea) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistoryTreatmentareas.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistoryTreatmentarea using the executor
func (o *HistoryTreatmentarea) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistoryTreatmentareas.Query(
		sm.Where(HistoryTreatmentareas.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistoryTreatmentareas.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistoryTreatmentareaSlice is retrieved from the database
func (o HistoryTreatmentareaSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistoryTreatmentareas.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistoryTreatmentareas.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistoryTreatmentareas.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistoryTreatmentareas.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistoryTreatmentareaSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_treatmentarea", "objectid"), psql.Quote("history_treatmentarea", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistoryTreatmentareaSlice) copyMatchingRows(from ...*HistoryTreatmentarea) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistoryTreatmentareaSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryTreatmentareas.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryTreatmentarea:
				o.copyMatchingRows(retrieved)
			case []*HistoryTreatmentarea:
				o.copyMatchingRows(retrieved...)
			case HistoryTreatmentareaSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryTreatmentarea or a slice of HistoryTreatmentarea
				// then run the AfterUpdateHooks on the slice
				_, err = HistoryTreatmentareas.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistoryTreatmentareaSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistoryTreatmentareas.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistoryTreatmentarea:
				o.copyMatchingRows(retrieved)
			case []*HistoryTreatmentarea:
				o.copyMatchingRows(retrieved...)
			case HistoryTreatmentareaSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistoryTreatmentarea or a slice of HistoryTreatmentarea
				// then run the AfterDeleteHooks on the slice
				_, err = HistoryTreatmentareas.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistoryTreatmentareaSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistoryTreatmentareaSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryTreatmentareas.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistoryTreatmentareaSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistoryTreatmentareas.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistoryTreatmentareaSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistoryTreatmentareas.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historyTreatmentareaWhere[Q psql.Filterable] struct {
	Comments       psql.WhereNullMod[Q, string]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Notified       psql.WhereNullMod[Q, int16]
	Objectid       psql.WhereMod[Q, int32]
	SessionID      psql.WhereNullMod[Q, string]
	ShapeArea      psql.WhereNullMod[Q, float64]
	ShapeLength    psql.WhereNullMod[Q, float64]
	Treatdate      psql.WhereNullMod[Q, int64]
	TreatID        psql.WhereNullMod[Q, string]
	Type           psql.WhereNullMod[Q, string]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Version        psql.WhereMod[Q, int32]
}

func (historyTreatmentareaWhere[Q]) AliasedAs(alias string) historyTreatmentareaWhere[Q] {
	return buildHistoryTreatmentareaWhere[Q](buildHistoryTreatmentareaColumns(alias))
}

func buildHistoryTreatmentareaWhere[Q psql.Filterable](cols historyTreatmentareaColumns) historyTreatmentareaWhere[Q] {
	return historyTreatmentareaWhere[Q]{
		Comments:       psql.WhereNull[Q, string](cols.Comments),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Notified:       psql.WhereNull[Q, int16](cols.Notified),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		SessionID:      psql.WhereNull[Q, string](cols.SessionID),
		ShapeArea:      psql.WhereNull[Q, float64](cols.ShapeArea),
		ShapeLength:    psql.WhereNull[Q, float64](cols.ShapeLength),
		Treatdate:      psql.WhereNull[Q, int64](cols.Treatdate),
		TreatID:        psql.WhereNull[Q, string](cols.TreatID),
		Type:           psql.WhereNull[Q, string](cols.Type),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
