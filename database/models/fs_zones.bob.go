// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// FSZone is an object representing the database table.
type FSZone struct {
	Active         null.Val[int64]   `db:"active" `
	Creationdate   null.Val[int64]   `db:"creationdate" `
	Creator        null.Val[string]  `db:"creator" `
	Editdate       null.Val[int64]   `db:"editdate" `
	Editor         null.Val[string]  `db:"editor" `
	Globalid       null.Val[string]  `db:"globalid" `
	Name           null.Val[string]  `db:"name" `
	Objectid       int32             `db:"objectid,pk" `
	ShapeArea      null.Val[float64] `db:"shape__area" `
	ShapeLength    null.Val[float64] `db:"shape__length" `
	CreatedDate    null.Val[int64]   `db:"created_date" `
	CreatedUser    null.Val[string]  `db:"created_user" `
	GeometryX      null.Val[float64] `db:"geometry_x" `
	GeometryY      null.Val[float64] `db:"geometry_y" `
	LastEditedDate null.Val[int64]   `db:"last_edited_date" `
	LastEditedUser null.Val[string]  `db:"last_edited_user" `
	Updated        time.Time         `db:"updated" `
}

// FSZoneSlice is an alias for a slice of pointers to FSZone.
// This should almost always be used instead of []*FSZone.
type FSZoneSlice []*FSZone

// FSZones contains methods to work with the fs_zones table
var FSZones = psql.NewTablex[*FSZone, FSZoneSlice, *FSZoneSetter]("", "fs_zones", buildFSZoneColumns("fs_zones"))

// FSZonesQuery is a query on the fs_zones table
type FSZonesQuery = *psql.ViewQuery[*FSZone, FSZoneSlice]

func buildFSZoneColumns(alias string) fsZoneColumns {
	return fsZoneColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"active", "creationdate", "creator", "editdate", "editor", "globalid", "name", "objectid", "shape__area", "shape__length", "created_date", "created_user", "geometry_x", "geometry_y", "last_edited_date", "last_edited_user", "updated",
		).WithParent("fs_zones"),
		tableAlias:     alias,
		Active:         psql.Quote(alias, "active"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Globalid:       psql.Quote(alias, "globalid"),
		Name:           psql.Quote(alias, "name"),
		Objectid:       psql.Quote(alias, "objectid"),
		ShapeArea:      psql.Quote(alias, "shape__area"),
		ShapeLength:    psql.Quote(alias, "shape__length"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		Updated:        psql.Quote(alias, "updated"),
	}
}

type fsZoneColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Active         psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Globalid       psql.Expression
	Name           psql.Expression
	Objectid       psql.Expression
	ShapeArea      psql.Expression
	ShapeLength    psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	Updated        psql.Expression
}

func (c fsZoneColumns) Alias() string {
	return c.tableAlias
}

func (fsZoneColumns) AliasedAs(alias string) fsZoneColumns {
	return buildFSZoneColumns(alias)
}

// FSZoneSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FSZoneSetter struct {
	Active         omitnull.Val[int64]   `db:"active" `
	Creationdate   omitnull.Val[int64]   `db:"creationdate" `
	Creator        omitnull.Val[string]  `db:"creator" `
	Editdate       omitnull.Val[int64]   `db:"editdate" `
	Editor         omitnull.Val[string]  `db:"editor" `
	Globalid       omitnull.Val[string]  `db:"globalid" `
	Name           omitnull.Val[string]  `db:"name" `
	Objectid       omit.Val[int32]       `db:"objectid,pk" `
	ShapeArea      omitnull.Val[float64] `db:"shape__area" `
	ShapeLength    omitnull.Val[float64] `db:"shape__length" `
	CreatedDate    omitnull.Val[int64]   `db:"created_date" `
	CreatedUser    omitnull.Val[string]  `db:"created_user" `
	GeometryX      omitnull.Val[float64] `db:"geometry_x" `
	GeometryY      omitnull.Val[float64] `db:"geometry_y" `
	LastEditedDate omitnull.Val[int64]   `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]  `db:"last_edited_user" `
	Updated        omit.Val[time.Time]   `db:"updated" `
}

func (s FSZoneSetter) SetColumns() []string {
	vals := make([]string, 0, 17)
	if !s.Active.IsUnset() {
		vals = append(vals, "active")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.ShapeArea.IsUnset() {
		vals = append(vals, "shape__area")
	}
	if !s.ShapeLength.IsUnset() {
		vals = append(vals, "shape__length")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if s.Updated.IsValue() {
		vals = append(vals, "updated")
	}
	return vals
}

func (s FSZoneSetter) Overwrite(t *FSZone) {
	if !s.Active.IsUnset() {
		t.Active = s.Active.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Name.IsUnset() {
		t.Name = s.Name.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.ShapeArea.IsUnset() {
		t.ShapeArea = s.ShapeArea.MustGetNull()
	}
	if !s.ShapeLength.IsUnset() {
		t.ShapeLength = s.ShapeLength.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if s.Updated.IsValue() {
		t.Updated = s.Updated.MustGet()
	}
}

func (s *FSZoneSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return FSZones.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 17)
		if !s.Active.IsUnset() {
			vals[0] = psql.Arg(s.Active.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[3] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[4] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[5] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Name.IsUnset() {
			vals[6] = psql.Arg(s.Name.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[7] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.ShapeArea.IsUnset() {
			vals[8] = psql.Arg(s.ShapeArea.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.ShapeLength.IsUnset() {
			vals[9] = psql.Arg(s.ShapeLength.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[10] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[11] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[12] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[13] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[14] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[15] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if s.Updated.IsValue() {
			vals[16] = psql.Arg(s.Updated.MustGet())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FSZoneSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FSZoneSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 17)

	if !s.Active.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "active")...),
			psql.Arg(s.Active),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.ShapeArea.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__area")...),
			psql.Arg(s.ShapeArea),
		}})
	}

	if !s.ShapeLength.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "shape__length")...),
			psql.Arg(s.ShapeLength),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if s.Updated.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated")...),
			psql.Arg(s.Updated),
		}})
	}

	return exprs
}

// FindFSZone retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFSZone(ctx context.Context, exec bob.Executor, ObjectidPK int32, cols ...string) (*FSZone, error) {
	if len(cols) == 0 {
		return FSZones.Query(
			sm.Where(FSZones.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		).One(ctx, exec)
	}

	return FSZones.Query(
		sm.Where(FSZones.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Columns(FSZones.Columns.Only(cols...)),
	).One(ctx, exec)
}

// FSZoneExists checks the presence of a single record by primary key
func FSZoneExists(ctx context.Context, exec bob.Executor, ObjectidPK int32) (bool, error) {
	return FSZones.Query(
		sm.Where(FSZones.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after FSZone is retrieved from the database
func (o *FSZone) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSZones.AfterSelectHooks.RunHooks(ctx, exec, FSZoneSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = FSZones.AfterInsertHooks.RunHooks(ctx, exec, FSZoneSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = FSZones.AfterUpdateHooks.RunHooks(ctx, exec, FSZoneSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = FSZones.AfterDeleteHooks.RunHooks(ctx, exec, FSZoneSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the FSZone
func (o *FSZone) primaryKeyVals() bob.Expression {
	return psql.Arg(o.Objectid)
}

func (o *FSZone) pkEQ() dialect.Expression {
	return psql.Quote("fs_zones", "objectid").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the FSZone
func (o *FSZone) Update(ctx context.Context, exec bob.Executor, s *FSZoneSetter) error {
	v, err := FSZones.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single FSZone record with an executor
func (o *FSZone) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := FSZones.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the FSZone using the executor
func (o *FSZone) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FSZones.Query(
		sm.Where(FSZones.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FSZoneSlice is retrieved from the database
func (o FSZoneSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = FSZones.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = FSZones.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = FSZones.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = FSZones.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FSZoneSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("fs_zones", "objectid").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FSZoneSlice) copyMatchingRows(from ...*FSZone) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FSZoneSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSZones.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSZone:
				o.copyMatchingRows(retrieved)
			case []*FSZone:
				o.copyMatchingRows(retrieved...)
			case FSZoneSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSZone or a slice of FSZone
				// then run the AfterUpdateHooks on the slice
				_, err = FSZones.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FSZoneSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return FSZones.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *FSZone:
				o.copyMatchingRows(retrieved)
			case []*FSZone:
				o.copyMatchingRows(retrieved...)
			case FSZoneSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a FSZone or a slice of FSZone
				// then run the AfterDeleteHooks on the slice
				_, err = FSZones.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FSZoneSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FSZoneSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSZones.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FSZoneSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := FSZones.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FSZoneSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := FSZones.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type fsZoneWhere[Q psql.Filterable] struct {
	Active         psql.WhereNullMod[Q, int64]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Globalid       psql.WhereNullMod[Q, string]
	Name           psql.WhereNullMod[Q, string]
	Objectid       psql.WhereMod[Q, int32]
	ShapeArea      psql.WhereNullMod[Q, float64]
	ShapeLength    psql.WhereNullMod[Q, float64]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	Updated        psql.WhereMod[Q, time.Time]
}

func (fsZoneWhere[Q]) AliasedAs(alias string) fsZoneWhere[Q] {
	return buildFSZoneWhere[Q](buildFSZoneColumns(alias))
}

func buildFSZoneWhere[Q psql.Filterable](cols fsZoneColumns) fsZoneWhere[Q] {
	return fsZoneWhere[Q]{
		Active:         psql.WhereNull[Q, int64](cols.Active),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Name:           psql.WhereNull[Q, string](cols.Name),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		ShapeArea:      psql.WhereNull[Q, float64](cols.ShapeArea),
		ShapeLength:    psql.WhereNull[Q, float64](cols.ShapeLength),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		Updated:        psql.Where[Q, time.Time](cols.Updated),
	}
}
