// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// HistorySpeciesabundance is an object representing the database table.
type HistorySpeciesabundance struct {
	Bloodedfem     null.Val[int16]     `db:"bloodedfem" `
	Creationdate   null.Val[int64]     `db:"creationdate" `
	Creator        null.Val[string]    `db:"creator" `
	Eggs           null.Val[int16]     `db:"eggs" `
	Editdate       null.Val[int64]     `db:"editdate" `
	Editor         null.Val[string]    `db:"editor" `
	Females        null.Val[int64]     `db:"females" `
	Gravidfem      null.Val[int16]     `db:"gravidfem" `
	Globalid       null.Val[string]    `db:"globalid" `
	Larvae         null.Val[int16]     `db:"larvae" `
	Males          null.Val[int16]     `db:"males" `
	Objectid       int32               `db:"objectid,pk" `
	Poolstogen     null.Val[int16]     `db:"poolstogen" `
	Processed      null.Val[int16]     `db:"processed" `
	Pupae          null.Val[int16]     `db:"pupae" `
	Species        null.Val[string]    `db:"species" `
	Total          null.Val[int64]     `db:"total" `
	TrapdataID     null.Val[string]    `db:"trapdata_id" `
	Unknown        null.Val[int16]     `db:"unknown" `
	Created        null.Val[time.Time] `db:"created" `
	CreatedDate    null.Val[int64]     `db:"created_date" `
	CreatedUser    null.Val[string]    `db:"created_user" `
	GeometryX      null.Val[float64]   `db:"geometry_x" `
	GeometryY      null.Val[float64]   `db:"geometry_y" `
	Globalzscore   null.Val[float64]   `db:"globalzscore" `
	H3R7           null.Val[string]    `db:"h3r7" `
	H3R8           null.Val[string]    `db:"h3r8" `
	LastEditedDate null.Val[int64]     `db:"last_edited_date" `
	LastEditedUser null.Val[string]    `db:"last_edited_user" `
	R7score        null.Val[float64]   `db:"r7score" `
	R8score        null.Val[float64]   `db:"r8score" `
	Yearweek       null.Val[int64]     `db:"yearweek" `
	Version        int32               `db:"version,pk" `
}

// HistorySpeciesabundanceSlice is an alias for a slice of pointers to HistorySpeciesabundance.
// This should almost always be used instead of []*HistorySpeciesabundance.
type HistorySpeciesabundanceSlice []*HistorySpeciesabundance

// HistorySpeciesabundances contains methods to work with the history_speciesabundance table
var HistorySpeciesabundances = psql.NewTablex[*HistorySpeciesabundance, HistorySpeciesabundanceSlice, *HistorySpeciesabundanceSetter]("", "history_speciesabundance", buildHistorySpeciesabundanceColumns("history_speciesabundance"))

// HistorySpeciesabundancesQuery is a query on the history_speciesabundance table
type HistorySpeciesabundancesQuery = *psql.ViewQuery[*HistorySpeciesabundance, HistorySpeciesabundanceSlice]

func buildHistorySpeciesabundanceColumns(alias string) historySpeciesabundanceColumns {
	return historySpeciesabundanceColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"bloodedfem", "creationdate", "creator", "eggs", "editdate", "editor", "females", "gravidfem", "globalid", "larvae", "males", "objectid", "poolstogen", "processed", "pupae", "species", "total", "trapdata_id", "unknown", "created", "created_date", "created_user", "geometry_x", "geometry_y", "globalzscore", "h3r7", "h3r8", "last_edited_date", "last_edited_user", "r7score", "r8score", "yearweek", "version",
		).WithParent("history_speciesabundance"),
		tableAlias:     alias,
		Bloodedfem:     psql.Quote(alias, "bloodedfem"),
		Creationdate:   psql.Quote(alias, "creationdate"),
		Creator:        psql.Quote(alias, "creator"),
		Eggs:           psql.Quote(alias, "eggs"),
		Editdate:       psql.Quote(alias, "editdate"),
		Editor:         psql.Quote(alias, "editor"),
		Females:        psql.Quote(alias, "females"),
		Gravidfem:      psql.Quote(alias, "gravidfem"),
		Globalid:       psql.Quote(alias, "globalid"),
		Larvae:         psql.Quote(alias, "larvae"),
		Males:          psql.Quote(alias, "males"),
		Objectid:       psql.Quote(alias, "objectid"),
		Poolstogen:     psql.Quote(alias, "poolstogen"),
		Processed:      psql.Quote(alias, "processed"),
		Pupae:          psql.Quote(alias, "pupae"),
		Species:        psql.Quote(alias, "species"),
		Total:          psql.Quote(alias, "total"),
		TrapdataID:     psql.Quote(alias, "trapdata_id"),
		Unknown:        psql.Quote(alias, "unknown"),
		Created:        psql.Quote(alias, "created"),
		CreatedDate:    psql.Quote(alias, "created_date"),
		CreatedUser:    psql.Quote(alias, "created_user"),
		GeometryX:      psql.Quote(alias, "geometry_x"),
		GeometryY:      psql.Quote(alias, "geometry_y"),
		Globalzscore:   psql.Quote(alias, "globalzscore"),
		H3R7:           psql.Quote(alias, "h3r7"),
		H3R8:           psql.Quote(alias, "h3r8"),
		LastEditedDate: psql.Quote(alias, "last_edited_date"),
		LastEditedUser: psql.Quote(alias, "last_edited_user"),
		R7score:        psql.Quote(alias, "r7score"),
		R8score:        psql.Quote(alias, "r8score"),
		Yearweek:       psql.Quote(alias, "yearweek"),
		Version:        psql.Quote(alias, "version"),
	}
}

type historySpeciesabundanceColumns struct {
	expr.ColumnsExpr
	tableAlias     string
	Bloodedfem     psql.Expression
	Creationdate   psql.Expression
	Creator        psql.Expression
	Eggs           psql.Expression
	Editdate       psql.Expression
	Editor         psql.Expression
	Females        psql.Expression
	Gravidfem      psql.Expression
	Globalid       psql.Expression
	Larvae         psql.Expression
	Males          psql.Expression
	Objectid       psql.Expression
	Poolstogen     psql.Expression
	Processed      psql.Expression
	Pupae          psql.Expression
	Species        psql.Expression
	Total          psql.Expression
	TrapdataID     psql.Expression
	Unknown        psql.Expression
	Created        psql.Expression
	CreatedDate    psql.Expression
	CreatedUser    psql.Expression
	GeometryX      psql.Expression
	GeometryY      psql.Expression
	Globalzscore   psql.Expression
	H3R7           psql.Expression
	H3R8           psql.Expression
	LastEditedDate psql.Expression
	LastEditedUser psql.Expression
	R7score        psql.Expression
	R8score        psql.Expression
	Yearweek       psql.Expression
	Version        psql.Expression
}

func (c historySpeciesabundanceColumns) Alias() string {
	return c.tableAlias
}

func (historySpeciesabundanceColumns) AliasedAs(alias string) historySpeciesabundanceColumns {
	return buildHistorySpeciesabundanceColumns(alias)
}

// HistorySpeciesabundanceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type HistorySpeciesabundanceSetter struct {
	Bloodedfem     omitnull.Val[int16]     `db:"bloodedfem" `
	Creationdate   omitnull.Val[int64]     `db:"creationdate" `
	Creator        omitnull.Val[string]    `db:"creator" `
	Eggs           omitnull.Val[int16]     `db:"eggs" `
	Editdate       omitnull.Val[int64]     `db:"editdate" `
	Editor         omitnull.Val[string]    `db:"editor" `
	Females        omitnull.Val[int64]     `db:"females" `
	Gravidfem      omitnull.Val[int16]     `db:"gravidfem" `
	Globalid       omitnull.Val[string]    `db:"globalid" `
	Larvae         omitnull.Val[int16]     `db:"larvae" `
	Males          omitnull.Val[int16]     `db:"males" `
	Objectid       omit.Val[int32]         `db:"objectid,pk" `
	Poolstogen     omitnull.Val[int16]     `db:"poolstogen" `
	Processed      omitnull.Val[int16]     `db:"processed" `
	Pupae          omitnull.Val[int16]     `db:"pupae" `
	Species        omitnull.Val[string]    `db:"species" `
	Total          omitnull.Val[int64]     `db:"total" `
	TrapdataID     omitnull.Val[string]    `db:"trapdata_id" `
	Unknown        omitnull.Val[int16]     `db:"unknown" `
	Created        omitnull.Val[time.Time] `db:"created" `
	CreatedDate    omitnull.Val[int64]     `db:"created_date" `
	CreatedUser    omitnull.Val[string]    `db:"created_user" `
	GeometryX      omitnull.Val[float64]   `db:"geometry_x" `
	GeometryY      omitnull.Val[float64]   `db:"geometry_y" `
	Globalzscore   omitnull.Val[float64]   `db:"globalzscore" `
	H3R7           omitnull.Val[string]    `db:"h3r7" `
	H3R8           omitnull.Val[string]    `db:"h3r8" `
	LastEditedDate omitnull.Val[int64]     `db:"last_edited_date" `
	LastEditedUser omitnull.Val[string]    `db:"last_edited_user" `
	R7score        omitnull.Val[float64]   `db:"r7score" `
	R8score        omitnull.Val[float64]   `db:"r8score" `
	Yearweek       omitnull.Val[int64]     `db:"yearweek" `
	Version        omit.Val[int32]         `db:"version,pk" `
}

func (s HistorySpeciesabundanceSetter) SetColumns() []string {
	vals := make([]string, 0, 33)
	if !s.Bloodedfem.IsUnset() {
		vals = append(vals, "bloodedfem")
	}
	if !s.Creationdate.IsUnset() {
		vals = append(vals, "creationdate")
	}
	if !s.Creator.IsUnset() {
		vals = append(vals, "creator")
	}
	if !s.Eggs.IsUnset() {
		vals = append(vals, "eggs")
	}
	if !s.Editdate.IsUnset() {
		vals = append(vals, "editdate")
	}
	if !s.Editor.IsUnset() {
		vals = append(vals, "editor")
	}
	if !s.Females.IsUnset() {
		vals = append(vals, "females")
	}
	if !s.Gravidfem.IsUnset() {
		vals = append(vals, "gravidfem")
	}
	if !s.Globalid.IsUnset() {
		vals = append(vals, "globalid")
	}
	if !s.Larvae.IsUnset() {
		vals = append(vals, "larvae")
	}
	if !s.Males.IsUnset() {
		vals = append(vals, "males")
	}
	if s.Objectid.IsValue() {
		vals = append(vals, "objectid")
	}
	if !s.Poolstogen.IsUnset() {
		vals = append(vals, "poolstogen")
	}
	if !s.Processed.IsUnset() {
		vals = append(vals, "processed")
	}
	if !s.Pupae.IsUnset() {
		vals = append(vals, "pupae")
	}
	if !s.Species.IsUnset() {
		vals = append(vals, "species")
	}
	if !s.Total.IsUnset() {
		vals = append(vals, "total")
	}
	if !s.TrapdataID.IsUnset() {
		vals = append(vals, "trapdata_id")
	}
	if !s.Unknown.IsUnset() {
		vals = append(vals, "unknown")
	}
	if !s.Created.IsUnset() {
		vals = append(vals, "created")
	}
	if !s.CreatedDate.IsUnset() {
		vals = append(vals, "created_date")
	}
	if !s.CreatedUser.IsUnset() {
		vals = append(vals, "created_user")
	}
	if !s.GeometryX.IsUnset() {
		vals = append(vals, "geometry_x")
	}
	if !s.GeometryY.IsUnset() {
		vals = append(vals, "geometry_y")
	}
	if !s.Globalzscore.IsUnset() {
		vals = append(vals, "globalzscore")
	}
	if !s.H3R7.IsUnset() {
		vals = append(vals, "h3r7")
	}
	if !s.H3R8.IsUnset() {
		vals = append(vals, "h3r8")
	}
	if !s.LastEditedDate.IsUnset() {
		vals = append(vals, "last_edited_date")
	}
	if !s.LastEditedUser.IsUnset() {
		vals = append(vals, "last_edited_user")
	}
	if !s.R7score.IsUnset() {
		vals = append(vals, "r7score")
	}
	if !s.R8score.IsUnset() {
		vals = append(vals, "r8score")
	}
	if !s.Yearweek.IsUnset() {
		vals = append(vals, "yearweek")
	}
	if s.Version.IsValue() {
		vals = append(vals, "version")
	}
	return vals
}

func (s HistorySpeciesabundanceSetter) Overwrite(t *HistorySpeciesabundance) {
	if !s.Bloodedfem.IsUnset() {
		t.Bloodedfem = s.Bloodedfem.MustGetNull()
	}
	if !s.Creationdate.IsUnset() {
		t.Creationdate = s.Creationdate.MustGetNull()
	}
	if !s.Creator.IsUnset() {
		t.Creator = s.Creator.MustGetNull()
	}
	if !s.Eggs.IsUnset() {
		t.Eggs = s.Eggs.MustGetNull()
	}
	if !s.Editdate.IsUnset() {
		t.Editdate = s.Editdate.MustGetNull()
	}
	if !s.Editor.IsUnset() {
		t.Editor = s.Editor.MustGetNull()
	}
	if !s.Females.IsUnset() {
		t.Females = s.Females.MustGetNull()
	}
	if !s.Gravidfem.IsUnset() {
		t.Gravidfem = s.Gravidfem.MustGetNull()
	}
	if !s.Globalid.IsUnset() {
		t.Globalid = s.Globalid.MustGetNull()
	}
	if !s.Larvae.IsUnset() {
		t.Larvae = s.Larvae.MustGetNull()
	}
	if !s.Males.IsUnset() {
		t.Males = s.Males.MustGetNull()
	}
	if s.Objectid.IsValue() {
		t.Objectid = s.Objectid.MustGet()
	}
	if !s.Poolstogen.IsUnset() {
		t.Poolstogen = s.Poolstogen.MustGetNull()
	}
	if !s.Processed.IsUnset() {
		t.Processed = s.Processed.MustGetNull()
	}
	if !s.Pupae.IsUnset() {
		t.Pupae = s.Pupae.MustGetNull()
	}
	if !s.Species.IsUnset() {
		t.Species = s.Species.MustGetNull()
	}
	if !s.Total.IsUnset() {
		t.Total = s.Total.MustGetNull()
	}
	if !s.TrapdataID.IsUnset() {
		t.TrapdataID = s.TrapdataID.MustGetNull()
	}
	if !s.Unknown.IsUnset() {
		t.Unknown = s.Unknown.MustGetNull()
	}
	if !s.Created.IsUnset() {
		t.Created = s.Created.MustGetNull()
	}
	if !s.CreatedDate.IsUnset() {
		t.CreatedDate = s.CreatedDate.MustGetNull()
	}
	if !s.CreatedUser.IsUnset() {
		t.CreatedUser = s.CreatedUser.MustGetNull()
	}
	if !s.GeometryX.IsUnset() {
		t.GeometryX = s.GeometryX.MustGetNull()
	}
	if !s.GeometryY.IsUnset() {
		t.GeometryY = s.GeometryY.MustGetNull()
	}
	if !s.Globalzscore.IsUnset() {
		t.Globalzscore = s.Globalzscore.MustGetNull()
	}
	if !s.H3R7.IsUnset() {
		t.H3R7 = s.H3R7.MustGetNull()
	}
	if !s.H3R8.IsUnset() {
		t.H3R8 = s.H3R8.MustGetNull()
	}
	if !s.LastEditedDate.IsUnset() {
		t.LastEditedDate = s.LastEditedDate.MustGetNull()
	}
	if !s.LastEditedUser.IsUnset() {
		t.LastEditedUser = s.LastEditedUser.MustGetNull()
	}
	if !s.R7score.IsUnset() {
		t.R7score = s.R7score.MustGetNull()
	}
	if !s.R8score.IsUnset() {
		t.R8score = s.R8score.MustGetNull()
	}
	if !s.Yearweek.IsUnset() {
		t.Yearweek = s.Yearweek.MustGetNull()
	}
	if s.Version.IsValue() {
		t.Version = s.Version.MustGet()
	}
}

func (s *HistorySpeciesabundanceSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return HistorySpeciesabundances.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 33)
		if !s.Bloodedfem.IsUnset() {
			vals[0] = psql.Arg(s.Bloodedfem.MustGetNull())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Creationdate.IsUnset() {
			vals[1] = psql.Arg(s.Creationdate.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.Creator.IsUnset() {
			vals[2] = psql.Arg(s.Creator.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Eggs.IsUnset() {
			vals[3] = psql.Arg(s.Eggs.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.Editdate.IsUnset() {
			vals[4] = psql.Arg(s.Editdate.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.Editor.IsUnset() {
			vals[5] = psql.Arg(s.Editor.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.Females.IsUnset() {
			vals[6] = psql.Arg(s.Females.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if !s.Gravidfem.IsUnset() {
			vals[7] = psql.Arg(s.Gravidfem.MustGetNull())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if !s.Globalid.IsUnset() {
			vals[8] = psql.Arg(s.Globalid.MustGetNull())
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		if !s.Larvae.IsUnset() {
			vals[9] = psql.Arg(s.Larvae.MustGetNull())
		} else {
			vals[9] = psql.Raw("DEFAULT")
		}

		if !s.Males.IsUnset() {
			vals[10] = psql.Arg(s.Males.MustGetNull())
		} else {
			vals[10] = psql.Raw("DEFAULT")
		}

		if s.Objectid.IsValue() {
			vals[11] = psql.Arg(s.Objectid.MustGet())
		} else {
			vals[11] = psql.Raw("DEFAULT")
		}

		if !s.Poolstogen.IsUnset() {
			vals[12] = psql.Arg(s.Poolstogen.MustGetNull())
		} else {
			vals[12] = psql.Raw("DEFAULT")
		}

		if !s.Processed.IsUnset() {
			vals[13] = psql.Arg(s.Processed.MustGetNull())
		} else {
			vals[13] = psql.Raw("DEFAULT")
		}

		if !s.Pupae.IsUnset() {
			vals[14] = psql.Arg(s.Pupae.MustGetNull())
		} else {
			vals[14] = psql.Raw("DEFAULT")
		}

		if !s.Species.IsUnset() {
			vals[15] = psql.Arg(s.Species.MustGetNull())
		} else {
			vals[15] = psql.Raw("DEFAULT")
		}

		if !s.Total.IsUnset() {
			vals[16] = psql.Arg(s.Total.MustGetNull())
		} else {
			vals[16] = psql.Raw("DEFAULT")
		}

		if !s.TrapdataID.IsUnset() {
			vals[17] = psql.Arg(s.TrapdataID.MustGetNull())
		} else {
			vals[17] = psql.Raw("DEFAULT")
		}

		if !s.Unknown.IsUnset() {
			vals[18] = psql.Arg(s.Unknown.MustGetNull())
		} else {
			vals[18] = psql.Raw("DEFAULT")
		}

		if !s.Created.IsUnset() {
			vals[19] = psql.Arg(s.Created.MustGetNull())
		} else {
			vals[19] = psql.Raw("DEFAULT")
		}

		if !s.CreatedDate.IsUnset() {
			vals[20] = psql.Arg(s.CreatedDate.MustGetNull())
		} else {
			vals[20] = psql.Raw("DEFAULT")
		}

		if !s.CreatedUser.IsUnset() {
			vals[21] = psql.Arg(s.CreatedUser.MustGetNull())
		} else {
			vals[21] = psql.Raw("DEFAULT")
		}

		if !s.GeometryX.IsUnset() {
			vals[22] = psql.Arg(s.GeometryX.MustGetNull())
		} else {
			vals[22] = psql.Raw("DEFAULT")
		}

		if !s.GeometryY.IsUnset() {
			vals[23] = psql.Arg(s.GeometryY.MustGetNull())
		} else {
			vals[23] = psql.Raw("DEFAULT")
		}

		if !s.Globalzscore.IsUnset() {
			vals[24] = psql.Arg(s.Globalzscore.MustGetNull())
		} else {
			vals[24] = psql.Raw("DEFAULT")
		}

		if !s.H3R7.IsUnset() {
			vals[25] = psql.Arg(s.H3R7.MustGetNull())
		} else {
			vals[25] = psql.Raw("DEFAULT")
		}

		if !s.H3R8.IsUnset() {
			vals[26] = psql.Arg(s.H3R8.MustGetNull())
		} else {
			vals[26] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedDate.IsUnset() {
			vals[27] = psql.Arg(s.LastEditedDate.MustGetNull())
		} else {
			vals[27] = psql.Raw("DEFAULT")
		}

		if !s.LastEditedUser.IsUnset() {
			vals[28] = psql.Arg(s.LastEditedUser.MustGetNull())
		} else {
			vals[28] = psql.Raw("DEFAULT")
		}

		if !s.R7score.IsUnset() {
			vals[29] = psql.Arg(s.R7score.MustGetNull())
		} else {
			vals[29] = psql.Raw("DEFAULT")
		}

		if !s.R8score.IsUnset() {
			vals[30] = psql.Arg(s.R8score.MustGetNull())
		} else {
			vals[30] = psql.Raw("DEFAULT")
		}

		if !s.Yearweek.IsUnset() {
			vals[31] = psql.Arg(s.Yearweek.MustGetNull())
		} else {
			vals[31] = psql.Raw("DEFAULT")
		}

		if s.Version.IsValue() {
			vals[32] = psql.Arg(s.Version.MustGet())
		} else {
			vals[32] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s HistorySpeciesabundanceSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s HistorySpeciesabundanceSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 33)

	if !s.Bloodedfem.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "bloodedfem")...),
			psql.Arg(s.Bloodedfem),
		}})
	}

	if !s.Creationdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creationdate")...),
			psql.Arg(s.Creationdate),
		}})
	}

	if !s.Creator.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "creator")...),
			psql.Arg(s.Creator),
		}})
	}

	if !s.Eggs.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "eggs")...),
			psql.Arg(s.Eggs),
		}})
	}

	if !s.Editdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editdate")...),
			psql.Arg(s.Editdate),
		}})
	}

	if !s.Editor.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "editor")...),
			psql.Arg(s.Editor),
		}})
	}

	if !s.Females.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "females")...),
			psql.Arg(s.Females),
		}})
	}

	if !s.Gravidfem.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "gravidfem")...),
			psql.Arg(s.Gravidfem),
		}})
	}

	if !s.Globalid.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalid")...),
			psql.Arg(s.Globalid),
		}})
	}

	if !s.Larvae.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "larvae")...),
			psql.Arg(s.Larvae),
		}})
	}

	if !s.Males.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "males")...),
			psql.Arg(s.Males),
		}})
	}

	if s.Objectid.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "objectid")...),
			psql.Arg(s.Objectid),
		}})
	}

	if !s.Poolstogen.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "poolstogen")...),
			psql.Arg(s.Poolstogen),
		}})
	}

	if !s.Processed.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "processed")...),
			psql.Arg(s.Processed),
		}})
	}

	if !s.Pupae.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "pupae")...),
			psql.Arg(s.Pupae),
		}})
	}

	if !s.Species.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "species")...),
			psql.Arg(s.Species),
		}})
	}

	if !s.Total.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "total")...),
			psql.Arg(s.Total),
		}})
	}

	if !s.TrapdataID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "trapdata_id")...),
			psql.Arg(s.TrapdataID),
		}})
	}

	if !s.Unknown.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "unknown")...),
			psql.Arg(s.Unknown),
		}})
	}

	if !s.Created.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created")...),
			psql.Arg(s.Created),
		}})
	}

	if !s.CreatedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_date")...),
			psql.Arg(s.CreatedDate),
		}})
	}

	if !s.CreatedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_user")...),
			psql.Arg(s.CreatedUser),
		}})
	}

	if !s.GeometryX.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_x")...),
			psql.Arg(s.GeometryX),
		}})
	}

	if !s.GeometryY.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "geometry_y")...),
			psql.Arg(s.GeometryY),
		}})
	}

	if !s.Globalzscore.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "globalzscore")...),
			psql.Arg(s.Globalzscore),
		}})
	}

	if !s.H3R7.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "h3r7")...),
			psql.Arg(s.H3R7),
		}})
	}

	if !s.H3R8.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "h3r8")...),
			psql.Arg(s.H3R8),
		}})
	}

	if !s.LastEditedDate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_date")...),
			psql.Arg(s.LastEditedDate),
		}})
	}

	if !s.LastEditedUser.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "last_edited_user")...),
			psql.Arg(s.LastEditedUser),
		}})
	}

	if !s.R7score.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "r7score")...),
			psql.Arg(s.R7score),
		}})
	}

	if !s.R8score.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "r8score")...),
			psql.Arg(s.R8score),
		}})
	}

	if !s.Yearweek.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "yearweek")...),
			psql.Arg(s.Yearweek),
		}})
	}

	if s.Version.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "version")...),
			psql.Arg(s.Version),
		}})
	}

	return exprs
}

// FindHistorySpeciesabundance retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindHistorySpeciesabundance(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32, cols ...string) (*HistorySpeciesabundance, error) {
	if len(cols) == 0 {
		return HistorySpeciesabundances.Query(
			sm.Where(HistorySpeciesabundances.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
			sm.Where(HistorySpeciesabundances.Columns.Version.EQ(psql.Arg(VersionPK))),
		).One(ctx, exec)
	}

	return HistorySpeciesabundances.Query(
		sm.Where(HistorySpeciesabundances.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistorySpeciesabundances.Columns.Version.EQ(psql.Arg(VersionPK))),
		sm.Columns(HistorySpeciesabundances.Columns.Only(cols...)),
	).One(ctx, exec)
}

// HistorySpeciesabundanceExists checks the presence of a single record by primary key
func HistorySpeciesabundanceExists(ctx context.Context, exec bob.Executor, ObjectidPK int32, VersionPK int32) (bool, error) {
	return HistorySpeciesabundances.Query(
		sm.Where(HistorySpeciesabundances.Columns.Objectid.EQ(psql.Arg(ObjectidPK))),
		sm.Where(HistorySpeciesabundances.Columns.Version.EQ(psql.Arg(VersionPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after HistorySpeciesabundance is retrieved from the database
func (o *HistorySpeciesabundance) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistorySpeciesabundances.AfterSelectHooks.RunHooks(ctx, exec, HistorySpeciesabundanceSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = HistorySpeciesabundances.AfterInsertHooks.RunHooks(ctx, exec, HistorySpeciesabundanceSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = HistorySpeciesabundances.AfterUpdateHooks.RunHooks(ctx, exec, HistorySpeciesabundanceSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = HistorySpeciesabundances.AfterDeleteHooks.RunHooks(ctx, exec, HistorySpeciesabundanceSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the HistorySpeciesabundance
func (o *HistorySpeciesabundance) primaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.Objectid,
		o.Version,
	)
}

func (o *HistorySpeciesabundance) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("history_speciesabundance", "objectid"), psql.Quote("history_speciesabundance", "version")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the HistorySpeciesabundance
func (o *HistorySpeciesabundance) Update(ctx context.Context, exec bob.Executor, s *HistorySpeciesabundanceSetter) error {
	v, err := HistorySpeciesabundances.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single HistorySpeciesabundance record with an executor
func (o *HistorySpeciesabundance) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := HistorySpeciesabundances.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the HistorySpeciesabundance using the executor
func (o *HistorySpeciesabundance) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := HistorySpeciesabundances.Query(
		sm.Where(HistorySpeciesabundances.Columns.Objectid.EQ(psql.Arg(o.Objectid))),
		sm.Where(HistorySpeciesabundances.Columns.Version.EQ(psql.Arg(o.Version))),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after HistorySpeciesabundanceSlice is retrieved from the database
func (o HistorySpeciesabundanceSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = HistorySpeciesabundances.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = HistorySpeciesabundances.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = HistorySpeciesabundances.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = HistorySpeciesabundances.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o HistorySpeciesabundanceSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("history_speciesabundance", "objectid"), psql.Quote("history_speciesabundance", "version")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o HistorySpeciesabundanceSlice) copyMatchingRows(from ...*HistorySpeciesabundance) {
	for i, old := range o {
		for _, new := range from {
			if new.Objectid != old.Objectid {
				continue
			}
			if new.Version != old.Version {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o HistorySpeciesabundanceSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistorySpeciesabundances.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistorySpeciesabundance:
				o.copyMatchingRows(retrieved)
			case []*HistorySpeciesabundance:
				o.copyMatchingRows(retrieved...)
			case HistorySpeciesabundanceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistorySpeciesabundance or a slice of HistorySpeciesabundance
				// then run the AfterUpdateHooks on the slice
				_, err = HistorySpeciesabundances.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o HistorySpeciesabundanceSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return HistorySpeciesabundances.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *HistorySpeciesabundance:
				o.copyMatchingRows(retrieved)
			case []*HistorySpeciesabundance:
				o.copyMatchingRows(retrieved...)
			case HistorySpeciesabundanceSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a HistorySpeciesabundance or a slice of HistorySpeciesabundance
				// then run the AfterDeleteHooks on the slice
				_, err = HistorySpeciesabundances.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o HistorySpeciesabundanceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals HistorySpeciesabundanceSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistorySpeciesabundances.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o HistorySpeciesabundanceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := HistorySpeciesabundances.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o HistorySpeciesabundanceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := HistorySpeciesabundances.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type historySpeciesabundanceWhere[Q psql.Filterable] struct {
	Bloodedfem     psql.WhereNullMod[Q, int16]
	Creationdate   psql.WhereNullMod[Q, int64]
	Creator        psql.WhereNullMod[Q, string]
	Eggs           psql.WhereNullMod[Q, int16]
	Editdate       psql.WhereNullMod[Q, int64]
	Editor         psql.WhereNullMod[Q, string]
	Females        psql.WhereNullMod[Q, int64]
	Gravidfem      psql.WhereNullMod[Q, int16]
	Globalid       psql.WhereNullMod[Q, string]
	Larvae         psql.WhereNullMod[Q, int16]
	Males          psql.WhereNullMod[Q, int16]
	Objectid       psql.WhereMod[Q, int32]
	Poolstogen     psql.WhereNullMod[Q, int16]
	Processed      psql.WhereNullMod[Q, int16]
	Pupae          psql.WhereNullMod[Q, int16]
	Species        psql.WhereNullMod[Q, string]
	Total          psql.WhereNullMod[Q, int64]
	TrapdataID     psql.WhereNullMod[Q, string]
	Unknown        psql.WhereNullMod[Q, int16]
	Created        psql.WhereNullMod[Q, time.Time]
	CreatedDate    psql.WhereNullMod[Q, int64]
	CreatedUser    psql.WhereNullMod[Q, string]
	GeometryX      psql.WhereNullMod[Q, float64]
	GeometryY      psql.WhereNullMod[Q, float64]
	Globalzscore   psql.WhereNullMod[Q, float64]
	H3R7           psql.WhereNullMod[Q, string]
	H3R8           psql.WhereNullMod[Q, string]
	LastEditedDate psql.WhereNullMod[Q, int64]
	LastEditedUser psql.WhereNullMod[Q, string]
	R7score        psql.WhereNullMod[Q, float64]
	R8score        psql.WhereNullMod[Q, float64]
	Yearweek       psql.WhereNullMod[Q, int64]
	Version        psql.WhereMod[Q, int32]
}

func (historySpeciesabundanceWhere[Q]) AliasedAs(alias string) historySpeciesabundanceWhere[Q] {
	return buildHistorySpeciesabundanceWhere[Q](buildHistorySpeciesabundanceColumns(alias))
}

func buildHistorySpeciesabundanceWhere[Q psql.Filterable](cols historySpeciesabundanceColumns) historySpeciesabundanceWhere[Q] {
	return historySpeciesabundanceWhere[Q]{
		Bloodedfem:     psql.WhereNull[Q, int16](cols.Bloodedfem),
		Creationdate:   psql.WhereNull[Q, int64](cols.Creationdate),
		Creator:        psql.WhereNull[Q, string](cols.Creator),
		Eggs:           psql.WhereNull[Q, int16](cols.Eggs),
		Editdate:       psql.WhereNull[Q, int64](cols.Editdate),
		Editor:         psql.WhereNull[Q, string](cols.Editor),
		Females:        psql.WhereNull[Q, int64](cols.Females),
		Gravidfem:      psql.WhereNull[Q, int16](cols.Gravidfem),
		Globalid:       psql.WhereNull[Q, string](cols.Globalid),
		Larvae:         psql.WhereNull[Q, int16](cols.Larvae),
		Males:          psql.WhereNull[Q, int16](cols.Males),
		Objectid:       psql.Where[Q, int32](cols.Objectid),
		Poolstogen:     psql.WhereNull[Q, int16](cols.Poolstogen),
		Processed:      psql.WhereNull[Q, int16](cols.Processed),
		Pupae:          psql.WhereNull[Q, int16](cols.Pupae),
		Species:        psql.WhereNull[Q, string](cols.Species),
		Total:          psql.WhereNull[Q, int64](cols.Total),
		TrapdataID:     psql.WhereNull[Q, string](cols.TrapdataID),
		Unknown:        psql.WhereNull[Q, int16](cols.Unknown),
		Created:        psql.WhereNull[Q, time.Time](cols.Created),
		CreatedDate:    psql.WhereNull[Q, int64](cols.CreatedDate),
		CreatedUser:    psql.WhereNull[Q, string](cols.CreatedUser),
		GeometryX:      psql.WhereNull[Q, float64](cols.GeometryX),
		GeometryY:      psql.WhereNull[Q, float64](cols.GeometryY),
		Globalzscore:   psql.WhereNull[Q, float64](cols.Globalzscore),
		H3R7:           psql.WhereNull[Q, string](cols.H3R7),
		H3R8:           psql.WhereNull[Q, string](cols.H3R8),
		LastEditedDate: psql.WhereNull[Q, int64](cols.LastEditedDate),
		LastEditedUser: psql.WhereNull[Q, string](cols.LastEditedUser),
		R7score:        psql.WhereNull[Q, float64](cols.R7score),
		R8score:        psql.WhereNull[Q, float64](cols.R8score),
		Yearweek:       psql.WhereNull[Q, int64](cols.Yearweek),
		Version:        psql.Where[Q, int32](cols.Version),
	}
}
