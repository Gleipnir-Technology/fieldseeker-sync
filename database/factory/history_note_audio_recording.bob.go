// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type HistoryNoteAudioRecordingMod interface {
	Apply(context.Context, *HistoryNoteAudioRecordingTemplate)
}

type HistoryNoteAudioRecordingModFunc func(context.Context, *HistoryNoteAudioRecordingTemplate)

func (f HistoryNoteAudioRecordingModFunc) Apply(ctx context.Context, n *HistoryNoteAudioRecordingTemplate) {
	f(ctx, n)
}

type HistoryNoteAudioRecordingModSlice []HistoryNoteAudioRecordingMod

func (mods HistoryNoteAudioRecordingModSlice) Apply(ctx context.Context, n *HistoryNoteAudioRecordingTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// HistoryNoteAudioRecordingTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type HistoryNoteAudioRecordingTemplate struct {
	Created    func() null.Val[time.Time]
	Duration   func() string
	NoteUUID   func() null.Val[string]
	Transcript func() null.Val[string]
	UUID       func() string
	Version    func() int32

	r historyNoteAudioRecordingR
	f *Factory

	alreadyPersisted bool
}

type historyNoteAudioRecordingR struct {
	Note *historyNoteAudioRecordingRNoteR
}

type historyNoteAudioRecordingRNoteR struct {
	o *NoteTemplate
}

// Apply mods to the HistoryNoteAudioRecordingTemplate
func (o *HistoryNoteAudioRecordingTemplate) Apply(ctx context.Context, mods ...HistoryNoteAudioRecordingMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.HistoryNoteAudioRecording
// according to the relationships in the template. Nothing is inserted into the db
func (t HistoryNoteAudioRecordingTemplate) setModelRels(o *models.HistoryNoteAudioRecording) {
	if t.r.Note != nil {
		rel := t.r.Note.o.Build()
		rel.R.HistoryNoteAudioRecordings = append(rel.R.HistoryNoteAudioRecordings, o)
		o.NoteUUID = null.From(rel.UUID) // h2
		o.R.Note = rel
	}
}

// BuildSetter returns an *models.HistoryNoteAudioRecordingSetter
// this does nothing with the relationship templates
func (o HistoryNoteAudioRecordingTemplate) BuildSetter() *models.HistoryNoteAudioRecordingSetter {
	m := &models.HistoryNoteAudioRecordingSetter{}

	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.Duration != nil {
		val := o.Duration()
		m.Duration = omit.From(val)
	}
	if o.NoteUUID != nil {
		val := o.NoteUUID()
		m.NoteUUID = omitnull.FromNull(val)
	}
	if o.Transcript != nil {
		val := o.Transcript()
		m.Transcript = omitnull.FromNull(val)
	}
	if o.UUID != nil {
		val := o.UUID()
		m.UUID = omit.From(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.HistoryNoteAudioRecordingSetter
// this does nothing with the relationship templates
func (o HistoryNoteAudioRecordingTemplate) BuildManySetter(number int) []*models.HistoryNoteAudioRecordingSetter {
	m := make([]*models.HistoryNoteAudioRecordingSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.HistoryNoteAudioRecording
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryNoteAudioRecordingTemplate.Create
func (o HistoryNoteAudioRecordingTemplate) Build() *models.HistoryNoteAudioRecording {
	m := &models.HistoryNoteAudioRecording{}

	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.Duration != nil {
		m.Duration = o.Duration()
	}
	if o.NoteUUID != nil {
		m.NoteUUID = o.NoteUUID()
	}
	if o.Transcript != nil {
		m.Transcript = o.Transcript()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.HistoryNoteAudioRecordingSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryNoteAudioRecordingTemplate.CreateMany
func (o HistoryNoteAudioRecordingTemplate) BuildMany(number int) models.HistoryNoteAudioRecordingSlice {
	m := make(models.HistoryNoteAudioRecordingSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableHistoryNoteAudioRecording(m *models.HistoryNoteAudioRecordingSetter) {
	if !(m.Duration.IsValue()) {
		val := random_string(nil)
		m.Duration = omit.From(val)
	}
	if !(m.UUID.IsValue()) {
		val := random_string(nil)
		m.UUID = omit.From(val)
	}
	if !(m.Version.IsValue()) {
		val := random_int32(nil)
		m.Version = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.HistoryNoteAudioRecording
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *HistoryNoteAudioRecordingTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.HistoryNoteAudioRecording) error {
	var err error

	isNoteDone, _ := historyNoteAudioRecordingRelNoteCtx.Value(ctx)
	if !isNoteDone && o.r.Note != nil {
		ctx = historyNoteAudioRecordingRelNoteCtx.WithValue(ctx, true)
		if o.r.Note.o.alreadyPersisted {
			m.R.Note = o.r.Note.o.Build()
		} else {
			var rel0 *models.Note
			rel0, err = o.r.Note.o.Create(ctx, exec)
			if err != nil {
				return err
			}
			err = m.AttachNote(ctx, exec, rel0)
			if err != nil {
				return err
			}
		}

	}

	return err
}

// Create builds a historyNoteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *HistoryNoteAudioRecordingTemplate) Create(ctx context.Context, exec bob.Executor) (*models.HistoryNoteAudioRecording, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableHistoryNoteAudioRecording(opt)

	m, err := models.HistoryNoteAudioRecordings.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a historyNoteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *HistoryNoteAudioRecordingTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.HistoryNoteAudioRecording {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a historyNoteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *HistoryNoteAudioRecordingTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.HistoryNoteAudioRecording {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple historyNoteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o HistoryNoteAudioRecordingTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.HistoryNoteAudioRecordingSlice, error) {
	var err error
	m := make(models.HistoryNoteAudioRecordingSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple historyNoteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o HistoryNoteAudioRecordingTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.HistoryNoteAudioRecordingSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple historyNoteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o HistoryNoteAudioRecordingTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.HistoryNoteAudioRecordingSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// HistoryNoteAudioRecording has methods that act as mods for the HistoryNoteAudioRecordingTemplate
var HistoryNoteAudioRecordingMods historyNoteAudioRecordingMods

type historyNoteAudioRecordingMods struct{}

func (m historyNoteAudioRecordingMods) RandomizeAllColumns(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModSlice{
		HistoryNoteAudioRecordingMods.RandomCreated(f),
		HistoryNoteAudioRecordingMods.RandomDuration(f),
		HistoryNoteAudioRecordingMods.RandomNoteUUID(f),
		HistoryNoteAudioRecordingMods.RandomTranscript(f),
		HistoryNoteAudioRecordingMods.RandomUUID(f),
		HistoryNoteAudioRecordingMods.RandomVersion(f),
	}
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) Created(val null.Val[time.Time]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) CreatedFunc(f func() null.Val[time.Time]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetCreated() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteAudioRecordingMods) RandomCreated(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteAudioRecordingMods) RandomCreatedNotNull(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) Duration(val string) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Duration = func() string { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) DurationFunc(f func() string) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Duration = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetDuration() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Duration = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteAudioRecordingMods) RandomDuration(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Duration = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) NoteUUID(val null.Val[string]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) NoteUUIDFunc(f func() null.Val[string]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.NoteUUID = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetNoteUUID() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.NoteUUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteAudioRecordingMods) RandomNoteUUID(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteAudioRecordingMods) RandomNoteUUIDNotNull(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) Transcript(val null.Val[string]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) TranscriptFunc(f func() null.Val[string]) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Transcript = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetTranscript() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Transcript = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteAudioRecordingMods) RandomTranscript(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteAudioRecordingMods) RandomTranscriptNotNull(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) UUID(val string) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.UUID = func() string { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) UUIDFunc(f func() string) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetUUID() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteAudioRecordingMods) RandomUUID(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.UUID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m historyNoteAudioRecordingMods) Version(val int32) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyNoteAudioRecordingMods) VersionFunc(f func() int32) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m historyNoteAudioRecordingMods) UnsetVersion() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteAudioRecordingMods) RandomVersion(f *faker.Faker) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(_ context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

func (m historyNoteAudioRecordingMods) WithParentsCascading() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(ctx context.Context, o *HistoryNoteAudioRecordingTemplate) {
		if isDone, _ := historyNoteAudioRecordingWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = historyNoteAudioRecordingWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewNoteWithContext(ctx, NoteMods.WithParentsCascading())
			m.WithNote(related).Apply(ctx, o)
		}
	})
}

func (m historyNoteAudioRecordingMods) WithNote(rel *NoteTemplate) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(ctx context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.r.Note = &historyNoteAudioRecordingRNoteR{
			o: rel,
		}
	})
}

func (m historyNoteAudioRecordingMods) WithNewNote(mods ...NoteMod) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(ctx context.Context, o *HistoryNoteAudioRecordingTemplate) {
		related := o.f.NewNoteWithContext(ctx, mods...)

		m.WithNote(related).Apply(ctx, o)
	})
}

func (m historyNoteAudioRecordingMods) WithExistingNote(em *models.Note) HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(ctx context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.r.Note = &historyNoteAudioRecordingRNoteR{
			o: o.f.FromExistingNote(em),
		}
	})
}

func (m historyNoteAudioRecordingMods) WithoutNote() HistoryNoteAudioRecordingMod {
	return HistoryNoteAudioRecordingModFunc(func(ctx context.Context, o *HistoryNoteAudioRecordingTemplate) {
		o.r.Note = nil
	})
}
