// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type NoteAudioRecordingMod interface {
	Apply(context.Context, *NoteAudioRecordingTemplate)
}

type NoteAudioRecordingModFunc func(context.Context, *NoteAudioRecordingTemplate)

func (f NoteAudioRecordingModFunc) Apply(ctx context.Context, n *NoteAudioRecordingTemplate) {
	f(ctx, n)
}

type NoteAudioRecordingModSlice []NoteAudioRecordingMod

func (mods NoteAudioRecordingModSlice) Apply(ctx context.Context, n *NoteAudioRecordingTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// NoteAudioRecordingTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type NoteAudioRecordingTemplate struct {
	Created    func() null.Val[time.Time]
	Deleted    func() null.Val[time.Time]
	Duration   func() string
	NoteUUID   func() null.Val[string]
	Transcript func() null.Val[string]
	UUID       func() string

	r noteAudioRecordingR
	f *Factory

	alreadyPersisted bool
}

type noteAudioRecordingR struct {
	Note *noteAudioRecordingRNoteR
}

type noteAudioRecordingRNoteR struct {
	o *NoteTemplate
}

// Apply mods to the NoteAudioRecordingTemplate
func (o *NoteAudioRecordingTemplate) Apply(ctx context.Context, mods ...NoteAudioRecordingMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.NoteAudioRecording
// according to the relationships in the template. Nothing is inserted into the db
func (t NoteAudioRecordingTemplate) setModelRels(o *models.NoteAudioRecording) {
	if t.r.Note != nil {
		rel := t.r.Note.o.Build()
		rel.R.NoteAudioRecordings = append(rel.R.NoteAudioRecordings, o)
		o.NoteUUID = null.From(rel.UUID) // h2
		o.R.Note = rel
	}
}

// BuildSetter returns an *models.NoteAudioRecordingSetter
// this does nothing with the relationship templates
func (o NoteAudioRecordingTemplate) BuildSetter() *models.NoteAudioRecordingSetter {
	m := &models.NoteAudioRecordingSetter{}

	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.Deleted != nil {
		val := o.Deleted()
		m.Deleted = omitnull.FromNull(val)
	}
	if o.Duration != nil {
		val := o.Duration()
		m.Duration = omit.From(val)
	}
	if o.NoteUUID != nil {
		val := o.NoteUUID()
		m.NoteUUID = omitnull.FromNull(val)
	}
	if o.Transcript != nil {
		val := o.Transcript()
		m.Transcript = omitnull.FromNull(val)
	}
	if o.UUID != nil {
		val := o.UUID()
		m.UUID = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.NoteAudioRecordingSetter
// this does nothing with the relationship templates
func (o NoteAudioRecordingTemplate) BuildManySetter(number int) []*models.NoteAudioRecordingSetter {
	m := make([]*models.NoteAudioRecordingSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.NoteAudioRecording
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteAudioRecordingTemplate.Create
func (o NoteAudioRecordingTemplate) Build() *models.NoteAudioRecording {
	m := &models.NoteAudioRecording{}

	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.Deleted != nil {
		m.Deleted = o.Deleted()
	}
	if o.Duration != nil {
		m.Duration = o.Duration()
	}
	if o.NoteUUID != nil {
		m.NoteUUID = o.NoteUUID()
	}
	if o.Transcript != nil {
		m.Transcript = o.Transcript()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.NoteAudioRecordingSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteAudioRecordingTemplate.CreateMany
func (o NoteAudioRecordingTemplate) BuildMany(number int) models.NoteAudioRecordingSlice {
	m := make(models.NoteAudioRecordingSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableNoteAudioRecording(m *models.NoteAudioRecordingSetter) {
	if !(m.Duration.IsValue()) {
		val := random_string(nil)
		m.Duration = omit.From(val)
	}
	if !(m.UUID.IsValue()) {
		val := random_string(nil)
		m.UUID = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.NoteAudioRecording
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *NoteAudioRecordingTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.NoteAudioRecording) error {
	var err error

	isNoteDone, _ := noteAudioRecordingRelNoteCtx.Value(ctx)
	if !isNoteDone && o.r.Note != nil {
		ctx = noteAudioRecordingRelNoteCtx.WithValue(ctx, true)
		if o.r.Note.o.alreadyPersisted {
			m.R.Note = o.r.Note.o.Build()
		} else {
			var rel0 *models.Note
			rel0, err = o.r.Note.o.Create(ctx, exec)
			if err != nil {
				return err
			}
			err = m.AttachNote(ctx, exec, rel0)
			if err != nil {
				return err
			}
		}

	}

	return err
}

// Create builds a noteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *NoteAudioRecordingTemplate) Create(ctx context.Context, exec bob.Executor) (*models.NoteAudioRecording, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableNoteAudioRecording(opt)

	m, err := models.NoteAudioRecordings.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a noteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *NoteAudioRecordingTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.NoteAudioRecording {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a noteAudioRecording and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *NoteAudioRecordingTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.NoteAudioRecording {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple noteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o NoteAudioRecordingTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.NoteAudioRecordingSlice, error) {
	var err error
	m := make(models.NoteAudioRecordingSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple noteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o NoteAudioRecordingTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.NoteAudioRecordingSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple noteAudioRecordings and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o NoteAudioRecordingTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.NoteAudioRecordingSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// NoteAudioRecording has methods that act as mods for the NoteAudioRecordingTemplate
var NoteAudioRecordingMods noteAudioRecordingMods

type noteAudioRecordingMods struct{}

func (m noteAudioRecordingMods) RandomizeAllColumns(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModSlice{
		NoteAudioRecordingMods.RandomCreated(f),
		NoteAudioRecordingMods.RandomDeleted(f),
		NoteAudioRecordingMods.RandomDuration(f),
		NoteAudioRecordingMods.RandomNoteUUID(f),
		NoteAudioRecordingMods.RandomTranscript(f),
		NoteAudioRecordingMods.RandomUUID(f),
	}
}

// Set the model columns to this value
func (m noteAudioRecordingMods) Created(val null.Val[time.Time]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) CreatedFunc(f func() null.Val[time.Time]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetCreated() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteAudioRecordingMods) RandomCreated(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteAudioRecordingMods) RandomCreatedNotNull(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteAudioRecordingMods) Deleted(val null.Val[time.Time]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Deleted = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) DeletedFunc(f func() null.Val[time.Time]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Deleted = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetDeleted() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Deleted = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteAudioRecordingMods) RandomDeleted(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteAudioRecordingMods) RandomDeletedNotNull(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteAudioRecordingMods) Duration(val string) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Duration = func() string { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) DurationFunc(f func() string) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Duration = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetDuration() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Duration = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteAudioRecordingMods) RandomDuration(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Duration = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m noteAudioRecordingMods) NoteUUID(val null.Val[string]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) NoteUUIDFunc(f func() null.Val[string]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.NoteUUID = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetNoteUUID() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.NoteUUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteAudioRecordingMods) RandomNoteUUID(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteAudioRecordingMods) RandomNoteUUIDNotNull(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.NoteUUID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteAudioRecordingMods) Transcript(val null.Val[string]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) TranscriptFunc(f func() null.Val[string]) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Transcript = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetTranscript() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Transcript = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteAudioRecordingMods) RandomTranscript(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteAudioRecordingMods) RandomTranscriptNotNull(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.Transcript = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteAudioRecordingMods) UUID(val string) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.UUID = func() string { return val }
	})
}

// Set the Column from the function
func (m noteAudioRecordingMods) UUIDFunc(f func() string) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m noteAudioRecordingMods) UnsetUUID() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteAudioRecordingMods) RandomUUID(f *faker.Faker) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(_ context.Context, o *NoteAudioRecordingTemplate) {
		o.UUID = func() string {
			return random_string(f)
		}
	})
}

func (m noteAudioRecordingMods) WithParentsCascading() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(ctx context.Context, o *NoteAudioRecordingTemplate) {
		if isDone, _ := noteAudioRecordingWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = noteAudioRecordingWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewNoteWithContext(ctx, NoteMods.WithParentsCascading())
			m.WithNote(related).Apply(ctx, o)
		}
	})
}

func (m noteAudioRecordingMods) WithNote(rel *NoteTemplate) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(ctx context.Context, o *NoteAudioRecordingTemplate) {
		o.r.Note = &noteAudioRecordingRNoteR{
			o: rel,
		}
	})
}

func (m noteAudioRecordingMods) WithNewNote(mods ...NoteMod) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(ctx context.Context, o *NoteAudioRecordingTemplate) {
		related := o.f.NewNoteWithContext(ctx, mods...)

		m.WithNote(related).Apply(ctx, o)
	})
}

func (m noteAudioRecordingMods) WithExistingNote(em *models.Note) NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(ctx context.Context, o *NoteAudioRecordingTemplate) {
		o.r.Note = &noteAudioRecordingRNoteR{
			o: o.f.FromExistingNote(em),
		}
	})
}

func (m noteAudioRecordingMods) WithoutNote() NoteAudioRecordingMod {
	return NoteAudioRecordingModFunc(func(ctx context.Context, o *NoteAudioRecordingTemplate) {
		o.r.Note = nil
	})
}
