// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type HistoryPointlocationMod interface {
	Apply(context.Context, *HistoryPointlocationTemplate)
}

type HistoryPointlocationModFunc func(context.Context, *HistoryPointlocationTemplate)

func (f HistoryPointlocationModFunc) Apply(ctx context.Context, n *HistoryPointlocationTemplate) {
	f(ctx, n)
}

type HistoryPointlocationModSlice []HistoryPointlocationMod

func (mods HistoryPointlocationModSlice) Apply(ctx context.Context, n *HistoryPointlocationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// HistoryPointlocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type HistoryPointlocationTemplate struct {
	Accessdesc              func() null.Val[string]
	Active                  func() null.Val[int16]
	Assignedtech            func() null.Val[string]
	Comments                func() null.Val[string]
	Creationdate            func() null.Val[int64]
	Creator                 func() null.Val[string]
	Description             func() null.Val[string]
	Externalid              func() null.Val[string]
	Editdate                func() null.Val[int64]
	Editor                  func() null.Val[string]
	Globalid                func() null.Val[string]
	Habitat                 func() null.Val[string]
	Jurisdiction            func() null.Val[string]
	Larvinspectinterval     func() null.Val[int16]
	Lastinspectactiontaken  func() null.Val[string]
	Lastinspectactivity     func() null.Val[string]
	Lastinspectavglarvae    func() null.Val[float64]
	Lastinspectavgpupae     func() null.Val[float64]
	Lastinspectbreeding     func() null.Val[string]
	Lastinspectconditions   func() null.Val[string]
	Lastinspectdate         func() null.Val[int64]
	Lastinspectfieldspecies func() null.Val[string]
	Lastinspectlstages      func() null.Val[string]
	Lasttreatactivity       func() null.Val[string]
	Lasttreatdate           func() null.Val[int64]
	Lasttreatproduct        func() null.Val[string]
	Lasttreatqty            func() null.Val[float64]
	Lasttreatqtyunit        func() null.Val[string]
	Locationnumber          func() null.Val[int64]
	Name                    func() null.Val[string]
	Nextactiondatescheduled func() null.Val[int64]
	Objectid                func() int32
	Priority                func() null.Val[string]
	Stype                   func() null.Val[string]
	Symbology               func() null.Val[string]
	Usetype                 func() null.Val[string]
	Waterorigin             func() null.Val[string]
	X                       func() null.Val[float64]
	Y                       func() null.Val[float64]
	Zone                    func() null.Val[string]
	Zone2                   func() null.Val[string]
	DeactivateReason        func() null.Val[string]
	Created                 func() null.Val[time.Time]
	GeometryX               func() null.Val[float64]
	GeometryY               func() null.Val[float64]
	Scalarpriority          func() null.Val[int64]
	Sourcestatus            func() null.Val[string]
	Version                 func() int32

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the HistoryPointlocationTemplate
func (o *HistoryPointlocationTemplate) Apply(ctx context.Context, mods ...HistoryPointlocationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.HistoryPointlocation
// according to the relationships in the template. Nothing is inserted into the db
func (t HistoryPointlocationTemplate) setModelRels(o *models.HistoryPointlocation) {}

// BuildSetter returns an *models.HistoryPointlocationSetter
// this does nothing with the relationship templates
func (o HistoryPointlocationTemplate) BuildSetter() *models.HistoryPointlocationSetter {
	m := &models.HistoryPointlocationSetter{}

	if o.Accessdesc != nil {
		val := o.Accessdesc()
		m.Accessdesc = omitnull.FromNull(val)
	}
	if o.Active != nil {
		val := o.Active()
		m.Active = omitnull.FromNull(val)
	}
	if o.Assignedtech != nil {
		val := o.Assignedtech()
		m.Assignedtech = omitnull.FromNull(val)
	}
	if o.Comments != nil {
		val := o.Comments()
		m.Comments = omitnull.FromNull(val)
	}
	if o.Creationdate != nil {
		val := o.Creationdate()
		m.Creationdate = omitnull.FromNull(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omitnull.FromNull(val)
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = omitnull.FromNull(val)
	}
	if o.Externalid != nil {
		val := o.Externalid()
		m.Externalid = omitnull.FromNull(val)
	}
	if o.Editdate != nil {
		val := o.Editdate()
		m.Editdate = omitnull.FromNull(val)
	}
	if o.Editor != nil {
		val := o.Editor()
		m.Editor = omitnull.FromNull(val)
	}
	if o.Globalid != nil {
		val := o.Globalid()
		m.Globalid = omitnull.FromNull(val)
	}
	if o.Habitat != nil {
		val := o.Habitat()
		m.Habitat = omitnull.FromNull(val)
	}
	if o.Jurisdiction != nil {
		val := o.Jurisdiction()
		m.Jurisdiction = omitnull.FromNull(val)
	}
	if o.Larvinspectinterval != nil {
		val := o.Larvinspectinterval()
		m.Larvinspectinterval = omitnull.FromNull(val)
	}
	if o.Lastinspectactiontaken != nil {
		val := o.Lastinspectactiontaken()
		m.Lastinspectactiontaken = omitnull.FromNull(val)
	}
	if o.Lastinspectactivity != nil {
		val := o.Lastinspectactivity()
		m.Lastinspectactivity = omitnull.FromNull(val)
	}
	if o.Lastinspectavglarvae != nil {
		val := o.Lastinspectavglarvae()
		m.Lastinspectavglarvae = omitnull.FromNull(val)
	}
	if o.Lastinspectavgpupae != nil {
		val := o.Lastinspectavgpupae()
		m.Lastinspectavgpupae = omitnull.FromNull(val)
	}
	if o.Lastinspectbreeding != nil {
		val := o.Lastinspectbreeding()
		m.Lastinspectbreeding = omitnull.FromNull(val)
	}
	if o.Lastinspectconditions != nil {
		val := o.Lastinspectconditions()
		m.Lastinspectconditions = omitnull.FromNull(val)
	}
	if o.Lastinspectdate != nil {
		val := o.Lastinspectdate()
		m.Lastinspectdate = omitnull.FromNull(val)
	}
	if o.Lastinspectfieldspecies != nil {
		val := o.Lastinspectfieldspecies()
		m.Lastinspectfieldspecies = omitnull.FromNull(val)
	}
	if o.Lastinspectlstages != nil {
		val := o.Lastinspectlstages()
		m.Lastinspectlstages = omitnull.FromNull(val)
	}
	if o.Lasttreatactivity != nil {
		val := o.Lasttreatactivity()
		m.Lasttreatactivity = omitnull.FromNull(val)
	}
	if o.Lasttreatdate != nil {
		val := o.Lasttreatdate()
		m.Lasttreatdate = omitnull.FromNull(val)
	}
	if o.Lasttreatproduct != nil {
		val := o.Lasttreatproduct()
		m.Lasttreatproduct = omitnull.FromNull(val)
	}
	if o.Lasttreatqty != nil {
		val := o.Lasttreatqty()
		m.Lasttreatqty = omitnull.FromNull(val)
	}
	if o.Lasttreatqtyunit != nil {
		val := o.Lasttreatqtyunit()
		m.Lasttreatqtyunit = omitnull.FromNull(val)
	}
	if o.Locationnumber != nil {
		val := o.Locationnumber()
		m.Locationnumber = omitnull.FromNull(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omitnull.FromNull(val)
	}
	if o.Nextactiondatescheduled != nil {
		val := o.Nextactiondatescheduled()
		m.Nextactiondatescheduled = omitnull.FromNull(val)
	}
	if o.Objectid != nil {
		val := o.Objectid()
		m.Objectid = omit.From(val)
	}
	if o.Priority != nil {
		val := o.Priority()
		m.Priority = omitnull.FromNull(val)
	}
	if o.Stype != nil {
		val := o.Stype()
		m.Stype = omitnull.FromNull(val)
	}
	if o.Symbology != nil {
		val := o.Symbology()
		m.Symbology = omitnull.FromNull(val)
	}
	if o.Usetype != nil {
		val := o.Usetype()
		m.Usetype = omitnull.FromNull(val)
	}
	if o.Waterorigin != nil {
		val := o.Waterorigin()
		m.Waterorigin = omitnull.FromNull(val)
	}
	if o.X != nil {
		val := o.X()
		m.X = omitnull.FromNull(val)
	}
	if o.Y != nil {
		val := o.Y()
		m.Y = omitnull.FromNull(val)
	}
	if o.Zone != nil {
		val := o.Zone()
		m.Zone = omitnull.FromNull(val)
	}
	if o.Zone2 != nil {
		val := o.Zone2()
		m.Zone2 = omitnull.FromNull(val)
	}
	if o.DeactivateReason != nil {
		val := o.DeactivateReason()
		m.DeactivateReason = omitnull.FromNull(val)
	}
	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.GeometryX != nil {
		val := o.GeometryX()
		m.GeometryX = omitnull.FromNull(val)
	}
	if o.GeometryY != nil {
		val := o.GeometryY()
		m.GeometryY = omitnull.FromNull(val)
	}
	if o.Scalarpriority != nil {
		val := o.Scalarpriority()
		m.Scalarpriority = omitnull.FromNull(val)
	}
	if o.Sourcestatus != nil {
		val := o.Sourcestatus()
		m.Sourcestatus = omitnull.FromNull(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.HistoryPointlocationSetter
// this does nothing with the relationship templates
func (o HistoryPointlocationTemplate) BuildManySetter(number int) []*models.HistoryPointlocationSetter {
	m := make([]*models.HistoryPointlocationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.HistoryPointlocation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryPointlocationTemplate.Create
func (o HistoryPointlocationTemplate) Build() *models.HistoryPointlocation {
	m := &models.HistoryPointlocation{}

	if o.Accessdesc != nil {
		m.Accessdesc = o.Accessdesc()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.Assignedtech != nil {
		m.Assignedtech = o.Assignedtech()
	}
	if o.Comments != nil {
		m.Comments = o.Comments()
	}
	if o.Creationdate != nil {
		m.Creationdate = o.Creationdate()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Externalid != nil {
		m.Externalid = o.Externalid()
	}
	if o.Editdate != nil {
		m.Editdate = o.Editdate()
	}
	if o.Editor != nil {
		m.Editor = o.Editor()
	}
	if o.Globalid != nil {
		m.Globalid = o.Globalid()
	}
	if o.Habitat != nil {
		m.Habitat = o.Habitat()
	}
	if o.Jurisdiction != nil {
		m.Jurisdiction = o.Jurisdiction()
	}
	if o.Larvinspectinterval != nil {
		m.Larvinspectinterval = o.Larvinspectinterval()
	}
	if o.Lastinspectactiontaken != nil {
		m.Lastinspectactiontaken = o.Lastinspectactiontaken()
	}
	if o.Lastinspectactivity != nil {
		m.Lastinspectactivity = o.Lastinspectactivity()
	}
	if o.Lastinspectavglarvae != nil {
		m.Lastinspectavglarvae = o.Lastinspectavglarvae()
	}
	if o.Lastinspectavgpupae != nil {
		m.Lastinspectavgpupae = o.Lastinspectavgpupae()
	}
	if o.Lastinspectbreeding != nil {
		m.Lastinspectbreeding = o.Lastinspectbreeding()
	}
	if o.Lastinspectconditions != nil {
		m.Lastinspectconditions = o.Lastinspectconditions()
	}
	if o.Lastinspectdate != nil {
		m.Lastinspectdate = o.Lastinspectdate()
	}
	if o.Lastinspectfieldspecies != nil {
		m.Lastinspectfieldspecies = o.Lastinspectfieldspecies()
	}
	if o.Lastinspectlstages != nil {
		m.Lastinspectlstages = o.Lastinspectlstages()
	}
	if o.Lasttreatactivity != nil {
		m.Lasttreatactivity = o.Lasttreatactivity()
	}
	if o.Lasttreatdate != nil {
		m.Lasttreatdate = o.Lasttreatdate()
	}
	if o.Lasttreatproduct != nil {
		m.Lasttreatproduct = o.Lasttreatproduct()
	}
	if o.Lasttreatqty != nil {
		m.Lasttreatqty = o.Lasttreatqty()
	}
	if o.Lasttreatqtyunit != nil {
		m.Lasttreatqtyunit = o.Lasttreatqtyunit()
	}
	if o.Locationnumber != nil {
		m.Locationnumber = o.Locationnumber()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Nextactiondatescheduled != nil {
		m.Nextactiondatescheduled = o.Nextactiondatescheduled()
	}
	if o.Objectid != nil {
		m.Objectid = o.Objectid()
	}
	if o.Priority != nil {
		m.Priority = o.Priority()
	}
	if o.Stype != nil {
		m.Stype = o.Stype()
	}
	if o.Symbology != nil {
		m.Symbology = o.Symbology()
	}
	if o.Usetype != nil {
		m.Usetype = o.Usetype()
	}
	if o.Waterorigin != nil {
		m.Waterorigin = o.Waterorigin()
	}
	if o.X != nil {
		m.X = o.X()
	}
	if o.Y != nil {
		m.Y = o.Y()
	}
	if o.Zone != nil {
		m.Zone = o.Zone()
	}
	if o.Zone2 != nil {
		m.Zone2 = o.Zone2()
	}
	if o.DeactivateReason != nil {
		m.DeactivateReason = o.DeactivateReason()
	}
	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.GeometryX != nil {
		m.GeometryX = o.GeometryX()
	}
	if o.GeometryY != nil {
		m.GeometryY = o.GeometryY()
	}
	if o.Scalarpriority != nil {
		m.Scalarpriority = o.Scalarpriority()
	}
	if o.Sourcestatus != nil {
		m.Sourcestatus = o.Sourcestatus()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.HistoryPointlocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryPointlocationTemplate.CreateMany
func (o HistoryPointlocationTemplate) BuildMany(number int) models.HistoryPointlocationSlice {
	m := make(models.HistoryPointlocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableHistoryPointlocation(m *models.HistoryPointlocationSetter) {
	if !(m.Objectid.IsValue()) {
		val := random_int32(nil)
		m.Objectid = omit.From(val)
	}
	if !(m.Version.IsValue()) {
		val := random_int32(nil)
		m.Version = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.HistoryPointlocation
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *HistoryPointlocationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.HistoryPointlocation) error {
	var err error

	return err
}

// Create builds a historyPointlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *HistoryPointlocationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.HistoryPointlocation, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableHistoryPointlocation(opt)

	m, err := models.HistoryPointlocations.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a historyPointlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *HistoryPointlocationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.HistoryPointlocation {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a historyPointlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *HistoryPointlocationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.HistoryPointlocation {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple historyPointlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o HistoryPointlocationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.HistoryPointlocationSlice, error) {
	var err error
	m := make(models.HistoryPointlocationSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple historyPointlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o HistoryPointlocationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.HistoryPointlocationSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple historyPointlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o HistoryPointlocationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.HistoryPointlocationSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// HistoryPointlocation has methods that act as mods for the HistoryPointlocationTemplate
var HistoryPointlocationMods historyPointlocationMods

type historyPointlocationMods struct{}

func (m historyPointlocationMods) RandomizeAllColumns(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModSlice{
		HistoryPointlocationMods.RandomAccessdesc(f),
		HistoryPointlocationMods.RandomActive(f),
		HistoryPointlocationMods.RandomAssignedtech(f),
		HistoryPointlocationMods.RandomComments(f),
		HistoryPointlocationMods.RandomCreationdate(f),
		HistoryPointlocationMods.RandomCreator(f),
		HistoryPointlocationMods.RandomDescription(f),
		HistoryPointlocationMods.RandomExternalid(f),
		HistoryPointlocationMods.RandomEditdate(f),
		HistoryPointlocationMods.RandomEditor(f),
		HistoryPointlocationMods.RandomGlobalid(f),
		HistoryPointlocationMods.RandomHabitat(f),
		HistoryPointlocationMods.RandomJurisdiction(f),
		HistoryPointlocationMods.RandomLarvinspectinterval(f),
		HistoryPointlocationMods.RandomLastinspectactiontaken(f),
		HistoryPointlocationMods.RandomLastinspectactivity(f),
		HistoryPointlocationMods.RandomLastinspectavglarvae(f),
		HistoryPointlocationMods.RandomLastinspectavgpupae(f),
		HistoryPointlocationMods.RandomLastinspectbreeding(f),
		HistoryPointlocationMods.RandomLastinspectconditions(f),
		HistoryPointlocationMods.RandomLastinspectdate(f),
		HistoryPointlocationMods.RandomLastinspectfieldspecies(f),
		HistoryPointlocationMods.RandomLastinspectlstages(f),
		HistoryPointlocationMods.RandomLasttreatactivity(f),
		HistoryPointlocationMods.RandomLasttreatdate(f),
		HistoryPointlocationMods.RandomLasttreatproduct(f),
		HistoryPointlocationMods.RandomLasttreatqty(f),
		HistoryPointlocationMods.RandomLasttreatqtyunit(f),
		HistoryPointlocationMods.RandomLocationnumber(f),
		HistoryPointlocationMods.RandomName(f),
		HistoryPointlocationMods.RandomNextactiondatescheduled(f),
		HistoryPointlocationMods.RandomObjectid(f),
		HistoryPointlocationMods.RandomPriority(f),
		HistoryPointlocationMods.RandomStype(f),
		HistoryPointlocationMods.RandomSymbology(f),
		HistoryPointlocationMods.RandomUsetype(f),
		HistoryPointlocationMods.RandomWaterorigin(f),
		HistoryPointlocationMods.RandomX(f),
		HistoryPointlocationMods.RandomY(f),
		HistoryPointlocationMods.RandomZone(f),
		HistoryPointlocationMods.RandomZone2(f),
		HistoryPointlocationMods.RandomDeactivateReason(f),
		HistoryPointlocationMods.RandomCreated(f),
		HistoryPointlocationMods.RandomGeometryX(f),
		HistoryPointlocationMods.RandomGeometryY(f),
		HistoryPointlocationMods.RandomScalarpriority(f),
		HistoryPointlocationMods.RandomSourcestatus(f),
		HistoryPointlocationMods.RandomVersion(f),
	}
}

// Set the model columns to this value
func (m historyPointlocationMods) Accessdesc(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Accessdesc = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) AccessdescFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Accessdesc = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetAccessdesc() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Accessdesc = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomAccessdesc(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomAccessdescNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Active(val null.Val[int16]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Active = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) ActiveFunc(f func() null.Val[int16]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetActive() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomActive(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomActiveNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Assignedtech(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Assignedtech = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) AssignedtechFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Assignedtech = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetAssignedtech() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Assignedtech = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomAssignedtech(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Assignedtech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomAssignedtechNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Assignedtech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Comments(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Comments = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) CommentsFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Comments = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetComments() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Comments = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomComments(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomCommentsNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Creationdate(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creationdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) CreationdateFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creationdate = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetCreationdate() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creationdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomCreationdate(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomCreationdateNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Creator(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creator = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) CreatorFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetCreator() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomCreator(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomCreatorNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Description(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) DescriptionFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetDescription() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomDescription(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomDescriptionNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Externalid(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Externalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) ExternalidFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Externalid = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetExternalid() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Externalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomExternalid(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomExternalidNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Editdate(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) EditdateFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editdate = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetEditdate() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomEditdate(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomEditdateNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Editor(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editor = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) EditorFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editor = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetEditor() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editor = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomEditor(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomEditorNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Globalid(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Globalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) GlobalidFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Globalid = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetGlobalid() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Globalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomGlobalid(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomGlobalidNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Habitat(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Habitat = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) HabitatFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Habitat = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetHabitat() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Habitat = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomHabitat(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomHabitatNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Jurisdiction(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) JurisdictionFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Jurisdiction = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetJurisdiction() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Jurisdiction = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomJurisdiction(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomJurisdictionNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Larvinspectinterval(val null.Val[int16]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LarvinspectintervalFunc(f func() null.Val[int16]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Larvinspectinterval = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLarvinspectinterval() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Larvinspectinterval = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLarvinspectinterval(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLarvinspectintervalNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectactiontaken(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectactiontakenFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactiontaken = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectactiontaken() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactiontaken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectactiontaken(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectactiontakenNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectactivity(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectactivityFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactivity = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectactivity() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectactivity(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectactivityNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectavglarvae(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectavglarvaeFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavglarvae = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectavglarvae() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavglarvae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectavglarvae(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectavglarvaeNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectavgpupae(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectavgpupaeFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavgpupae = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectavgpupae() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavgpupae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectavgpupae(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectavgpupaeNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectbreeding(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectbreedingFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectbreeding = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectbreeding() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectbreeding = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectbreeding(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectbreedingNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectconditions(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectconditionsFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectconditions = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectconditions() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectconditions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectconditions(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectconditionsNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectdate(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectdateFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectdate = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectdate() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectdate(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectdateNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectfieldspecies(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectfieldspeciesFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectfieldspecies = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectfieldspecies() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectfieldspecies = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectfieldspecies(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectfieldspeciesNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lastinspectlstages(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LastinspectlstagesFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectlstages = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLastinspectlstages() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectlstages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLastinspectlstages(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLastinspectlstagesNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lasttreatactivity(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LasttreatactivityFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatactivity = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLasttreatactivity() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLasttreatactivity(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLasttreatactivityNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lasttreatdate(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LasttreatdateFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatdate = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLasttreatdate() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLasttreatdate(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLasttreatdateNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lasttreatproduct(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LasttreatproductFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatproduct = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLasttreatproduct() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatproduct = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLasttreatproduct(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLasttreatproductNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lasttreatqty(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LasttreatqtyFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqty = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLasttreatqty() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqty = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLasttreatqty(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLasttreatqtyNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Lasttreatqtyunit(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LasttreatqtyunitFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqtyunit = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLasttreatqtyunit() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqtyunit = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLasttreatqtyunit(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLasttreatqtyunitNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Locationnumber(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) LocationnumberFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Locationnumber = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetLocationnumber() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Locationnumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomLocationnumber(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomLocationnumberNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Name(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) NameFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetName() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomName(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomNameNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Nextactiondatescheduled(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) NextactiondatescheduledFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Nextactiondatescheduled = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetNextactiondatescheduled() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Nextactiondatescheduled = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomNextactiondatescheduled(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomNextactiondatescheduledNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Objectid(val int32) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Objectid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) ObjectidFunc(f func() int32) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Objectid = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetObjectid() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Objectid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyPointlocationMods) RandomObjectid(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Objectid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Priority(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Priority = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) PriorityFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Priority = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetPriority() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Priority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomPriority(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomPriorityNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Stype(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Stype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) StypeFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Stype = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetStype() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Stype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomStype(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Stype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomStypeNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Stype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Symbology(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Symbology = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) SymbologyFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Symbology = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetSymbology() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Symbology = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomSymbology(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomSymbologyNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Usetype(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Usetype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) UsetypeFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Usetype = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetUsetype() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Usetype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomUsetype(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomUsetypeNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Waterorigin(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Waterorigin = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) WateroriginFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Waterorigin = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetWaterorigin() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Waterorigin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomWaterorigin(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomWateroriginNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) X(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.X = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) XFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.X = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetX() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.X = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomX(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.X = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomXNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.X = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Y(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Y = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) YFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Y = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetY() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Y = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomY(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Y = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomYNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Y = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Zone(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) ZoneFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetZone() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomZone(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomZoneNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Zone2(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone2 = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) Zone2Func(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone2 = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetZone2() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomZone2(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomZone2NotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) DeactivateReason(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.DeactivateReason = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) DeactivateReasonFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.DeactivateReason = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetDeactivateReason() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.DeactivateReason = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomDeactivateReason(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.DeactivateReason = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomDeactivateReasonNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.DeactivateReason = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Created(val null.Val[time.Time]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) CreatedFunc(f func() null.Val[time.Time]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetCreated() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomCreated(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomCreatedNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) GeometryX(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryX = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) GeometryXFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryX = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetGeometryX() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryX = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomGeometryX(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomGeometryXNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) GeometryY(val null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryY = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) GeometryYFunc(f func() null.Val[float64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryY = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetGeometryY() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryY = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomGeometryY(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomGeometryYNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Scalarpriority(val null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Scalarpriority = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) ScalarpriorityFunc(f func() null.Val[int64]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Scalarpriority = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetScalarpriority() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Scalarpriority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomScalarpriority(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Scalarpriority = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomScalarpriorityNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Scalarpriority = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Sourcestatus(val null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Sourcestatus = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) SourcestatusFunc(f func() null.Val[string]) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Sourcestatus = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetSourcestatus() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Sourcestatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPointlocationMods) RandomSourcestatus(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Sourcestatus = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPointlocationMods) RandomSourcestatusNotNull(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Sourcestatus = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPointlocationMods) Version(val int32) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyPointlocationMods) VersionFunc(f func() int32) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m historyPointlocationMods) UnsetVersion() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyPointlocationMods) RandomVersion(f *faker.Faker) HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(_ context.Context, o *HistoryPointlocationTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

func (m historyPointlocationMods) WithParentsCascading() HistoryPointlocationMod {
	return HistoryPointlocationModFunc(func(ctx context.Context, o *HistoryPointlocationTemplate) {
		if isDone, _ := historyPointlocationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = historyPointlocationWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
