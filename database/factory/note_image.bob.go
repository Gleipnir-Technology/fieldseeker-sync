// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type NoteImageMod interface {
	Apply(context.Context, *NoteImageTemplate)
}

type NoteImageModFunc func(context.Context, *NoteImageTemplate)

func (f NoteImageModFunc) Apply(ctx context.Context, n *NoteImageTemplate) {
	f(ctx, n)
}

type NoteImageModSlice []NoteImageMod

func (mods NoteImageModSlice) Apply(ctx context.Context, n *NoteImageTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// NoteImageTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type NoteImageTemplate struct {
	Created func() time.Time
	Deleted func() null.Val[time.Time]
	Version func() int32
	UUID    func() string
	Creator func() int32

	r noteImageR
	f *Factory

	alreadyPersisted bool
}

type noteImageR struct {
	CreatorUser *noteImageRCreatorUserR
}

type noteImageRCreatorUserR struct {
	o *UserTemplate
}

// Apply mods to the NoteImageTemplate
func (o *NoteImageTemplate) Apply(ctx context.Context, mods ...NoteImageMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.NoteImage
// according to the relationships in the template. Nothing is inserted into the db
func (t NoteImageTemplate) setModelRels(o *models.NoteImage) {
	if t.r.CreatorUser != nil {
		rel := t.r.CreatorUser.o.Build()
		rel.R.CreatorNoteImages = append(rel.R.CreatorNoteImages, o)
		o.Creator = rel.ID // h2
		o.R.CreatorUser = rel
	}
}

// BuildSetter returns an *models.NoteImageSetter
// this does nothing with the relationship templates
func (o NoteImageTemplate) BuildSetter() *models.NoteImageSetter {
	m := &models.NoteImageSetter{}

	if o.Created != nil {
		val := o.Created()
		m.Created = omit.From(val)
	}
	if o.Deleted != nil {
		val := o.Deleted()
		m.Deleted = omitnull.FromNull(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}
	if o.UUID != nil {
		val := o.UUID()
		m.UUID = omit.From(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.NoteImageSetter
// this does nothing with the relationship templates
func (o NoteImageTemplate) BuildManySetter(number int) []*models.NoteImageSetter {
	m := make([]*models.NoteImageSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.NoteImage
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteImageTemplate.Create
func (o NoteImageTemplate) Build() *models.NoteImage {
	m := &models.NoteImage{}

	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.Deleted != nil {
		m.Deleted = o.Deleted()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.NoteImageSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteImageTemplate.CreateMany
func (o NoteImageTemplate) BuildMany(number int) models.NoteImageSlice {
	m := make(models.NoteImageSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableNoteImage(m *models.NoteImageSetter) {
	if !(m.Created.IsValue()) {
		val := random_time_Time(nil)
		m.Created = omit.From(val)
	}
	if !(m.Version.IsValue()) {
		val := random_int32(nil)
		m.Version = omit.From(val)
	}
	if !(m.UUID.IsValue()) {
		val := random_string(nil)
		m.UUID = omit.From(val)
	}
	if !(m.Creator.IsValue()) {
		val := random_int32(nil)
		m.Creator = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.NoteImage
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *NoteImageTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.NoteImage) error {
	var err error

	return err
}

// Create builds a noteImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *NoteImageTemplate) Create(ctx context.Context, exec bob.Executor) (*models.NoteImage, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableNoteImage(opt)

	if o.r.CreatorUser == nil {
		NoteImageMods.WithNewCreatorUser().Apply(ctx, o)
	}

	var rel0 *models.User

	if o.r.CreatorUser.o.alreadyPersisted {
		rel0 = o.r.CreatorUser.o.Build()
	} else {
		rel0, err = o.r.CreatorUser.o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	opt.Creator = omit.From(rel0.ID)

	m, err := models.NoteImages.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	m.R.CreatorUser = rel0

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a noteImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *NoteImageTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.NoteImage {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a noteImage and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *NoteImageTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.NoteImage {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple noteImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o NoteImageTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.NoteImageSlice, error) {
	var err error
	m := make(models.NoteImageSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple noteImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o NoteImageTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.NoteImageSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple noteImages and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o NoteImageTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.NoteImageSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// NoteImage has methods that act as mods for the NoteImageTemplate
var NoteImageMods noteImageMods

type noteImageMods struct{}

func (m noteImageMods) RandomizeAllColumns(f *faker.Faker) NoteImageMod {
	return NoteImageModSlice{
		NoteImageMods.RandomCreated(f),
		NoteImageMods.RandomDeleted(f),
		NoteImageMods.RandomVersion(f),
		NoteImageMods.RandomUUID(f),
		NoteImageMods.RandomCreator(f),
	}
}

// Set the model columns to this value
func (m noteImageMods) Created(val time.Time) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Created = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m noteImageMods) CreatedFunc(f func() time.Time) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m noteImageMods) UnsetCreated() NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteImageMods) RandomCreated(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Created = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m noteImageMods) Deleted(val null.Val[time.Time]) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Deleted = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteImageMods) DeletedFunc(f func() null.Val[time.Time]) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Deleted = f
	})
}

// Clear any values for the column
func (m noteImageMods) UnsetDeleted() NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Deleted = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteImageMods) RandomDeleted(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteImageMods) RandomDeletedNotNull(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteImageMods) Version(val int32) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m noteImageMods) VersionFunc(f func() int32) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m noteImageMods) UnsetVersion() NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteImageMods) RandomVersion(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m noteImageMods) UUID(val string) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.UUID = func() string { return val }
	})
}

// Set the Column from the function
func (m noteImageMods) UUIDFunc(f func() string) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m noteImageMods) UnsetUUID() NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteImageMods) RandomUUID(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.UUID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m noteImageMods) Creator(val int32) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Creator = func() int32 { return val }
	})
}

// Set the Column from the function
func (m noteImageMods) CreatorFunc(f func() int32) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m noteImageMods) UnsetCreator() NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteImageMods) RandomCreator(f *faker.Faker) NoteImageMod {
	return NoteImageModFunc(func(_ context.Context, o *NoteImageTemplate) {
		o.Creator = func() int32 {
			return random_int32(f)
		}
	})
}

func (m noteImageMods) WithParentsCascading() NoteImageMod {
	return NoteImageModFunc(func(ctx context.Context, o *NoteImageTemplate) {
		if isDone, _ := noteImageWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = noteImageWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithCreatorUser(related).Apply(ctx, o)
		}
	})
}

func (m noteImageMods) WithCreatorUser(rel *UserTemplate) NoteImageMod {
	return NoteImageModFunc(func(ctx context.Context, o *NoteImageTemplate) {
		o.r.CreatorUser = &noteImageRCreatorUserR{
			o: rel,
		}
	})
}

func (m noteImageMods) WithNewCreatorUser(mods ...UserMod) NoteImageMod {
	return NoteImageModFunc(func(ctx context.Context, o *NoteImageTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithCreatorUser(related).Apply(ctx, o)
	})
}

func (m noteImageMods) WithExistingCreatorUser(em *models.User) NoteImageMod {
	return NoteImageModFunc(func(ctx context.Context, o *NoteImageTemplate) {
		o.r.CreatorUser = &noteImageRCreatorUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m noteImageMods) WithoutCreatorUser() NoteImageMod {
	return NoteImageModFunc(func(ctx context.Context, o *NoteImageTemplate) {
		o.r.CreatorUser = nil
	})
}
