// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	enums "github.com/Gleipnir-Technology/fieldseeker-sync/database/enums"
	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/shopspring/decimal"
)

type Factory struct {
	baseFSContainerrelateMods             FSContainerrelateModSlice
	baseFSFieldscoutinglogMods            FSFieldscoutinglogModSlice
	baseFSHabitatrelateMods               FSHabitatrelateModSlice
	baseFSInspectionsampleMods            FSInspectionsampleModSlice
	baseFSInspectionsampledetailMods      FSInspectionsampledetailModSlice
	baseFSLinelocationMods                FSLinelocationModSlice
	baseFSLocationtrackingMods            FSLocationtrackingModSlice
	baseFSMosquitoinspectionMods          FSMosquitoinspectionModSlice
	baseFSPointlocationMods               FSPointlocationModSlice
	baseFSPolygonlocationMods             FSPolygonlocationModSlice
	baseFSPoolMods                        FSPoolModSlice
	baseFSPooldetailMods                  FSPooldetailModSlice
	baseFSProposedtreatmentareaMods       FSProposedtreatmentareaModSlice
	baseFSQamosquitoinspectionMods        FSQamosquitoinspectionModSlice
	baseFSRodentlocationMods              FSRodentlocationModSlice
	baseFSSamplecollectionMods            FSSamplecollectionModSlice
	baseFSSamplelocationMods              FSSamplelocationModSlice
	baseFSServicerequestMods              FSServicerequestModSlice
	baseFSSpeciesabundanceMods            FSSpeciesabundanceModSlice
	baseFSStormdrainMods                  FSStormdrainModSlice
	baseFSTimecardMods                    FSTimecardModSlice
	baseFSTrapdatumMods                   FSTrapdatumModSlice
	baseFSTraplocationMods                FSTraplocationModSlice
	baseFSTreatmentMods                   FSTreatmentModSlice
	baseFSTreatmentareaMods               FSTreatmentareaModSlice
	baseFSZoneMods                        FSZoneModSlice
	baseFSZones2Mods                      FSZones2ModSlice
	baseGooseDBVersionMods                GooseDBVersionModSlice
	baseHistoryContainerrelateMods        HistoryContainerrelateModSlice
	baseHistoryFieldscoutinglogMods       HistoryFieldscoutinglogModSlice
	baseHistoryHabitatrelateMods          HistoryHabitatrelateModSlice
	baseHistoryInspectionsampleMods       HistoryInspectionsampleModSlice
	baseHistoryInspectionsampledetailMods HistoryInspectionsampledetailModSlice
	baseHistoryLinelocationMods           HistoryLinelocationModSlice
	baseHistoryLocationtrackingMods       HistoryLocationtrackingModSlice
	baseHistoryMosquitoinspectionMods     HistoryMosquitoinspectionModSlice
	baseHistoryNoteMods                   HistoryNoteModSlice
	baseHistoryNoteAudioRecordingMods     HistoryNoteAudioRecordingModSlice
	baseHistoryPointlocationMods          HistoryPointlocationModSlice
	baseHistoryPolygonlocationMods        HistoryPolygonlocationModSlice
	baseHistoryPoolMods                   HistoryPoolModSlice
	baseHistoryPooldetailMods             HistoryPooldetailModSlice
	baseHistoryProposedtreatmentareaMods  HistoryProposedtreatmentareaModSlice
	baseHistoryQamosquitoinspectionMods   HistoryQamosquitoinspectionModSlice
	baseHistoryRodentlocationMods         HistoryRodentlocationModSlice
	baseHistorySamplecollectionMods       HistorySamplecollectionModSlice
	baseHistorySamplelocationMods         HistorySamplelocationModSlice
	baseHistoryServicerequestMods         HistoryServicerequestModSlice
	baseHistorySpeciesabundanceMods       HistorySpeciesabundanceModSlice
	baseHistoryStormdrainMods             HistoryStormdrainModSlice
	baseHistoryTimecardMods               HistoryTimecardModSlice
	baseHistoryTrapdatumMods              HistoryTrapdatumModSlice
	baseHistoryTraplocationMods           HistoryTraplocationModSlice
	baseHistoryTreatmentMods              HistoryTreatmentModSlice
	baseHistoryTreatmentareaMods          HistoryTreatmentareaModSlice
	baseHistoryZoneMods                   HistoryZoneModSlice
	baseHistoryZones2Mods                 HistoryZones2ModSlice
	baseNoteMods                          NoteModSlice
	baseNoteAudioMods                     NoteAudioModSlice
	baseNoteAudioBreadcrumbMods           NoteAudioBreadcrumbModSlice
	baseNoteAudioRecordingMods            NoteAudioRecordingModSlice
	baseNoteImageMods                     NoteImageModSlice
	baseSessionMods                       SessionModSlice
	baseTaskAudioReviewMods               TaskAudioReviewModSlice
	baseUserMods                          UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewFSContainerrelate(mods ...FSContainerrelateMod) *FSContainerrelateTemplate {
	return f.NewFSContainerrelateWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSContainerrelateWithContext(ctx context.Context, mods ...FSContainerrelateMod) *FSContainerrelateTemplate {
	o := &FSContainerrelateTemplate{f: f}

	if f != nil {
		f.baseFSContainerrelateMods.Apply(ctx, o)
	}

	FSContainerrelateModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSContainerrelate(m *models.FSContainerrelate) *FSContainerrelateTemplate {
	o := &FSContainerrelateTemplate{f: f, alreadyPersisted: true}

	o.Containertype = func() null.Val[string] { return m.Containertype }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Inspsampleid = func() null.Val[string] { return m.Inspsampleid }
	o.Mosquitoinspid = func() null.Val[string] { return m.Mosquitoinspid }
	o.Objectid = func() int32 { return m.Objectid }
	o.Treatmentid = func() null.Val[string] { return m.Treatmentid }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSFieldscoutinglog(mods ...FSFieldscoutinglogMod) *FSFieldscoutinglogTemplate {
	return f.NewFSFieldscoutinglogWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSFieldscoutinglogWithContext(ctx context.Context, mods ...FSFieldscoutinglogMod) *FSFieldscoutinglogTemplate {
	o := &FSFieldscoutinglogTemplate{f: f}

	if f != nil {
		f.baseFSFieldscoutinglogMods.Apply(ctx, o)
	}

	FSFieldscoutinglogModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSFieldscoutinglog(m *models.FSFieldscoutinglog) *FSFieldscoutinglogTemplate {
	o := &FSFieldscoutinglogTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.Status = func() null.Val[int16] { return m.Status }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSHabitatrelate(mods ...FSHabitatrelateMod) *FSHabitatrelateTemplate {
	return f.NewFSHabitatrelateWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSHabitatrelateWithContext(ctx context.Context, mods ...FSHabitatrelateMod) *FSHabitatrelateTemplate {
	o := &FSHabitatrelateTemplate{f: f}

	if f != nil {
		f.baseFSHabitatrelateMods.Apply(ctx, o)
	}

	FSHabitatrelateModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSHabitatrelate(m *models.FSHabitatrelate) *FSHabitatrelateTemplate {
	o := &FSHabitatrelateTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.ForeignID = func() null.Val[string] { return m.ForeignID }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitattype = func() null.Val[string] { return m.Habitattype }
	o.Objectid = func() int32 { return m.Objectid }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSInspectionsample(mods ...FSInspectionsampleMod) *FSInspectionsampleTemplate {
	return f.NewFSInspectionsampleWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSInspectionsampleWithContext(ctx context.Context, mods ...FSInspectionsampleMod) *FSInspectionsampleTemplate {
	o := &FSInspectionsampleTemplate{f: f}

	if f != nil {
		f.baseFSInspectionsampleMods.Apply(ctx, o)
	}

	FSInspectionsampleModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSInspectionsample(m *models.FSInspectionsample) *FSInspectionsampleTemplate {
	o := &FSInspectionsampleTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Idbytech = func() null.Val[string] { return m.Idbytech }
	o.InspID = func() null.Val[string] { return m.InspID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSInspectionsampledetail(mods ...FSInspectionsampledetailMod) *FSInspectionsampledetailTemplate {
	return f.NewFSInspectionsampledetailWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSInspectionsampledetailWithContext(ctx context.Context, mods ...FSInspectionsampledetailMod) *FSInspectionsampledetailTemplate {
	o := &FSInspectionsampledetailTemplate{f: f}

	if f != nil {
		f.baseFSInspectionsampledetailMods.Apply(ctx, o)
	}

	FSInspectionsampledetailModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSInspectionsampledetail(m *models.FSInspectionsampledetail) *FSInspectionsampledetailTemplate {
	o := &FSInspectionsampledetailTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fadultact = func() null.Val[string] { return m.Fadultact }
	o.Fdomstage = func() null.Val[string] { return m.Fdomstage }
	o.Feggcount = func() null.Val[int16] { return m.Feggcount }
	o.Fieldspecies = func() null.Val[string] { return m.Fieldspecies }
	o.Flarvcount = func() null.Val[int16] { return m.Flarvcount }
	o.Flstages = func() null.Val[string] { return m.Flstages }
	o.Fpupcount = func() null.Val[int16] { return m.Fpupcount }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.InspsampleID = func() null.Val[string] { return m.InspsampleID }
	o.Labspecies = func() null.Val[string] { return m.Labspecies }
	o.Ldomstage = func() null.Val[string] { return m.Ldomstage }
	o.Leggcount = func() null.Val[int16] { return m.Leggcount }
	o.Llarvcount = func() null.Val[int16] { return m.Llarvcount }
	o.Lpupcount = func() null.Val[int16] { return m.Lpupcount }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSLinelocation(mods ...FSLinelocationMod) *FSLinelocationTemplate {
	return f.NewFSLinelocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSLinelocationWithContext(ctx context.Context, mods ...FSLinelocationMod) *FSLinelocationTemplate {
	o := &FSLinelocationTemplate{f: f}

	if f != nil {
		f.baseFSLinelocationMods.Apply(ctx, o)
	}

	FSLinelocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSLinelocation(m *models.FSLinelocation) *FSLinelocationTemplate {
	o := &FSLinelocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.LengthFT = func() null.Val[float64] { return m.LengthFT }
	o.LengthMeters = func() null.Val[float64] { return m.LengthMeters }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.WidthFT = func() null.Val[float64] { return m.WidthFT }
	o.WidthMeters = func() null.Val[float64] { return m.WidthMeters }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSLocationtracking(mods ...FSLocationtrackingMod) *FSLocationtrackingTemplate {
	return f.NewFSLocationtrackingWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSLocationtrackingWithContext(ctx context.Context, mods ...FSLocationtrackingMod) *FSLocationtrackingTemplate {
	o := &FSLocationtrackingTemplate{f: f}

	if f != nil {
		f.baseFSLocationtrackingMods.Apply(ctx, o)
	}

	FSLocationtrackingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSLocationtracking(m *models.FSLocationtracking) *FSLocationtrackingTemplate {
	o := &FSLocationtrackingTemplate{f: f, alreadyPersisted: true}

	o.Accuracy = func() null.Val[float64] { return m.Accuracy }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSMosquitoinspection(mods ...FSMosquitoinspectionMod) *FSMosquitoinspectionTemplate {
	return f.NewFSMosquitoinspectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSMosquitoinspectionWithContext(ctx context.Context, mods ...FSMosquitoinspectionMod) *FSMosquitoinspectionTemplate {
	o := &FSMosquitoinspectionTemplate{f: f}

	if f != nil {
		f.baseFSMosquitoinspectionMods.Apply(ctx, o)
	}

	FSMosquitoinspectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSMosquitoinspection(m *models.FSMosquitoinspection) *FSMosquitoinspectionTemplate {
	o := &FSMosquitoinspectionTemplate{f: f, alreadyPersisted: true}

	o.Actiontaken = func() null.Val[string] { return m.Actiontaken }
	o.Activity = func() null.Val[string] { return m.Activity }
	o.Adultact = func() null.Val[string] { return m.Adultact }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Avglarvae = func() null.Val[float64] { return m.Avglarvae }
	o.Avgpupae = func() null.Val[float64] { return m.Avgpupae }
	o.Breeding = func() null.Val[string] { return m.Breeding }
	o.Cbcount = func() null.Val[int16] { return m.Cbcount }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Containercount = func() null.Val[int16] { return m.Containercount }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Domstage = func() null.Val[string] { return m.Domstage }
	o.Eggs = func() null.Val[int16] { return m.Eggs }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldspecies = func() null.Val[string] { return m.Fieldspecies }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvaepresent = func() null.Val[int16] { return m.Larvaepresent }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Lstages = func() null.Val[string] { return m.Lstages }
	o.Numdips = func() null.Val[int16] { return m.Numdips }
	o.Objectid = func() int32 { return m.Objectid }
	o.Personalcontact = func() null.Val[int16] { return m.Personalcontact }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Posdips = func() null.Val[int16] { return m.Posdips }
	o.Positivecontainercount = func() null.Val[int16] { return m.Positivecontainercount }
	o.Pupaepresent = func() null.Val[int16] { return m.Pupaepresent }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sdid = func() null.Val[string] { return m.Sdid }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Tirecount = func() null.Val[int16] { return m.Tirecount }
	o.Totlarvae = func() null.Val[int16] { return m.Totlarvae }
	o.Totpupae = func() null.Val[int16] { return m.Totpupae }
	o.Visualmonitoring = func() null.Val[int16] { return m.Visualmonitoring }
	o.Vmcomments = func() null.Val[string] { return m.Vmcomments }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Adminaction = func() null.Val[string] { return m.Adminaction }
	o.Updated = func() time.Time { return m.Updated }
	o.Ptaid = func() null.Val[string] { return m.Ptaid }

	return o
}

func (f *Factory) NewFSPointlocation(mods ...FSPointlocationMod) *FSPointlocationTemplate {
	return f.NewFSPointlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSPointlocationWithContext(ctx context.Context, mods ...FSPointlocationMod) *FSPointlocationTemplate {
	o := &FSPointlocationTemplate{f: f}

	if f != nil {
		f.baseFSPointlocationMods.Apply(ctx, o)
	}

	FSPointlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSPointlocation(m *models.FSPointlocation) *FSPointlocationTemplate {
	o := &FSPointlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Stype = func() null.Val[string] { return m.Stype }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.X = func() null.Val[float64] { return m.X }
	o.Y = func() null.Val[float64] { return m.Y }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Assignedtech = func() null.Val[string] { return m.Assignedtech }
	o.DeactivateReason = func() null.Val[string] { return m.DeactivateReason }
	o.Scalarpriority = func() null.Val[int64] { return m.Scalarpriority }
	o.Sourcestatus = func() null.Val[string] { return m.Sourcestatus }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSPolygonlocation(mods ...FSPolygonlocationMod) *FSPolygonlocationTemplate {
	return f.NewFSPolygonlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSPolygonlocationWithContext(ctx context.Context, mods ...FSPolygonlocationMod) *FSPolygonlocationTemplate {
	o := &FSPolygonlocationTemplate{f: f}

	if f != nil {
		f.baseFSPolygonlocationMods.Apply(ctx, o)
	}

	FSPolygonlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSPolygonlocation(m *models.FSPolygonlocation) *FSPolygonlocationTemplate {
	o := &FSPolygonlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Filter = func() null.Val[string] { return m.Filter }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSPool(mods ...FSPoolMod) *FSPoolTemplate {
	return f.NewFSPoolWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSPoolWithContext(ctx context.Context, mods ...FSPoolMod) *FSPoolTemplate {
	o := &FSPoolTemplate{f: f}

	if f != nil {
		f.baseFSPoolMods.Apply(ctx, o)
	}

	FSPoolModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSPool(m *models.FSPool) *FSPoolTemplate {
	o := &FSPoolTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datesent = func() null.Val[int64] { return m.Datesent }
	o.Datetested = func() null.Val[int64] { return m.Datetested }
	o.Diseasepos = func() null.Val[string] { return m.Diseasepos }
	o.Diseasetested = func() null.Val[string] { return m.Diseasetested }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lab = func() null.Val[string] { return m.Lab }
	o.LabID = func() null.Val[string] { return m.LabID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Poolyear = func() null.Val[int16] { return m.Poolyear }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.Survtech = func() null.Val[string] { return m.Survtech }
	o.Testmethod = func() null.Val[string] { return m.Testmethod }
	o.Testtech = func() null.Val[string] { return m.Testtech }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Vectorsurvcollectionid = func() null.Val[string] { return m.Vectorsurvcollectionid }
	o.Vectorsurvpoolid = func() null.Val[string] { return m.Vectorsurvpoolid }
	o.Vectorsurvtrapdataid = func() null.Val[string] { return m.Vectorsurvtrapdataid }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSPooldetail(mods ...FSPooldetailMod) *FSPooldetailTemplate {
	return f.NewFSPooldetailWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSPooldetailWithContext(ctx context.Context, mods ...FSPooldetailMod) *FSPooldetailTemplate {
	o := &FSPooldetailTemplate{f: f}

	if f != nil {
		f.baseFSPooldetailMods.Apply(ctx, o)
	}

	FSPooldetailModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSPooldetail(m *models.FSPooldetail) *FSPooldetailTemplate {
	o := &FSPooldetailTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Females = func() null.Val[int16] { return m.Females }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.PoolID = func() null.Val[string] { return m.PoolID }
	o.Species = func() null.Val[string] { return m.Species }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSProposedtreatmentarea(mods ...FSProposedtreatmentareaMod) *FSProposedtreatmentareaTemplate {
	return f.NewFSProposedtreatmentareaWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSProposedtreatmentareaWithContext(ctx context.Context, mods ...FSProposedtreatmentareaMod) *FSProposedtreatmentareaTemplate {
	o := &FSProposedtreatmentareaTemplate{f: f}

	if f != nil {
		f.baseFSProposedtreatmentareaMods.Apply(ctx, o)
	}

	FSProposedtreatmentareaModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSProposedtreatmentarea(m *models.FSProposedtreatmentarea) *FSProposedtreatmentareaTemplate {
	o := &FSProposedtreatmentareaTemplate{f: f, alreadyPersisted: true}

	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Completed = func() null.Val[int16] { return m.Completed }
	o.Completedby = func() null.Val[string] { return m.Completedby }
	o.Completeddate = func() null.Val[int64] { return m.Completeddate }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Duedate = func() null.Val[int64] { return m.Duedate }
	o.Exported = func() null.Val[int16] { return m.Exported }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Issprayroute = func() null.Val[int16] { return m.Issprayroute }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Method = func() null.Val[string] { return m.Method }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Targetapprate = func() null.Val[float64] { return m.Targetapprate }
	o.Targetproduct = func() null.Val[string] { return m.Targetproduct }
	o.Targetspecies = func() null.Val[string] { return m.Targetspecies }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSQamosquitoinspection(mods ...FSQamosquitoinspectionMod) *FSQamosquitoinspectionTemplate {
	return f.NewFSQamosquitoinspectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSQamosquitoinspectionWithContext(ctx context.Context, mods ...FSQamosquitoinspectionMod) *FSQamosquitoinspectionTemplate {
	o := &FSQamosquitoinspectionTemplate{f: f}

	if f != nil {
		f.baseFSQamosquitoinspectionMods.Apply(ctx, o)
	}

	FSQamosquitoinspectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSQamosquitoinspection(m *models.FSQamosquitoinspection) *FSQamosquitoinspectionTemplate {
	o := &FSQamosquitoinspectionTemplate{f: f, alreadyPersisted: true}

	o.Acresbreeding = func() null.Val[float64] { return m.Acresbreeding }
	o.Actiontaken = func() null.Val[string] { return m.Actiontaken }
	o.Adultactivity = func() null.Val[int16] { return m.Adultactivity }
	o.Aquaticorganisms = func() null.Val[string] { return m.Aquaticorganisms }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Breedingpotential = func() null.Val[string] { return m.Breedingpotential }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Fish = func() null.Val[int16] { return m.Fish }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habvalue1 = func() null.Val[int16] { return m.Habvalue1 }
	o.Habvalue1percent = func() null.Val[int16] { return m.Habvalue1percent }
	o.Habvalue2 = func() null.Val[int16] { return m.Habvalue2 }
	o.Habvalue2percent = func() null.Val[int16] { return m.Habvalue2percent }
	o.Larvaeinsidetreatedarea = func() null.Val[int16] { return m.Larvaeinsidetreatedarea }
	o.Larvaeoutsidetreatedarea = func() null.Val[int16] { return m.Larvaeoutsidetreatedarea }
	o.Larvaepresent = func() null.Val[int16] { return m.Larvaepresent }
	o.Larvaereason = func() null.Val[string] { return m.Larvaereason }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LR = func() null.Val[int16] { return m.LR }
	o.Mosquitohabitat = func() null.Val[string] { return m.Mosquitohabitat }
	o.Movingwater = func() null.Val[int16] { return m.Movingwater }
	o.Negdips = func() null.Val[int16] { return m.Negdips }
	o.Nowaterever = func() null.Val[int16] { return m.Nowaterever }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Posdips = func() null.Val[int16] { return m.Posdips }
	o.Potential = func() null.Val[int16] { return m.Potential }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sitetype = func() null.Val[string] { return m.Sitetype }
	o.Soilconditions = func() null.Val[string] { return m.Soilconditions }
	o.Sourcereduction = func() null.Val[string] { return m.Sourcereduction }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Totalacres = func() null.Val[float64] { return m.Totalacres }
	o.Vegetation = func() null.Val[string] { return m.Vegetation }
	o.Waterconditions = func() null.Val[string] { return m.Waterconditions }
	o.Waterduration = func() null.Val[string] { return m.Waterduration }
	o.Watermovement1 = func() null.Val[string] { return m.Watermovement1 }
	o.Watermovement1percent = func() null.Val[int16] { return m.Watermovement1percent }
	o.Watermovement2 = func() null.Val[string] { return m.Watermovement2 }
	o.Watermovement2percent = func() null.Val[int16] { return m.Watermovement2percent }
	o.Waterpresent = func() null.Val[int16] { return m.Waterpresent }
	o.Watersource = func() null.Val[string] { return m.Watersource }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSRodentlocation(mods ...FSRodentlocationMod) *FSRodentlocationTemplate {
	return f.NewFSRodentlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSRodentlocationWithContext(ctx context.Context, mods ...FSRodentlocationMod) *FSRodentlocationTemplate {
	o := &FSRodentlocationTemplate{f: f}

	if f != nil {
		f.baseFSRodentlocationMods.Apply(ctx, o)
	}

	FSRodentlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSRodentlocation(m *models.FSRodentlocation) *FSRodentlocationTemplate {
	o := &FSRodentlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Lastinspectaction = func() null.Val[string] { return m.Lastinspectaction }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectrodentevidence = func() null.Val[string] { return m.Lastinspectrodentevidence }
	o.Lastinspectspecies = func() null.Val[string] { return m.Lastinspectspecies }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }

	return o
}

func (f *Factory) NewFSSamplecollection(mods ...FSSamplecollectionMod) *FSSamplecollectionTemplate {
	return f.NewFSSamplecollectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSSamplecollectionWithContext(ctx context.Context, mods ...FSSamplecollectionMod) *FSSamplecollectionTemplate {
	o := &FSSamplecollectionTemplate{f: f}

	if f != nil {
		f.baseFSSamplecollectionMods.Apply(ctx, o)
	}

	FSSamplecollectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSSamplecollection(m *models.FSSamplecollection) *FSSamplecollectionTemplate {
	o := &FSSamplecollectionTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Chickenid = func() null.Val[string] { return m.Chickenid }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datesent = func() null.Val[int64] { return m.Datesent }
	o.Datetested = func() null.Val[int64] { return m.Datetested }
	o.Diseasepos = func() null.Val[string] { return m.Diseasepos }
	o.Diseasetested = func() null.Val[string] { return m.Diseasetested }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Flockid = func() null.Val[string] { return m.Flockid }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lab = func() null.Val[string] { return m.Lab }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LocID = func() null.Val[string] { return m.LocID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Samplecond = func() null.Val[string] { return m.Samplecond }
	o.Samplecount = func() null.Val[int16] { return m.Samplecount }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.Sampletype = func() null.Val[string] { return m.Sampletype }
	o.Sex = func() null.Val[string] { return m.Sex }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Species = func() null.Val[string] { return m.Species }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Survtech = func() null.Val[string] { return m.Survtech }
	o.Testmethod = func() null.Val[string] { return m.Testmethod }
	o.Testtech = func() null.Val[string] { return m.Testtech }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSSamplelocation(mods ...FSSamplelocationMod) *FSSamplelocationTemplate {
	return f.NewFSSamplelocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSSamplelocationWithContext(ctx context.Context, mods ...FSSamplelocationMod) *FSSamplelocationTemplate {
	o := &FSSamplelocationTemplate{f: f}

	if f != nil {
		f.baseFSSamplelocationMods.Apply(ctx, o)
	}

	FSSamplelocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSSamplelocation(m *models.FSSamplelocation) *FSSamplelocationTemplate {
	o := &FSSamplelocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSServicerequest(mods ...FSServicerequestMod) *FSServicerequestTemplate {
	return f.NewFSServicerequestWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSServicerequestWithContext(ctx context.Context, mods ...FSServicerequestMod) *FSServicerequestTemplate {
	o := &FSServicerequestTemplate{f: f}

	if f != nil {
		f.baseFSServicerequestMods.Apply(ctx, o)
	}

	FSServicerequestModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSServicerequest(m *models.FSServicerequest) *FSServicerequestTemplate {
	o := &FSServicerequestTemplate{f: f, alreadyPersisted: true}

	o.Accepted = func() null.Val[int16] { return m.Accepted }
	o.Acceptedby = func() null.Val[string] { return m.Acceptedby }
	o.Accepteddate = func() null.Val[int64] { return m.Accepteddate }
	o.Allowed = func() null.Val[string] { return m.Allowed }
	o.Assignedtech = func() null.Val[string] { return m.Assignedtech }
	o.Clraddr1 = func() null.Val[string] { return m.Clraddr1 }
	o.Clraddr2 = func() null.Val[string] { return m.Clraddr2 }
	o.Clranon = func() null.Val[int16] { return m.Clranon }
	o.Clrcity = func() null.Val[string] { return m.Clrcity }
	o.Clrcompany = func() null.Val[string] { return m.Clrcompany }
	o.Clrcontpref = func() null.Val[string] { return m.Clrcontpref }
	o.Clremail = func() null.Val[string] { return m.Clremail }
	o.Clrfname = func() null.Val[string] { return m.Clrfname }
	o.Clrother = func() null.Val[string] { return m.Clrother }
	o.Clrphone1 = func() null.Val[string] { return m.Clrphone1 }
	o.Clrphone2 = func() null.Val[string] { return m.Clrphone2 }
	o.Clrstate = func() null.Val[string] { return m.Clrstate }
	o.Clrzip = func() null.Val[string] { return m.Clrzip }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datetimeclosed = func() null.Val[int64] { return m.Datetimeclosed }
	o.Duedate = func() null.Val[int64] { return m.Duedate }
	o.Entrytech = func() null.Val[string] { return m.Entrytech }
	o.Estcompletedate = func() null.Val[int64] { return m.Estcompletedate }
	o.Externalerror = func() null.Val[string] { return m.Externalerror }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Firstresponsedate = func() null.Val[int64] { return m.Firstresponsedate }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Issuesreported = func() null.Val[string] { return m.Issuesreported }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Nextaction = func() null.Val[string] { return m.Nextaction }
	o.Notificationtimestamp = func() null.Val[string] { return m.Notificationtimestamp }
	o.Notified = func() null.Val[int16] { return m.Notified }
	o.Notifieddate = func() null.Val[int64] { return m.Notifieddate }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Recdatetime = func() null.Val[int64] { return m.Recdatetime }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Rejectedby = func() null.Val[string] { return m.Rejectedby }
	o.Rejecteddate = func() null.Val[int64] { return m.Rejecteddate }
	o.Rejectedreason = func() null.Val[string] { return m.Rejectedreason }
	o.Reqaddr1 = func() null.Val[string] { return m.Reqaddr1 }
	o.Reqaddr2 = func() null.Val[string] { return m.Reqaddr2 }
	o.Reqcity = func() null.Val[string] { return m.Reqcity }
	o.Reqcompany = func() null.Val[string] { return m.Reqcompany }
	o.Reqcrossst = func() null.Val[string] { return m.Reqcrossst }
	o.Reqdescr = func() null.Val[string] { return m.Reqdescr }
	o.Reqfldnotes = func() null.Val[string] { return m.Reqfldnotes }
	o.Reqmapgrid = func() null.Val[string] { return m.Reqmapgrid }
	o.Reqnotesforcust = func() null.Val[string] { return m.Reqnotesforcust }
	o.Reqnotesfortech = func() null.Val[string] { return m.Reqnotesfortech }
	o.Reqpermission = func() null.Val[int16] { return m.Reqpermission }
	o.Reqprogramactions = func() null.Val[string] { return m.Reqprogramactions }
	o.Reqstate = func() null.Val[string] { return m.Reqstate }
	o.Reqsubdiv = func() null.Val[string] { return m.Reqsubdiv }
	o.Reqtarget = func() null.Val[string] { return m.Reqtarget }
	o.Reqzip = func() null.Val[string] { return m.Reqzip }
	o.Responsedaycount = func() null.Val[int16] { return m.Responsedaycount }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Scheduled = func() null.Val[int16] { return m.Scheduled }
	o.Scheduleddate = func() null.Val[int64] { return m.Scheduleddate }
	o.Source = func() null.Val[string] { return m.Source }
	o.SRNumber = func() null.Val[int64] { return m.SRNumber }
	o.Status = func() null.Val[string] { return m.Status }
	o.Supervisor = func() null.Val[string] { return m.Supervisor }
	o.Techclosed = func() null.Val[string] { return m.Techclosed }
	o.Validx = func() null.Val[string] { return m.Validx }
	o.Validy = func() null.Val[string] { return m.Validy }
	o.Xvalue = func() null.Val[string] { return m.Xvalue }
	o.Yvalue = func() null.Val[string] { return m.Yvalue }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Dog = func() null.Val[int64] { return m.Dog }
	o.Spanish = func() null.Val[int64] { return m.Spanish }
	o.ScheduleNotes = func() null.Val[string] { return m.ScheduleNotes }
	o.SchedulePeriod = func() null.Val[string] { return m.SchedulePeriod }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSSpeciesabundance(mods ...FSSpeciesabundanceMod) *FSSpeciesabundanceTemplate {
	return f.NewFSSpeciesabundanceWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSSpeciesabundanceWithContext(ctx context.Context, mods ...FSSpeciesabundanceMod) *FSSpeciesabundanceTemplate {
	o := &FSSpeciesabundanceTemplate{f: f}

	if f != nil {
		f.baseFSSpeciesabundanceMods.Apply(ctx, o)
	}

	FSSpeciesabundanceModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSSpeciesabundance(m *models.FSSpeciesabundance) *FSSpeciesabundanceTemplate {
	o := &FSSpeciesabundanceTemplate{f: f, alreadyPersisted: true}

	o.Bloodedfem = func() null.Val[int16] { return m.Bloodedfem }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Eggs = func() null.Val[int16] { return m.Eggs }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Females = func() null.Val[int64] { return m.Females }
	o.Gravidfem = func() null.Val[int16] { return m.Gravidfem }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Larvae = func() null.Val[int16] { return m.Larvae }
	o.Males = func() null.Val[int16] { return m.Males }
	o.Objectid = func() int32 { return m.Objectid }
	o.Poolstogen = func() null.Val[int16] { return m.Poolstogen }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Pupae = func() null.Val[int16] { return m.Pupae }
	o.Species = func() null.Val[string] { return m.Species }
	o.Total = func() null.Val[int64] { return m.Total }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.Unknown = func() null.Val[int16] { return m.Unknown }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Globalzscore = func() null.Val[float64] { return m.Globalzscore }
	o.H3R7 = func() null.Val[string] { return m.H3R7 }
	o.H3R8 = func() null.Val[string] { return m.H3R8 }
	o.R7score = func() null.Val[float64] { return m.R7score }
	o.R8score = func() null.Val[float64] { return m.R8score }
	o.Yearweek = func() null.Val[int64] { return m.Yearweek }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSStormdrain(mods ...FSStormdrainMod) *FSStormdrainTemplate {
	return f.NewFSStormdrainWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSStormdrainWithContext(ctx context.Context, mods ...FSStormdrainMod) *FSStormdrainTemplate {
	o := &FSStormdrainTemplate{f: f}

	if f != nil {
		f.baseFSStormdrainMods.Apply(ctx, o)
	}

	FSStormdrainModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSStormdrain(m *models.FSStormdrain) *FSStormdrainTemplate {
	o := &FSStormdrainTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Lastaction = func() null.Val[string] { return m.Lastaction }
	o.Laststatus = func() null.Val[string] { return m.Laststatus }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Nexttreatmentdate = func() null.Val[int64] { return m.Nexttreatmentdate }
	o.Objectid = func() int32 { return m.Objectid }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Type = func() null.Val[string] { return m.Type }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSTimecard(mods ...FSTimecardMod) *FSTimecardTemplate {
	return f.NewFSTimecardWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSTimecardWithContext(ctx context.Context, mods ...FSTimecardMod) *FSTimecardTemplate {
	o := &FSTimecardTemplate{f: f}

	if f != nil {
		f.baseFSTimecardMods.Apply(ctx, o)
	}

	FSTimecardModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSTimecard(m *models.FSTimecard) *FSTimecardTemplate {
	o := &FSTimecardTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Equiptype = func() null.Val[string] { return m.Equiptype }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lclocid = func() null.Val[string] { return m.Lclocid }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Samplelocid = func() null.Val[string] { return m.Samplelocid }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Traplocid = func() null.Val[string] { return m.Traplocid }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }
	o.Rodentlocid = func() null.Val[string] { return m.Rodentlocid }

	return o
}

func (f *Factory) NewFSTrapdatum(mods ...FSTrapdatumMod) *FSTrapdatumTemplate {
	return f.NewFSTrapdatumWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSTrapdatumWithContext(ctx context.Context, mods ...FSTrapdatumMod) *FSTrapdatumTemplate {
	o := &FSTrapdatumTemplate{f: f}

	if f != nil {
		f.baseFSTrapdatumMods.Apply(ctx, o)
	}

	FSTrapdatumModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSTrapdatum(m *models.FSTrapdatum) *FSTrapdatumTemplate {
	o := &FSTrapdatumTemplate{f: f, alreadyPersisted: true}

	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Field = func() null.Val[int64] { return m.Field }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Idbytech = func() null.Val[string] { return m.Idbytech }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LocID = func() null.Val[string] { return m.LocID }
	o.LR = func() null.Val[int16] { return m.LR }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Sortbytech = func() null.Val[string] { return m.Sortbytech }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Trapactivitytype = func() null.Val[string] { return m.Trapactivitytype }
	o.Trapcondition = func() null.Val[string] { return m.Trapcondition }
	o.Trapnights = func() null.Val[int16] { return m.Trapnights }
	o.Traptype = func() null.Val[string] { return m.Traptype }
	o.Voltage = func() null.Val[float64] { return m.Voltage }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Lure = func() null.Val[string] { return m.Lure }
	o.Vectorsurvtrapdataid = func() null.Val[string] { return m.Vectorsurvtrapdataid }
	o.Vectorsurvtraplocationid = func() null.Val[string] { return m.Vectorsurvtraplocationid }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSTraplocation(mods ...FSTraplocationMod) *FSTraplocationTemplate {
	return f.NewFSTraplocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSTraplocationWithContext(ctx context.Context, mods ...FSTraplocationMod) *FSTraplocationTemplate {
	o := &FSTraplocationTemplate{f: f}

	if f != nil {
		f.baseFSTraplocationMods.Apply(ctx, o)
	}

	FSTraplocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSTraplocation(m *models.FSTraplocation) *FSTraplocationTemplate {
	o := &FSTraplocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Route = func() null.Val[int64] { return m.Route }
	o.RouteOrder = func() null.Val[int64] { return m.RouteOrder }
	o.SetDow = func() null.Val[int64] { return m.SetDow }
	o.Vectorsurvsiteid = func() null.Val[string] { return m.Vectorsurvsiteid }
	o.H3R7 = func() null.Val[string] { return m.H3R7 }
	o.H3R8 = func() null.Val[string] { return m.H3R8 }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSTreatment(mods ...FSTreatmentMod) *FSTreatmentTemplate {
	return f.NewFSTreatmentWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSTreatmentWithContext(ctx context.Context, mods ...FSTreatmentMod) *FSTreatmentTemplate {
	o := &FSTreatmentTemplate{f: f}

	if f != nil {
		f.baseFSTreatmentMods.Apply(ctx, o)
	}

	FSTreatmentModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSTreatment(m *models.FSTreatment) *FSTreatmentTemplate {
	o := &FSTreatmentTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Areaunit = func() null.Val[string] { return m.Areaunit }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Barrierrouteid = func() null.Val[string] { return m.Barrierrouteid }
	o.Cbcount = func() null.Val[int16] { return m.Cbcount }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Containercount = func() null.Val[int16] { return m.Containercount }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Equiptype = func() null.Val[string] { return m.Equiptype }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Flowrate = func() null.Val[float64] { return m.Flowrate }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.InspID = func() null.Val[string] { return m.InspID }
	o.Invloc = func() null.Val[string] { return m.Invloc }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Method = func() null.Val[string] { return m.Method }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Product = func() null.Val[string] { return m.Product }
	o.Ptaid = func() null.Val[string] { return m.Ptaid }
	o.Qty = func() null.Val[float64] { return m.Qty }
	o.Qtyunit = func() null.Val[string] { return m.Qtyunit }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sdid = func() null.Val[string] { return m.Sdid }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Targetspecies = func() null.Val[string] { return m.Targetspecies }
	o.Tirecount = func() null.Val[int16] { return m.Tirecount }
	o.Treatacres = func() null.Val[float64] { return m.Treatacres }
	o.Treatarea = func() null.Val[float64] { return m.Treatarea }
	o.Treathectares = func() null.Val[float64] { return m.Treathectares }
	o.Treatmenthours = func() null.Val[float64] { return m.Treatmenthours }
	o.Treatmentlength = func() null.Val[float64] { return m.Treatmentlength }
	o.Treatmentlengthunits = func() null.Val[string] { return m.Treatmentlengthunits }
	o.Totalcostprodcut = func() null.Val[float64] { return m.Totalcostprodcut }
	o.Ulvrouteid = func() null.Val[string] { return m.Ulvrouteid }
	o.Warningoverride = func() null.Val[int16] { return m.Warningoverride }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.TempSitecond = func() null.Val[string] { return m.TempSitecond }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSTreatmentarea(mods ...FSTreatmentareaMod) *FSTreatmentareaTemplate {
	return f.NewFSTreatmentareaWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSTreatmentareaWithContext(ctx context.Context, mods ...FSTreatmentareaMod) *FSTreatmentareaTemplate {
	o := &FSTreatmentareaTemplate{f: f}

	if f != nil {
		f.baseFSTreatmentareaMods.Apply(ctx, o)
	}

	FSTreatmentareaModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSTreatmentarea(m *models.FSTreatmentarea) *FSTreatmentareaTemplate {
	o := &FSTreatmentareaTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Notified = func() null.Val[int16] { return m.Notified }
	o.Objectid = func() int32 { return m.Objectid }
	o.SessionID = func() null.Val[string] { return m.SessionID }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Treatdate = func() null.Val[int64] { return m.Treatdate }
	o.TreatID = func() null.Val[string] { return m.TreatID }
	o.Type = func() null.Val[string] { return m.Type }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSZone(mods ...FSZoneMod) *FSZoneTemplate {
	return f.NewFSZoneWithContext(context.Background(), mods...)
}

func (f *Factory) NewFSZoneWithContext(ctx context.Context, mods ...FSZoneMod) *FSZoneTemplate {
	o := &FSZoneTemplate{f: f}

	if f != nil {
		f.baseFSZoneMods.Apply(ctx, o)
	}

	FSZoneModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSZone(m *models.FSZone) *FSZoneTemplate {
	o := &FSZoneTemplate{f: f, alreadyPersisted: true}

	o.Active = func() null.Val[int64] { return m.Active }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewFSZones2(mods ...FSZones2Mod) *FSZones2Template {
	return f.NewFSZones2WithContext(context.Background(), mods...)
}

func (f *Factory) NewFSZones2WithContext(ctx context.Context, mods ...FSZones2Mod) *FSZones2Template {
	o := &FSZones2Template{f: f}

	if f != nil {
		f.baseFSZones2Mods.Apply(ctx, o)
	}

	FSZones2ModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingFSZones2(m *models.FSZones2) *FSZones2Template {
	o := &FSZones2Template{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Updated = func() time.Time { return m.Updated }

	return o
}

func (f *Factory) NewGooseDBVersion(mods ...GooseDBVersionMod) *GooseDBVersionTemplate {
	return f.NewGooseDBVersionWithContext(context.Background(), mods...)
}

func (f *Factory) NewGooseDBVersionWithContext(ctx context.Context, mods ...GooseDBVersionMod) *GooseDBVersionTemplate {
	o := &GooseDBVersionTemplate{f: f}

	if f != nil {
		f.baseGooseDBVersionMods.Apply(ctx, o)
	}

	GooseDBVersionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingGooseDBVersion(m *models.GooseDBVersion) *GooseDBVersionTemplate {
	o := &GooseDBVersionTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.VersionID = func() int64 { return m.VersionID }
	o.IsApplied = func() bool { return m.IsApplied }
	o.Tstamp = func() time.Time { return m.Tstamp }

	return o
}

func (f *Factory) NewHistoryContainerrelate(mods ...HistoryContainerrelateMod) *HistoryContainerrelateTemplate {
	return f.NewHistoryContainerrelateWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryContainerrelateWithContext(ctx context.Context, mods ...HistoryContainerrelateMod) *HistoryContainerrelateTemplate {
	o := &HistoryContainerrelateTemplate{f: f}

	if f != nil {
		f.baseHistoryContainerrelateMods.Apply(ctx, o)
	}

	HistoryContainerrelateModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryContainerrelate(m *models.HistoryContainerrelate) *HistoryContainerrelateTemplate {
	o := &HistoryContainerrelateTemplate{f: f, alreadyPersisted: true}

	o.Containertype = func() null.Val[string] { return m.Containertype }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Inspsampleid = func() null.Val[string] { return m.Inspsampleid }
	o.Mosquitoinspid = func() null.Val[string] { return m.Mosquitoinspid }
	o.Objectid = func() int32 { return m.Objectid }
	o.Treatmentid = func() null.Val[string] { return m.Treatmentid }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryFieldscoutinglog(mods ...HistoryFieldscoutinglogMod) *HistoryFieldscoutinglogTemplate {
	return f.NewHistoryFieldscoutinglogWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryFieldscoutinglogWithContext(ctx context.Context, mods ...HistoryFieldscoutinglogMod) *HistoryFieldscoutinglogTemplate {
	o := &HistoryFieldscoutinglogTemplate{f: f}

	if f != nil {
		f.baseHistoryFieldscoutinglogMods.Apply(ctx, o)
	}

	HistoryFieldscoutinglogModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryFieldscoutinglog(m *models.HistoryFieldscoutinglog) *HistoryFieldscoutinglogTemplate {
	o := &HistoryFieldscoutinglogTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.Status = func() null.Val[int16] { return m.Status }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryHabitatrelate(mods ...HistoryHabitatrelateMod) *HistoryHabitatrelateTemplate {
	return f.NewHistoryHabitatrelateWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryHabitatrelateWithContext(ctx context.Context, mods ...HistoryHabitatrelateMod) *HistoryHabitatrelateTemplate {
	o := &HistoryHabitatrelateTemplate{f: f}

	if f != nil {
		f.baseHistoryHabitatrelateMods.Apply(ctx, o)
	}

	HistoryHabitatrelateModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryHabitatrelate(m *models.HistoryHabitatrelate) *HistoryHabitatrelateTemplate {
	o := &HistoryHabitatrelateTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.ForeignID = func() null.Val[string] { return m.ForeignID }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitattype = func() null.Val[string] { return m.Habitattype }
	o.Objectid = func() int32 { return m.Objectid }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryInspectionsample(mods ...HistoryInspectionsampleMod) *HistoryInspectionsampleTemplate {
	return f.NewHistoryInspectionsampleWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryInspectionsampleWithContext(ctx context.Context, mods ...HistoryInspectionsampleMod) *HistoryInspectionsampleTemplate {
	o := &HistoryInspectionsampleTemplate{f: f}

	if f != nil {
		f.baseHistoryInspectionsampleMods.Apply(ctx, o)
	}

	HistoryInspectionsampleModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryInspectionsample(m *models.HistoryInspectionsample) *HistoryInspectionsampleTemplate {
	o := &HistoryInspectionsampleTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Idbytech = func() null.Val[string] { return m.Idbytech }
	o.InspID = func() null.Val[string] { return m.InspID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryInspectionsampledetail(mods ...HistoryInspectionsampledetailMod) *HistoryInspectionsampledetailTemplate {
	return f.NewHistoryInspectionsampledetailWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryInspectionsampledetailWithContext(ctx context.Context, mods ...HistoryInspectionsampledetailMod) *HistoryInspectionsampledetailTemplate {
	o := &HistoryInspectionsampledetailTemplate{f: f}

	if f != nil {
		f.baseHistoryInspectionsampledetailMods.Apply(ctx, o)
	}

	HistoryInspectionsampledetailModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryInspectionsampledetail(m *models.HistoryInspectionsampledetail) *HistoryInspectionsampledetailTemplate {
	o := &HistoryInspectionsampledetailTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fadultact = func() null.Val[string] { return m.Fadultact }
	o.Fdomstage = func() null.Val[string] { return m.Fdomstage }
	o.Feggcount = func() null.Val[int16] { return m.Feggcount }
	o.Fieldspecies = func() null.Val[string] { return m.Fieldspecies }
	o.Flarvcount = func() null.Val[int16] { return m.Flarvcount }
	o.Flstages = func() null.Val[string] { return m.Flstages }
	o.Fpupcount = func() null.Val[int16] { return m.Fpupcount }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.InspsampleID = func() null.Val[string] { return m.InspsampleID }
	o.Labspecies = func() null.Val[string] { return m.Labspecies }
	o.Ldomstage = func() null.Val[string] { return m.Ldomstage }
	o.Leggcount = func() null.Val[int16] { return m.Leggcount }
	o.Llarvcount = func() null.Val[int16] { return m.Llarvcount }
	o.Lpupcount = func() null.Val[int16] { return m.Lpupcount }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryLinelocation(mods ...HistoryLinelocationMod) *HistoryLinelocationTemplate {
	return f.NewHistoryLinelocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryLinelocationWithContext(ctx context.Context, mods ...HistoryLinelocationMod) *HistoryLinelocationTemplate {
	o := &HistoryLinelocationTemplate{f: f}

	if f != nil {
		f.baseHistoryLinelocationMods.Apply(ctx, o)
	}

	HistoryLinelocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryLinelocation(m *models.HistoryLinelocation) *HistoryLinelocationTemplate {
	o := &HistoryLinelocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.LengthFT = func() null.Val[float64] { return m.LengthFT }
	o.LengthMeters = func() null.Val[float64] { return m.LengthMeters }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.WidthFT = func() null.Val[float64] { return m.WidthFT }
	o.WidthMeters = func() null.Val[float64] { return m.WidthMeters }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryLocationtracking(mods ...HistoryLocationtrackingMod) *HistoryLocationtrackingTemplate {
	return f.NewHistoryLocationtrackingWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryLocationtrackingWithContext(ctx context.Context, mods ...HistoryLocationtrackingMod) *HistoryLocationtrackingTemplate {
	o := &HistoryLocationtrackingTemplate{f: f}

	if f != nil {
		f.baseHistoryLocationtrackingMods.Apply(ctx, o)
	}

	HistoryLocationtrackingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryLocationtracking(m *models.HistoryLocationtracking) *HistoryLocationtrackingTemplate {
	o := &HistoryLocationtrackingTemplate{f: f, alreadyPersisted: true}

	o.Accuracy = func() null.Val[float64] { return m.Accuracy }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryMosquitoinspection(mods ...HistoryMosquitoinspectionMod) *HistoryMosquitoinspectionTemplate {
	return f.NewHistoryMosquitoinspectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryMosquitoinspectionWithContext(ctx context.Context, mods ...HistoryMosquitoinspectionMod) *HistoryMosquitoinspectionTemplate {
	o := &HistoryMosquitoinspectionTemplate{f: f}

	if f != nil {
		f.baseHistoryMosquitoinspectionMods.Apply(ctx, o)
	}

	HistoryMosquitoinspectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryMosquitoinspection(m *models.HistoryMosquitoinspection) *HistoryMosquitoinspectionTemplate {
	o := &HistoryMosquitoinspectionTemplate{f: f, alreadyPersisted: true}

	o.Actiontaken = func() null.Val[string] { return m.Actiontaken }
	o.Activity = func() null.Val[string] { return m.Activity }
	o.Adultact = func() null.Val[string] { return m.Adultact }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Avglarvae = func() null.Val[float64] { return m.Avglarvae }
	o.Avgpupae = func() null.Val[float64] { return m.Avgpupae }
	o.Breeding = func() null.Val[string] { return m.Breeding }
	o.Cbcount = func() null.Val[int16] { return m.Cbcount }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Containercount = func() null.Val[int16] { return m.Containercount }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Domstage = func() null.Val[string] { return m.Domstage }
	o.Eggs = func() null.Val[int16] { return m.Eggs }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldspecies = func() null.Val[string] { return m.Fieldspecies }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvaepresent = func() null.Val[int16] { return m.Larvaepresent }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Lstages = func() null.Val[string] { return m.Lstages }
	o.Numdips = func() null.Val[int16] { return m.Numdips }
	o.Objectid = func() int32 { return m.Objectid }
	o.Personalcontact = func() null.Val[int16] { return m.Personalcontact }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Posdips = func() null.Val[int16] { return m.Posdips }
	o.Positivecontainercount = func() null.Val[int16] { return m.Positivecontainercount }
	o.Pupaepresent = func() null.Val[int16] { return m.Pupaepresent }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sdid = func() null.Val[string] { return m.Sdid }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Tirecount = func() null.Val[int16] { return m.Tirecount }
	o.Totlarvae = func() null.Val[int16] { return m.Totlarvae }
	o.Totpupae = func() null.Val[int16] { return m.Totpupae }
	o.Visualmonitoring = func() null.Val[int16] { return m.Visualmonitoring }
	o.Vmcomments = func() null.Val[string] { return m.Vmcomments }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Adminaction = func() null.Val[string] { return m.Adminaction }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }
	o.Ptaid = func() null.Val[string] { return m.Ptaid }

	return o
}

func (f *Factory) NewHistoryNote(mods ...HistoryNoteMod) *HistoryNoteTemplate {
	return f.NewHistoryNoteWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryNoteWithContext(ctx context.Context, mods ...HistoryNoteMod) *HistoryNoteTemplate {
	o := &HistoryNoteTemplate{f: f}

	if f != nil {
		f.baseHistoryNoteMods.Apply(ctx, o)
	}

	HistoryNoteModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryNote(m *models.HistoryNote) *HistoryNoteTemplate {
	o := &HistoryNoteTemplate{f: f, alreadyPersisted: true}

	o.Created = func() null.Val[time.Time] { return m.Created }
	o.Latitude = func() null.Val[float64] { return m.Latitude }
	o.Longitude = func() null.Val[float64] { return m.Longitude }
	o.Text = func() string { return m.Text }
	o.Version = func() int32 { return m.Version }
	o.UUID = func() string { return m.UUID }

	return o
}

func (f *Factory) NewHistoryNoteAudioRecording(mods ...HistoryNoteAudioRecordingMod) *HistoryNoteAudioRecordingTemplate {
	return f.NewHistoryNoteAudioRecordingWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryNoteAudioRecordingWithContext(ctx context.Context, mods ...HistoryNoteAudioRecordingMod) *HistoryNoteAudioRecordingTemplate {
	o := &HistoryNoteAudioRecordingTemplate{f: f}

	if f != nil {
		f.baseHistoryNoteAudioRecordingMods.Apply(ctx, o)
	}

	HistoryNoteAudioRecordingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryNoteAudioRecording(m *models.HistoryNoteAudioRecording) *HistoryNoteAudioRecordingTemplate {
	o := &HistoryNoteAudioRecordingTemplate{f: f, alreadyPersisted: true}

	o.Created = func() null.Val[time.Time] { return m.Created }
	o.Duration = func() string { return m.Duration }
	o.NoteUUID = func() null.Val[string] { return m.NoteUUID }
	o.Transcript = func() null.Val[string] { return m.Transcript }
	o.UUID = func() string { return m.UUID }
	o.Version = func() int32 { return m.Version }

	ctx := context.Background()
	if m.R.Note != nil {
		HistoryNoteAudioRecordingMods.WithExistingNote(m.R.Note).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewHistoryPointlocation(mods ...HistoryPointlocationMod) *HistoryPointlocationTemplate {
	return f.NewHistoryPointlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryPointlocationWithContext(ctx context.Context, mods ...HistoryPointlocationMod) *HistoryPointlocationTemplate {
	o := &HistoryPointlocationTemplate{f: f}

	if f != nil {
		f.baseHistoryPointlocationMods.Apply(ctx, o)
	}

	HistoryPointlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryPointlocation(m *models.HistoryPointlocation) *HistoryPointlocationTemplate {
	o := &HistoryPointlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Assignedtech = func() null.Val[string] { return m.Assignedtech }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Stype = func() null.Val[string] { return m.Stype }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.X = func() null.Val[float64] { return m.X }
	o.Y = func() null.Val[float64] { return m.Y }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.DeactivateReason = func() null.Val[string] { return m.DeactivateReason }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Scalarpriority = func() null.Val[int64] { return m.Scalarpriority }
	o.Sourcestatus = func() null.Val[string] { return m.Sourcestatus }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryPolygonlocation(mods ...HistoryPolygonlocationMod) *HistoryPolygonlocationTemplate {
	return f.NewHistoryPolygonlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryPolygonlocationWithContext(ctx context.Context, mods ...HistoryPolygonlocationMod) *HistoryPolygonlocationTemplate {
	o := &HistoryPolygonlocationTemplate{f: f}

	if f != nil {
		f.baseHistoryPolygonlocationMods.Apply(ctx, o)
	}

	HistoryPolygonlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryPolygonlocation(m *models.HistoryPolygonlocation) *HistoryPolygonlocationTemplate {
	o := &HistoryPolygonlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Filter = func() null.Val[string] { return m.Filter }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Larvinspectinterval = func() null.Val[int16] { return m.Larvinspectinterval }
	o.Lastinspectactiontaken = func() null.Val[string] { return m.Lastinspectactiontaken }
	o.Lastinspectactivity = func() null.Val[string] { return m.Lastinspectactivity }
	o.Lastinspectavglarvae = func() null.Val[float64] { return m.Lastinspectavglarvae }
	o.Lastinspectavgpupae = func() null.Val[float64] { return m.Lastinspectavgpupae }
	o.Lastinspectbreeding = func() null.Val[string] { return m.Lastinspectbreeding }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectfieldspecies = func() null.Val[string] { return m.Lastinspectfieldspecies }
	o.Lastinspectlstages = func() null.Val[string] { return m.Lastinspectlstages }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Waterorigin = func() null.Val[string] { return m.Waterorigin }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryPool(mods ...HistoryPoolMod) *HistoryPoolTemplate {
	return f.NewHistoryPoolWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryPoolWithContext(ctx context.Context, mods ...HistoryPoolMod) *HistoryPoolTemplate {
	o := &HistoryPoolTemplate{f: f}

	if f != nil {
		f.baseHistoryPoolMods.Apply(ctx, o)
	}

	HistoryPoolModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryPool(m *models.HistoryPool) *HistoryPoolTemplate {
	o := &HistoryPoolTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datesent = func() null.Val[int64] { return m.Datesent }
	o.Datetested = func() null.Val[int64] { return m.Datetested }
	o.Diseasepos = func() null.Val[string] { return m.Diseasepos }
	o.Diseasetested = func() null.Val[string] { return m.Diseasetested }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lab = func() null.Val[string] { return m.Lab }
	o.LabID = func() null.Val[string] { return m.LabID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Poolyear = func() null.Val[int16] { return m.Poolyear }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.Survtech = func() null.Val[string] { return m.Survtech }
	o.Testmethod = func() null.Val[string] { return m.Testmethod }
	o.Testtech = func() null.Val[string] { return m.Testtech }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.Vectorsurvcollectionid = func() null.Val[string] { return m.Vectorsurvcollectionid }
	o.Vectorsurvpoolid = func() null.Val[string] { return m.Vectorsurvpoolid }
	o.Vectorsurvtrapdataid = func() null.Val[string] { return m.Vectorsurvtrapdataid }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryPooldetail(mods ...HistoryPooldetailMod) *HistoryPooldetailTemplate {
	return f.NewHistoryPooldetailWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryPooldetailWithContext(ctx context.Context, mods ...HistoryPooldetailMod) *HistoryPooldetailTemplate {
	o := &HistoryPooldetailTemplate{f: f}

	if f != nil {
		f.baseHistoryPooldetailMods.Apply(ctx, o)
	}

	HistoryPooldetailModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryPooldetail(m *models.HistoryPooldetail) *HistoryPooldetailTemplate {
	o := &HistoryPooldetailTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Females = func() null.Val[int16] { return m.Females }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Objectid = func() int32 { return m.Objectid }
	o.PoolID = func() null.Val[string] { return m.PoolID }
	o.Species = func() null.Val[string] { return m.Species }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryProposedtreatmentarea(mods ...HistoryProposedtreatmentareaMod) *HistoryProposedtreatmentareaTemplate {
	return f.NewHistoryProposedtreatmentareaWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryProposedtreatmentareaWithContext(ctx context.Context, mods ...HistoryProposedtreatmentareaMod) *HistoryProposedtreatmentareaTemplate {
	o := &HistoryProposedtreatmentareaTemplate{f: f}

	if f != nil {
		f.baseHistoryProposedtreatmentareaMods.Apply(ctx, o)
	}

	HistoryProposedtreatmentareaModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryProposedtreatmentarea(m *models.HistoryProposedtreatmentarea) *HistoryProposedtreatmentareaTemplate {
	o := &HistoryProposedtreatmentareaTemplate{f: f, alreadyPersisted: true}

	o.Acres = func() null.Val[float64] { return m.Acres }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Completed = func() null.Val[int16] { return m.Completed }
	o.Completedby = func() null.Val[string] { return m.Completedby }
	o.Completeddate = func() null.Val[int64] { return m.Completeddate }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Duedate = func() null.Val[int64] { return m.Duedate }
	o.Exported = func() null.Val[int16] { return m.Exported }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Hectares = func() null.Val[float64] { return m.Hectares }
	o.Issprayroute = func() null.Val[int16] { return m.Issprayroute }
	o.Lasttreatactivity = func() null.Val[string] { return m.Lasttreatactivity }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Lasttreatproduct = func() null.Val[string] { return m.Lasttreatproduct }
	o.Lasttreatqty = func() null.Val[float64] { return m.Lasttreatqty }
	o.Lasttreatqtyunit = func() null.Val[string] { return m.Lasttreatqtyunit }
	o.Method = func() null.Val[string] { return m.Method }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Targetapprate = func() null.Val[float64] { return m.Targetapprate }
	o.Targetproduct = func() null.Val[string] { return m.Targetproduct }
	o.Targetspecies = func() null.Val[string] { return m.Targetspecies }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryQamosquitoinspection(mods ...HistoryQamosquitoinspectionMod) *HistoryQamosquitoinspectionTemplate {
	return f.NewHistoryQamosquitoinspectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryQamosquitoinspectionWithContext(ctx context.Context, mods ...HistoryQamosquitoinspectionMod) *HistoryQamosquitoinspectionTemplate {
	o := &HistoryQamosquitoinspectionTemplate{f: f}

	if f != nil {
		f.baseHistoryQamosquitoinspectionMods.Apply(ctx, o)
	}

	HistoryQamosquitoinspectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryQamosquitoinspection(m *models.HistoryQamosquitoinspection) *HistoryQamosquitoinspectionTemplate {
	o := &HistoryQamosquitoinspectionTemplate{f: f, alreadyPersisted: true}

	o.Acresbreeding = func() null.Val[float64] { return m.Acresbreeding }
	o.Actiontaken = func() null.Val[string] { return m.Actiontaken }
	o.Adultactivity = func() null.Val[int16] { return m.Adultactivity }
	o.Aquaticorganisms = func() null.Val[string] { return m.Aquaticorganisms }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Breedingpotential = func() null.Val[string] { return m.Breedingpotential }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Fish = func() null.Val[int16] { return m.Fish }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habvalue1 = func() null.Val[int16] { return m.Habvalue1 }
	o.Habvalue1percent = func() null.Val[int16] { return m.Habvalue1percent }
	o.Habvalue2 = func() null.Val[int16] { return m.Habvalue2 }
	o.Habvalue2percent = func() null.Val[int16] { return m.Habvalue2percent }
	o.Larvaeinsidetreatedarea = func() null.Val[int16] { return m.Larvaeinsidetreatedarea }
	o.Larvaeoutsidetreatedarea = func() null.Val[int16] { return m.Larvaeoutsidetreatedarea }
	o.Larvaepresent = func() null.Val[int16] { return m.Larvaepresent }
	o.Larvaereason = func() null.Val[string] { return m.Larvaereason }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LR = func() null.Val[int16] { return m.LR }
	o.Mosquitohabitat = func() null.Val[string] { return m.Mosquitohabitat }
	o.Movingwater = func() null.Val[int16] { return m.Movingwater }
	o.Negdips = func() null.Val[int16] { return m.Negdips }
	o.Nowaterever = func() null.Val[int16] { return m.Nowaterever }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Posdips = func() null.Val[int16] { return m.Posdips }
	o.Potential = func() null.Val[int16] { return m.Potential }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sitetype = func() null.Val[string] { return m.Sitetype }
	o.Soilconditions = func() null.Val[string] { return m.Soilconditions }
	o.Sourcereduction = func() null.Val[string] { return m.Sourcereduction }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Totalacres = func() null.Val[float64] { return m.Totalacres }
	o.Vegetation = func() null.Val[string] { return m.Vegetation }
	o.Waterconditions = func() null.Val[string] { return m.Waterconditions }
	o.Waterduration = func() null.Val[string] { return m.Waterduration }
	o.Watermovement1 = func() null.Val[string] { return m.Watermovement1 }
	o.Watermovement1percent = func() null.Val[int16] { return m.Watermovement1percent }
	o.Watermovement2 = func() null.Val[string] { return m.Watermovement2 }
	o.Watermovement2percent = func() null.Val[int16] { return m.Watermovement2percent }
	o.Waterpresent = func() null.Val[int16] { return m.Waterpresent }
	o.Watersource = func() null.Val[string] { return m.Watersource }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryRodentlocation(mods ...HistoryRodentlocationMod) *HistoryRodentlocationTemplate {
	return f.NewHistoryRodentlocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryRodentlocationWithContext(ctx context.Context, mods ...HistoryRodentlocationMod) *HistoryRodentlocationTemplate {
	o := &HistoryRodentlocationTemplate{f: f}

	if f != nil {
		f.baseHistoryRodentlocationMods.Apply(ctx, o)
	}

	HistoryRodentlocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryRodentlocation(m *models.HistoryRodentlocation) *HistoryRodentlocationTemplate {
	o := &HistoryRodentlocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Lastinspectaction = func() null.Val[string] { return m.Lastinspectaction }
	o.Lastinspectconditions = func() null.Val[string] { return m.Lastinspectconditions }
	o.Lastinspectdate = func() null.Val[int64] { return m.Lastinspectdate }
	o.Lastinspectrodentevidence = func() null.Val[string] { return m.Lastinspectrodentevidence }
	o.Lastinspectspecies = func() null.Val[string] { return m.Lastinspectspecies }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }

	return o
}

func (f *Factory) NewHistorySamplecollection(mods ...HistorySamplecollectionMod) *HistorySamplecollectionTemplate {
	return f.NewHistorySamplecollectionWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistorySamplecollectionWithContext(ctx context.Context, mods ...HistorySamplecollectionMod) *HistorySamplecollectionTemplate {
	o := &HistorySamplecollectionTemplate{f: f}

	if f != nil {
		f.baseHistorySamplecollectionMods.Apply(ctx, o)
	}

	HistorySamplecollectionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistorySamplecollection(m *models.HistorySamplecollection) *HistorySamplecollectionTemplate {
	o := &HistorySamplecollectionTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Chickenid = func() null.Val[string] { return m.Chickenid }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datesent = func() null.Val[int64] { return m.Datesent }
	o.Datetested = func() null.Val[int64] { return m.Datetested }
	o.Diseasepos = func() null.Val[string] { return m.Diseasepos }
	o.Diseasetested = func() null.Val[string] { return m.Diseasetested }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Flockid = func() null.Val[string] { return m.Flockid }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lab = func() null.Val[string] { return m.Lab }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LocID = func() null.Val[string] { return m.LocID }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Samplecond = func() null.Val[string] { return m.Samplecond }
	o.Samplecount = func() null.Val[int16] { return m.Samplecount }
	o.Sampleid = func() null.Val[string] { return m.Sampleid }
	o.Sampletype = func() null.Val[string] { return m.Sampletype }
	o.Sex = func() null.Val[string] { return m.Sex }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Species = func() null.Val[string] { return m.Species }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Survtech = func() null.Val[string] { return m.Survtech }
	o.Testmethod = func() null.Val[string] { return m.Testmethod }
	o.Testtech = func() null.Val[string] { return m.Testtech }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistorySamplelocation(mods ...HistorySamplelocationMod) *HistorySamplelocationTemplate {
	return f.NewHistorySamplelocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistorySamplelocationWithContext(ctx context.Context, mods ...HistorySamplelocationMod) *HistorySamplelocationTemplate {
	o := &HistorySamplelocationTemplate{f: f}

	if f != nil {
		f.baseHistorySamplelocationMods.Apply(ctx, o)
	}

	HistorySamplelocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistorySamplelocation(m *models.HistorySamplelocation) *HistorySamplelocationTemplate {
	o := &HistorySamplelocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryServicerequest(mods ...HistoryServicerequestMod) *HistoryServicerequestTemplate {
	return f.NewHistoryServicerequestWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryServicerequestWithContext(ctx context.Context, mods ...HistoryServicerequestMod) *HistoryServicerequestTemplate {
	o := &HistoryServicerequestTemplate{f: f}

	if f != nil {
		f.baseHistoryServicerequestMods.Apply(ctx, o)
	}

	HistoryServicerequestModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryServicerequest(m *models.HistoryServicerequest) *HistoryServicerequestTemplate {
	o := &HistoryServicerequestTemplate{f: f, alreadyPersisted: true}

	o.Accepted = func() null.Val[int16] { return m.Accepted }
	o.Acceptedby = func() null.Val[string] { return m.Acceptedby }
	o.Accepteddate = func() null.Val[int64] { return m.Accepteddate }
	o.Allowed = func() null.Val[string] { return m.Allowed }
	o.Assignedtech = func() null.Val[string] { return m.Assignedtech }
	o.Clraddr1 = func() null.Val[string] { return m.Clraddr1 }
	o.Clraddr2 = func() null.Val[string] { return m.Clraddr2 }
	o.Clranon = func() null.Val[int16] { return m.Clranon }
	o.Clrcity = func() null.Val[string] { return m.Clrcity }
	o.Clrcompany = func() null.Val[string] { return m.Clrcompany }
	o.Clrcontpref = func() null.Val[string] { return m.Clrcontpref }
	o.Clremail = func() null.Val[string] { return m.Clremail }
	o.Clrfname = func() null.Val[string] { return m.Clrfname }
	o.Clrother = func() null.Val[string] { return m.Clrother }
	o.Clrphone1 = func() null.Val[string] { return m.Clrphone1 }
	o.Clrphone2 = func() null.Val[string] { return m.Clrphone2 }
	o.Clrstate = func() null.Val[string] { return m.Clrstate }
	o.Clrzip = func() null.Val[string] { return m.Clrzip }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Datetimeclosed = func() null.Val[int64] { return m.Datetimeclosed }
	o.Dog = func() null.Val[int64] { return m.Dog }
	o.Duedate = func() null.Val[int64] { return m.Duedate }
	o.Entrytech = func() null.Val[string] { return m.Entrytech }
	o.Estcompletedate = func() null.Val[int64] { return m.Estcompletedate }
	o.Externalerror = func() null.Val[string] { return m.Externalerror }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Firstresponsedate = func() null.Val[int64] { return m.Firstresponsedate }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Issuesreported = func() null.Val[string] { return m.Issuesreported }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Nextaction = func() null.Val[string] { return m.Nextaction }
	o.Notificationtimestamp = func() null.Val[string] { return m.Notificationtimestamp }
	o.Notified = func() null.Val[int16] { return m.Notified }
	o.Notifieddate = func() null.Val[int64] { return m.Notifieddate }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Recdatetime = func() null.Val[int64] { return m.Recdatetime }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Rejectedby = func() null.Val[string] { return m.Rejectedby }
	o.Rejecteddate = func() null.Val[int64] { return m.Rejecteddate }
	o.Rejectedreason = func() null.Val[string] { return m.Rejectedreason }
	o.Reqaddr1 = func() null.Val[string] { return m.Reqaddr1 }
	o.Reqaddr2 = func() null.Val[string] { return m.Reqaddr2 }
	o.Reqcity = func() null.Val[string] { return m.Reqcity }
	o.Reqcompany = func() null.Val[string] { return m.Reqcompany }
	o.Reqcrossst = func() null.Val[string] { return m.Reqcrossst }
	o.Reqdescr = func() null.Val[string] { return m.Reqdescr }
	o.Reqfldnotes = func() null.Val[string] { return m.Reqfldnotes }
	o.Reqmapgrid = func() null.Val[string] { return m.Reqmapgrid }
	o.Reqnotesforcust = func() null.Val[string] { return m.Reqnotesforcust }
	o.Reqnotesfortech = func() null.Val[string] { return m.Reqnotesfortech }
	o.Reqpermission = func() null.Val[int16] { return m.Reqpermission }
	o.Reqprogramactions = func() null.Val[string] { return m.Reqprogramactions }
	o.Reqstate = func() null.Val[string] { return m.Reqstate }
	o.Reqsubdiv = func() null.Val[string] { return m.Reqsubdiv }
	o.Reqtarget = func() null.Val[string] { return m.Reqtarget }
	o.Reqzip = func() null.Val[string] { return m.Reqzip }
	o.Responsedaycount = func() null.Val[int16] { return m.Responsedaycount }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Scheduled = func() null.Val[int16] { return m.Scheduled }
	o.Scheduleddate = func() null.Val[int64] { return m.Scheduleddate }
	o.Source = func() null.Val[string] { return m.Source }
	o.SRNumber = func() null.Val[int64] { return m.SRNumber }
	o.Status = func() null.Val[string] { return m.Status }
	o.Supervisor = func() null.Val[string] { return m.Supervisor }
	o.Spanish = func() null.Val[int64] { return m.Spanish }
	o.Techclosed = func() null.Val[string] { return m.Techclosed }
	o.Validx = func() null.Val[string] { return m.Validx }
	o.Validy = func() null.Val[string] { return m.Validy }
	o.Xvalue = func() null.Val[string] { return m.Xvalue }
	o.Yvalue = func() null.Val[string] { return m.Yvalue }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.ScheduleNotes = func() null.Val[string] { return m.ScheduleNotes }
	o.SchedulePeriod = func() null.Val[string] { return m.SchedulePeriod }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistorySpeciesabundance(mods ...HistorySpeciesabundanceMod) *HistorySpeciesabundanceTemplate {
	return f.NewHistorySpeciesabundanceWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistorySpeciesabundanceWithContext(ctx context.Context, mods ...HistorySpeciesabundanceMod) *HistorySpeciesabundanceTemplate {
	o := &HistorySpeciesabundanceTemplate{f: f}

	if f != nil {
		f.baseHistorySpeciesabundanceMods.Apply(ctx, o)
	}

	HistorySpeciesabundanceModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistorySpeciesabundance(m *models.HistorySpeciesabundance) *HistorySpeciesabundanceTemplate {
	o := &HistorySpeciesabundanceTemplate{f: f, alreadyPersisted: true}

	o.Bloodedfem = func() null.Val[int16] { return m.Bloodedfem }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Eggs = func() null.Val[int16] { return m.Eggs }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Females = func() null.Val[int64] { return m.Females }
	o.Gravidfem = func() null.Val[int16] { return m.Gravidfem }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Larvae = func() null.Val[int16] { return m.Larvae }
	o.Males = func() null.Val[int16] { return m.Males }
	o.Objectid = func() int32 { return m.Objectid }
	o.Poolstogen = func() null.Val[int16] { return m.Poolstogen }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Pupae = func() null.Val[int16] { return m.Pupae }
	o.Species = func() null.Val[string] { return m.Species }
	o.Total = func() null.Val[int64] { return m.Total }
	o.TrapdataID = func() null.Val[string] { return m.TrapdataID }
	o.Unknown = func() null.Val[int16] { return m.Unknown }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.Globalzscore = func() null.Val[float64] { return m.Globalzscore }
	o.H3R7 = func() null.Val[string] { return m.H3R7 }
	o.H3R8 = func() null.Val[string] { return m.H3R8 }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.R7score = func() null.Val[float64] { return m.R7score }
	o.R8score = func() null.Val[float64] { return m.R8score }
	o.Yearweek = func() null.Val[int64] { return m.Yearweek }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryStormdrain(mods ...HistoryStormdrainMod) *HistoryStormdrainTemplate {
	return f.NewHistoryStormdrainWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryStormdrainWithContext(ctx context.Context, mods ...HistoryStormdrainMod) *HistoryStormdrainTemplate {
	o := &HistoryStormdrainTemplate{f: f}

	if f != nil {
		f.baseHistoryStormdrainMods.Apply(ctx, o)
	}

	HistoryStormdrainModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryStormdrain(m *models.HistoryStormdrain) *HistoryStormdrainTemplate {
	o := &HistoryStormdrainTemplate{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Jurisdiction = func() null.Val[string] { return m.Jurisdiction }
	o.Lastaction = func() null.Val[string] { return m.Lastaction }
	o.Laststatus = func() null.Val[string] { return m.Laststatus }
	o.Lasttreatdate = func() null.Val[int64] { return m.Lasttreatdate }
	o.Nexttreatmentdate = func() null.Val[int64] { return m.Nexttreatmentdate }
	o.Objectid = func() int32 { return m.Objectid }
	o.Symbology = func() null.Val[string] { return m.Symbology }
	o.Type = func() null.Val[string] { return m.Type }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryTimecard(mods ...HistoryTimecardMod) *HistoryTimecardTemplate {
	return f.NewHistoryTimecardWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryTimecardWithContext(ctx context.Context, mods ...HistoryTimecardMod) *HistoryTimecardTemplate {
	o := &HistoryTimecardTemplate{f: f}

	if f != nil {
		f.baseHistoryTimecardMods.Apply(ctx, o)
	}

	HistoryTimecardModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryTimecard(m *models.HistoryTimecard) *HistoryTimecardTemplate {
	o := &HistoryTimecardTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Equiptype = func() null.Val[string] { return m.Equiptype }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Lclocid = func() null.Val[string] { return m.Lclocid }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Samplelocid = func() null.Val[string] { return m.Samplelocid }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Traplocid = func() null.Val[string] { return m.Traplocid }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }
	o.Rodentlocid = func() null.Val[string] { return m.Rodentlocid }

	return o
}

func (f *Factory) NewHistoryTrapdatum(mods ...HistoryTrapdatumMod) *HistoryTrapdatumTemplate {
	return f.NewHistoryTrapdatumWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryTrapdatumWithContext(ctx context.Context, mods ...HistoryTrapdatumMod) *HistoryTrapdatumTemplate {
	o := &HistoryTrapdatumTemplate{f: f}

	if f != nil {
		f.baseHistoryTrapdatumMods.Apply(ctx, o)
	}

	HistoryTrapdatumModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryTrapdatum(m *models.HistoryTrapdatum) *HistoryTrapdatumTemplate {
	o := &HistoryTrapdatumTemplate{f: f, alreadyPersisted: true}

	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Field = func() null.Val[int64] { return m.Field }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Idbytech = func() null.Val[string] { return m.Idbytech }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.LocID = func() null.Val[string] { return m.LocID }
	o.LR = func() null.Val[int16] { return m.LR }
	o.Lure = func() null.Val[string] { return m.Lure }
	o.Objectid = func() int32 { return m.Objectid }
	o.Processed = func() null.Val[int16] { return m.Processed }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Sortbytech = func() null.Val[string] { return m.Sortbytech }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Trapactivitytype = func() null.Val[string] { return m.Trapactivitytype }
	o.Trapcondition = func() null.Val[string] { return m.Trapcondition }
	o.Trapnights = func() null.Val[int16] { return m.Trapnights }
	o.Traptype = func() null.Val[string] { return m.Traptype }
	o.Voltage = func() null.Val[float64] { return m.Voltage }
	o.Vectorsurvtrapdataid = func() null.Val[string] { return m.Vectorsurvtrapdataid }
	o.Vectorsurvtraplocationid = func() null.Val[string] { return m.Vectorsurvtraplocationid }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryTraplocation(mods ...HistoryTraplocationMod) *HistoryTraplocationTemplate {
	return f.NewHistoryTraplocationWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryTraplocationWithContext(ctx context.Context, mods ...HistoryTraplocationMod) *HistoryTraplocationTemplate {
	o := &HistoryTraplocationTemplate{f: f}

	if f != nil {
		f.baseHistoryTraplocationMods.Apply(ctx, o)
	}

	HistoryTraplocationModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryTraplocation(m *models.HistoryTraplocation) *HistoryTraplocationTemplate {
	o := &HistoryTraplocationTemplate{f: f, alreadyPersisted: true}

	o.Accessdesc = func() null.Val[string] { return m.Accessdesc }
	o.Active = func() null.Val[int16] { return m.Active }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Description = func() null.Val[string] { return m.Description }
	o.Externalid = func() null.Val[string] { return m.Externalid }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Gatewaysync = func() null.Val[int16] { return m.Gatewaysync }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.Locationnumber = func() null.Val[int64] { return m.Locationnumber }
	o.Name = func() null.Val[string] { return m.Name }
	o.Nextactiondatescheduled = func() null.Val[int64] { return m.Nextactiondatescheduled }
	o.Objectid = func() int32 { return m.Objectid }
	o.Priority = func() null.Val[string] { return m.Priority }
	o.Usetype = func() null.Val[string] { return m.Usetype }
	o.Vectorsurvsiteid = func() null.Val[string] { return m.Vectorsurvsiteid }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.H3R7 = func() null.Val[string] { return m.H3R7 }
	o.H3R8 = func() null.Val[string] { return m.H3R8 }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Route = func() null.Val[int64] { return m.Route }
	o.RouteOrder = func() null.Val[int64] { return m.RouteOrder }
	o.SetDow = func() null.Val[int64] { return m.SetDow }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryTreatment(mods ...HistoryTreatmentMod) *HistoryTreatmentTemplate {
	return f.NewHistoryTreatmentWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryTreatmentWithContext(ctx context.Context, mods ...HistoryTreatmentMod) *HistoryTreatmentTemplate {
	o := &HistoryTreatmentTemplate{f: f}

	if f != nil {
		f.baseHistoryTreatmentMods.Apply(ctx, o)
	}

	HistoryTreatmentModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryTreatment(m *models.HistoryTreatment) *HistoryTreatmentTemplate {
	o := &HistoryTreatmentTemplate{f: f, alreadyPersisted: true}

	o.Activity = func() null.Val[string] { return m.Activity }
	o.Areaunit = func() null.Val[string] { return m.Areaunit }
	o.Avetemp = func() null.Val[float64] { return m.Avetemp }
	o.Barrierrouteid = func() null.Val[string] { return m.Barrierrouteid }
	o.Cbcount = func() null.Val[int16] { return m.Cbcount }
	o.Comments = func() null.Val[string] { return m.Comments }
	o.Containercount = func() null.Val[int16] { return m.Containercount }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Enddatetime = func() null.Val[int64] { return m.Enddatetime }
	o.Equiptype = func() null.Val[string] { return m.Equiptype }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Fieldtech = func() null.Val[string] { return m.Fieldtech }
	o.Flowrate = func() null.Val[float64] { return m.Flowrate }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Habitat = func() null.Val[string] { return m.Habitat }
	o.InspID = func() null.Val[string] { return m.InspID }
	o.Invloc = func() null.Val[string] { return m.Invloc }
	o.Linelocid = func() null.Val[string] { return m.Linelocid }
	o.Locationname = func() null.Val[string] { return m.Locationname }
	o.Method = func() null.Val[string] { return m.Method }
	o.Objectid = func() int32 { return m.Objectid }
	o.Pointlocid = func() null.Val[string] { return m.Pointlocid }
	o.Polygonlocid = func() null.Val[string] { return m.Polygonlocid }
	o.Product = func() null.Val[string] { return m.Product }
	o.Ptaid = func() null.Val[string] { return m.Ptaid }
	o.Qty = func() null.Val[float64] { return m.Qty }
	o.Qtyunit = func() null.Val[string] { return m.Qtyunit }
	o.Raingauge = func() null.Val[float64] { return m.Raingauge }
	o.Recordstatus = func() null.Val[int16] { return m.Recordstatus }
	o.Reviewed = func() null.Val[int16] { return m.Reviewed }
	o.Reviewedby = func() null.Val[string] { return m.Reviewedby }
	o.Revieweddate = func() null.Val[int64] { return m.Revieweddate }
	o.Sdid = func() null.Val[string] { return m.Sdid }
	o.Sitecond = func() null.Val[string] { return m.Sitecond }
	o.Srid = func() null.Val[string] { return m.Srid }
	o.Startdatetime = func() null.Val[int64] { return m.Startdatetime }
	o.Targetspecies = func() null.Val[string] { return m.Targetspecies }
	o.Tirecount = func() null.Val[int16] { return m.Tirecount }
	o.Treatacres = func() null.Val[float64] { return m.Treatacres }
	o.Treatarea = func() null.Val[float64] { return m.Treatarea }
	o.Treathectares = func() null.Val[float64] { return m.Treathectares }
	o.Treatmenthours = func() null.Val[float64] { return m.Treatmenthours }
	o.Treatmentlength = func() null.Val[float64] { return m.Treatmentlength }
	o.Treatmentlengthunits = func() null.Val[string] { return m.Treatmentlengthunits }
	o.Totalcostprodcut = func() null.Val[float64] { return m.Totalcostprodcut }
	o.Ulvrouteid = func() null.Val[string] { return m.Ulvrouteid }
	o.Warningoverride = func() null.Val[int16] { return m.Warningoverride }
	o.Winddir = func() null.Val[string] { return m.Winddir }
	o.Windspeed = func() null.Val[float64] { return m.Windspeed }
	o.Zone = func() null.Val[string] { return m.Zone }
	o.Zone2 = func() null.Val[string] { return m.Zone2 }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.TempSitecond = func() null.Val[string] { return m.TempSitecond }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryTreatmentarea(mods ...HistoryTreatmentareaMod) *HistoryTreatmentareaTemplate {
	return f.NewHistoryTreatmentareaWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryTreatmentareaWithContext(ctx context.Context, mods ...HistoryTreatmentareaMod) *HistoryTreatmentareaTemplate {
	o := &HistoryTreatmentareaTemplate{f: f}

	if f != nil {
		f.baseHistoryTreatmentareaMods.Apply(ctx, o)
	}

	HistoryTreatmentareaModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryTreatmentarea(m *models.HistoryTreatmentarea) *HistoryTreatmentareaTemplate {
	o := &HistoryTreatmentareaTemplate{f: f, alreadyPersisted: true}

	o.Comments = func() null.Val[string] { return m.Comments }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Notified = func() null.Val[int16] { return m.Notified }
	o.Objectid = func() int32 { return m.Objectid }
	o.SessionID = func() null.Val[string] { return m.SessionID }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Treatdate = func() null.Val[int64] { return m.Treatdate }
	o.TreatID = func() null.Val[string] { return m.TreatID }
	o.Type = func() null.Val[string] { return m.Type }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryZone(mods ...HistoryZoneMod) *HistoryZoneTemplate {
	return f.NewHistoryZoneWithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryZoneWithContext(ctx context.Context, mods ...HistoryZoneMod) *HistoryZoneTemplate {
	o := &HistoryZoneTemplate{f: f}

	if f != nil {
		f.baseHistoryZoneMods.Apply(ctx, o)
	}

	HistoryZoneModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryZone(m *models.HistoryZone) *HistoryZoneTemplate {
	o := &HistoryZoneTemplate{f: f, alreadyPersisted: true}

	o.Active = func() null.Val[int64] { return m.Active }
	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewHistoryZones2(mods ...HistoryZones2Mod) *HistoryZones2Template {
	return f.NewHistoryZones2WithContext(context.Background(), mods...)
}

func (f *Factory) NewHistoryZones2WithContext(ctx context.Context, mods ...HistoryZones2Mod) *HistoryZones2Template {
	o := &HistoryZones2Template{f: f}

	if f != nil {
		f.baseHistoryZones2Mods.Apply(ctx, o)
	}

	HistoryZones2ModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingHistoryZones2(m *models.HistoryZones2) *HistoryZones2Template {
	o := &HistoryZones2Template{f: f, alreadyPersisted: true}

	o.Creationdate = func() null.Val[int64] { return m.Creationdate }
	o.Creator = func() null.Val[string] { return m.Creator }
	o.Editdate = func() null.Val[int64] { return m.Editdate }
	o.Editor = func() null.Val[string] { return m.Editor }
	o.Globalid = func() null.Val[string] { return m.Globalid }
	o.Name = func() null.Val[string] { return m.Name }
	o.Objectid = func() int32 { return m.Objectid }
	o.ShapeArea = func() null.Val[float64] { return m.ShapeArea }
	o.ShapeLength = func() null.Val[float64] { return m.ShapeLength }
	o.Created = func() null.Val[time.Time] { return m.Created }
	o.CreatedDate = func() null.Val[int64] { return m.CreatedDate }
	o.CreatedUser = func() null.Val[string] { return m.CreatedUser }
	o.GeometryX = func() null.Val[float64] { return m.GeometryX }
	o.GeometryY = func() null.Val[float64] { return m.GeometryY }
	o.LastEditedDate = func() null.Val[int64] { return m.LastEditedDate }
	o.LastEditedUser = func() null.Val[string] { return m.LastEditedUser }
	o.Version = func() int32 { return m.Version }

	return o
}

func (f *Factory) NewNote(mods ...NoteMod) *NoteTemplate {
	return f.NewNoteWithContext(context.Background(), mods...)
}

func (f *Factory) NewNoteWithContext(ctx context.Context, mods ...NoteMod) *NoteTemplate {
	o := &NoteTemplate{f: f}

	if f != nil {
		f.baseNoteMods.Apply(ctx, o)
	}

	NoteModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingNote(m *models.Note) *NoteTemplate {
	o := &NoteTemplate{f: f, alreadyPersisted: true}

	o.Created = func() null.Val[time.Time] { return m.Created }
	o.Deleted = func() null.Val[time.Time] { return m.Deleted }
	o.Latitude = func() null.Val[float64] { return m.Latitude }
	o.Longitude = func() null.Val[float64] { return m.Longitude }
	o.Text = func() string { return m.Text }
	o.Updated = func() null.Val[time.Time] { return m.Updated }
	o.UUID = func() string { return m.UUID }

	ctx := context.Background()
	if len(m.R.HistoryNoteAudioRecordings) > 0 {
		NoteMods.AddExistingHistoryNoteAudioRecordings(m.R.HistoryNoteAudioRecordings...).Apply(ctx, o)
	}
	if len(m.R.NoteAudioRecordings) > 0 {
		NoteMods.AddExistingNoteAudioRecordings(m.R.NoteAudioRecordings...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewNoteAudio(mods ...NoteAudioMod) *NoteAudioTemplate {
	return f.NewNoteAudioWithContext(context.Background(), mods...)
}

func (f *Factory) NewNoteAudioWithContext(ctx context.Context, mods ...NoteAudioMod) *NoteAudioTemplate {
	o := &NoteAudioTemplate{f: f}

	if f != nil {
		f.baseNoteAudioMods.Apply(ctx, o)
	}

	NoteAudioModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingNoteAudio(m *models.NoteAudio) *NoteAudioTemplate {
	o := &NoteAudioTemplate{f: f, alreadyPersisted: true}

	o.Created = func() time.Time { return m.Created }
	o.Deleted = func() null.Val[time.Time] { return m.Deleted }
	o.Duration = func() null.Val[float32] { return m.Duration }
	o.Transcription = func() null.Val[string] { return m.Transcription }
	o.Version = func() int32 { return m.Version }
	o.UUID = func() string { return m.UUID }
	o.Creator = func() int32 { return m.Creator }
	o.TranscriptionUserEdited = func() bool { return m.TranscriptionUserEdited }
	o.IsAudioNormalized = func() bool { return m.IsAudioNormalized }
	o.IsTranscodedToOgg = func() bool { return m.IsTranscodedToOgg }
	o.HasBeenReviewed = func() bool { return m.HasBeenReviewed }
	o.TranscriptionInternallyEdited = func() bool { return m.TranscriptionInternallyEdited }
	o.NeedsFurtherReview = func() bool { return m.NeedsFurtherReview }
	o.DeletedBy = func() null.Val[int32] { return m.DeletedBy }

	ctx := context.Background()
	if m.R.CreatorUser != nil {
		NoteAudioMods.WithExistingCreatorUser(m.R.CreatorUser).Apply(ctx, o)
	}
	if m.R.DeletedByUser != nil {
		NoteAudioMods.WithExistingDeletedByUser(m.R.DeletedByUser).Apply(ctx, o)
	}
	if len(m.R.NoteAudioBreadcrumbs) > 0 {
		NoteAudioMods.AddExistingNoteAudioBreadcrumbs(m.R.NoteAudioBreadcrumbs...).Apply(ctx, o)
	}
	if len(m.R.TaskAudioReviews) > 0 {
		NoteAudioMods.AddExistingTaskAudioReviews(m.R.TaskAudioReviews...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewNoteAudioBreadcrumb(mods ...NoteAudioBreadcrumbMod) *NoteAudioBreadcrumbTemplate {
	return f.NewNoteAudioBreadcrumbWithContext(context.Background(), mods...)
}

func (f *Factory) NewNoteAudioBreadcrumbWithContext(ctx context.Context, mods ...NoteAudioBreadcrumbMod) *NoteAudioBreadcrumbTemplate {
	o := &NoteAudioBreadcrumbTemplate{f: f}

	if f != nil {
		f.baseNoteAudioBreadcrumbMods.Apply(ctx, o)
	}

	NoteAudioBreadcrumbModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingNoteAudioBreadcrumb(m *models.NoteAudioBreadcrumb) *NoteAudioBreadcrumbTemplate {
	o := &NoteAudioBreadcrumbTemplate{f: f, alreadyPersisted: true}

	o.Cell = func() decimal.Decimal { return m.Cell }
	o.Created = func() time.Time { return m.Created }
	o.NoteAudioUUID = func() string { return m.NoteAudioUUID }
	o.NoteAudioVersion = func() int32 { return m.NoteAudioVersion }
	o.Position = func() int32 { return m.Position }

	ctx := context.Background()
	if m.R.NoteAudio != nil {
		NoteAudioBreadcrumbMods.WithExistingNoteAudio(m.R.NoteAudio).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewNoteAudioRecording(mods ...NoteAudioRecordingMod) *NoteAudioRecordingTemplate {
	return f.NewNoteAudioRecordingWithContext(context.Background(), mods...)
}

func (f *Factory) NewNoteAudioRecordingWithContext(ctx context.Context, mods ...NoteAudioRecordingMod) *NoteAudioRecordingTemplate {
	o := &NoteAudioRecordingTemplate{f: f}

	if f != nil {
		f.baseNoteAudioRecordingMods.Apply(ctx, o)
	}

	NoteAudioRecordingModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingNoteAudioRecording(m *models.NoteAudioRecording) *NoteAudioRecordingTemplate {
	o := &NoteAudioRecordingTemplate{f: f, alreadyPersisted: true}

	o.Created = func() null.Val[time.Time] { return m.Created }
	o.Deleted = func() null.Val[time.Time] { return m.Deleted }
	o.Duration = func() string { return m.Duration }
	o.NoteUUID = func() null.Val[string] { return m.NoteUUID }
	o.Transcript = func() null.Val[string] { return m.Transcript }
	o.UUID = func() string { return m.UUID }

	ctx := context.Background()
	if m.R.Note != nil {
		NoteAudioRecordingMods.WithExistingNote(m.R.Note).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewNoteImage(mods ...NoteImageMod) *NoteImageTemplate {
	return f.NewNoteImageWithContext(context.Background(), mods...)
}

func (f *Factory) NewNoteImageWithContext(ctx context.Context, mods ...NoteImageMod) *NoteImageTemplate {
	o := &NoteImageTemplate{f: f}

	if f != nil {
		f.baseNoteImageMods.Apply(ctx, o)
	}

	NoteImageModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingNoteImage(m *models.NoteImage) *NoteImageTemplate {
	o := &NoteImageTemplate{f: f, alreadyPersisted: true}

	o.Created = func() time.Time { return m.Created }
	o.Deleted = func() null.Val[time.Time] { return m.Deleted }
	o.Version = func() int32 { return m.Version }
	o.UUID = func() string { return m.UUID }
	o.Creator = func() int32 { return m.Creator }

	ctx := context.Background()
	if m.R.CreatorUser != nil {
		NoteImageMods.WithExistingCreatorUser(m.R.CreatorUser).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewSession(mods ...SessionMod) *SessionTemplate {
	return f.NewSessionWithContext(context.Background(), mods...)
}

func (f *Factory) NewSessionWithContext(ctx context.Context, mods ...SessionMod) *SessionTemplate {
	o := &SessionTemplate{f: f}

	if f != nil {
		f.baseSessionMods.Apply(ctx, o)
	}

	SessionModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingSession(m *models.Session) *SessionTemplate {
	o := &SessionTemplate{f: f, alreadyPersisted: true}

	o.Token = func() string { return m.Token }
	o.Data = func() []byte { return m.Data }
	o.Expiry = func() time.Time { return m.Expiry }

	return o
}

func (f *Factory) NewTaskAudioReview(mods ...TaskAudioReviewMod) *TaskAudioReviewTemplate {
	return f.NewTaskAudioReviewWithContext(context.Background(), mods...)
}

func (f *Factory) NewTaskAudioReviewWithContext(ctx context.Context, mods ...TaskAudioReviewMod) *TaskAudioReviewTemplate {
	o := &TaskAudioReviewTemplate{f: f}

	if f != nil {
		f.baseTaskAudioReviewMods.Apply(ctx, o)
	}

	TaskAudioReviewModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingTaskAudioReview(m *models.TaskAudioReview) *TaskAudioReviewTemplate {
	o := &TaskAudioReviewTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.CompletedBy = func() null.Val[int32] { return m.CompletedBy }
	o.Created = func() time.Time { return m.Created }
	o.NeedsReview = func() bool { return m.NeedsReview }
	o.NoteAudioUUID = func() string { return m.NoteAudioUUID }
	o.NoteAudioVersion = func() int32 { return m.NoteAudioVersion }
	o.ReviewedBy = func() null.Val[int32] { return m.ReviewedBy }

	ctx := context.Background()
	if m.R.CompletedByUser != nil {
		TaskAudioReviewMods.WithExistingCompletedByUser(m.R.CompletedByUser).Apply(ctx, o)
	}
	if m.R.NoteAudio != nil {
		TaskAudioReviewMods.WithExistingNoteAudio(m.R.NoteAudio).Apply(ctx, o)
	}
	if m.R.ReviewedByUser != nil {
		TaskAudioReviewMods.WithExistingReviewedByUser(m.R.ReviewedByUser).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	return f.NewUserWithContext(context.Background(), mods...)
}

func (f *Factory) NewUserWithContext(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingUser(m *models.User) *UserTemplate {
	o := &UserTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int32 { return m.ID }
	o.DisplayName = func() null.Val[string] { return m.DisplayName }
	o.PasswordHashType = func() null.Val[enums.Hashtype] { return m.PasswordHashType }
	o.PasswordHash = func() null.Val[string] { return m.PasswordHash }
	o.Username = func() null.Val[string] { return m.Username }

	ctx := context.Background()
	if len(m.R.CreatorNoteAudios) > 0 {
		UserMods.AddExistingCreatorNoteAudios(m.R.CreatorNoteAudios...).Apply(ctx, o)
	}
	if len(m.R.DeletedByNoteAudios) > 0 {
		UserMods.AddExistingDeletedByNoteAudios(m.R.DeletedByNoteAudios...).Apply(ctx, o)
	}
	if len(m.R.CreatorNoteImages) > 0 {
		UserMods.AddExistingCreatorNoteImages(m.R.CreatorNoteImages...).Apply(ctx, o)
	}
	if len(m.R.CompletedByTaskAudioReviews) > 0 {
		UserMods.AddExistingCompletedByTaskAudioReviews(m.R.CompletedByTaskAudioReviews...).Apply(ctx, o)
	}
	if len(m.R.ReviewedByTaskAudioReviews) > 0 {
		UserMods.AddExistingReviewedByTaskAudioReviews(m.R.ReviewedByTaskAudioReviews...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) ClearBaseFSContainerrelateMods() {
	f.baseFSContainerrelateMods = nil
}

func (f *Factory) AddBaseFSContainerrelateMod(mods ...FSContainerrelateMod) {
	f.baseFSContainerrelateMods = append(f.baseFSContainerrelateMods, mods...)
}

func (f *Factory) ClearBaseFSFieldscoutinglogMods() {
	f.baseFSFieldscoutinglogMods = nil
}

func (f *Factory) AddBaseFSFieldscoutinglogMod(mods ...FSFieldscoutinglogMod) {
	f.baseFSFieldscoutinglogMods = append(f.baseFSFieldscoutinglogMods, mods...)
}

func (f *Factory) ClearBaseFSHabitatrelateMods() {
	f.baseFSHabitatrelateMods = nil
}

func (f *Factory) AddBaseFSHabitatrelateMod(mods ...FSHabitatrelateMod) {
	f.baseFSHabitatrelateMods = append(f.baseFSHabitatrelateMods, mods...)
}

func (f *Factory) ClearBaseFSInspectionsampleMods() {
	f.baseFSInspectionsampleMods = nil
}

func (f *Factory) AddBaseFSInspectionsampleMod(mods ...FSInspectionsampleMod) {
	f.baseFSInspectionsampleMods = append(f.baseFSInspectionsampleMods, mods...)
}

func (f *Factory) ClearBaseFSInspectionsampledetailMods() {
	f.baseFSInspectionsampledetailMods = nil
}

func (f *Factory) AddBaseFSInspectionsampledetailMod(mods ...FSInspectionsampledetailMod) {
	f.baseFSInspectionsampledetailMods = append(f.baseFSInspectionsampledetailMods, mods...)
}

func (f *Factory) ClearBaseFSLinelocationMods() {
	f.baseFSLinelocationMods = nil
}

func (f *Factory) AddBaseFSLinelocationMod(mods ...FSLinelocationMod) {
	f.baseFSLinelocationMods = append(f.baseFSLinelocationMods, mods...)
}

func (f *Factory) ClearBaseFSLocationtrackingMods() {
	f.baseFSLocationtrackingMods = nil
}

func (f *Factory) AddBaseFSLocationtrackingMod(mods ...FSLocationtrackingMod) {
	f.baseFSLocationtrackingMods = append(f.baseFSLocationtrackingMods, mods...)
}

func (f *Factory) ClearBaseFSMosquitoinspectionMods() {
	f.baseFSMosquitoinspectionMods = nil
}

func (f *Factory) AddBaseFSMosquitoinspectionMod(mods ...FSMosquitoinspectionMod) {
	f.baseFSMosquitoinspectionMods = append(f.baseFSMosquitoinspectionMods, mods...)
}

func (f *Factory) ClearBaseFSPointlocationMods() {
	f.baseFSPointlocationMods = nil
}

func (f *Factory) AddBaseFSPointlocationMod(mods ...FSPointlocationMod) {
	f.baseFSPointlocationMods = append(f.baseFSPointlocationMods, mods...)
}

func (f *Factory) ClearBaseFSPolygonlocationMods() {
	f.baseFSPolygonlocationMods = nil
}

func (f *Factory) AddBaseFSPolygonlocationMod(mods ...FSPolygonlocationMod) {
	f.baseFSPolygonlocationMods = append(f.baseFSPolygonlocationMods, mods...)
}

func (f *Factory) ClearBaseFSPoolMods() {
	f.baseFSPoolMods = nil
}

func (f *Factory) AddBaseFSPoolMod(mods ...FSPoolMod) {
	f.baseFSPoolMods = append(f.baseFSPoolMods, mods...)
}

func (f *Factory) ClearBaseFSPooldetailMods() {
	f.baseFSPooldetailMods = nil
}

func (f *Factory) AddBaseFSPooldetailMod(mods ...FSPooldetailMod) {
	f.baseFSPooldetailMods = append(f.baseFSPooldetailMods, mods...)
}

func (f *Factory) ClearBaseFSProposedtreatmentareaMods() {
	f.baseFSProposedtreatmentareaMods = nil
}

func (f *Factory) AddBaseFSProposedtreatmentareaMod(mods ...FSProposedtreatmentareaMod) {
	f.baseFSProposedtreatmentareaMods = append(f.baseFSProposedtreatmentareaMods, mods...)
}

func (f *Factory) ClearBaseFSQamosquitoinspectionMods() {
	f.baseFSQamosquitoinspectionMods = nil
}

func (f *Factory) AddBaseFSQamosquitoinspectionMod(mods ...FSQamosquitoinspectionMod) {
	f.baseFSQamosquitoinspectionMods = append(f.baseFSQamosquitoinspectionMods, mods...)
}

func (f *Factory) ClearBaseFSRodentlocationMods() {
	f.baseFSRodentlocationMods = nil
}

func (f *Factory) AddBaseFSRodentlocationMod(mods ...FSRodentlocationMod) {
	f.baseFSRodentlocationMods = append(f.baseFSRodentlocationMods, mods...)
}

func (f *Factory) ClearBaseFSSamplecollectionMods() {
	f.baseFSSamplecollectionMods = nil
}

func (f *Factory) AddBaseFSSamplecollectionMod(mods ...FSSamplecollectionMod) {
	f.baseFSSamplecollectionMods = append(f.baseFSSamplecollectionMods, mods...)
}

func (f *Factory) ClearBaseFSSamplelocationMods() {
	f.baseFSSamplelocationMods = nil
}

func (f *Factory) AddBaseFSSamplelocationMod(mods ...FSSamplelocationMod) {
	f.baseFSSamplelocationMods = append(f.baseFSSamplelocationMods, mods...)
}

func (f *Factory) ClearBaseFSServicerequestMods() {
	f.baseFSServicerequestMods = nil
}

func (f *Factory) AddBaseFSServicerequestMod(mods ...FSServicerequestMod) {
	f.baseFSServicerequestMods = append(f.baseFSServicerequestMods, mods...)
}

func (f *Factory) ClearBaseFSSpeciesabundanceMods() {
	f.baseFSSpeciesabundanceMods = nil
}

func (f *Factory) AddBaseFSSpeciesabundanceMod(mods ...FSSpeciesabundanceMod) {
	f.baseFSSpeciesabundanceMods = append(f.baseFSSpeciesabundanceMods, mods...)
}

func (f *Factory) ClearBaseFSStormdrainMods() {
	f.baseFSStormdrainMods = nil
}

func (f *Factory) AddBaseFSStormdrainMod(mods ...FSStormdrainMod) {
	f.baseFSStormdrainMods = append(f.baseFSStormdrainMods, mods...)
}

func (f *Factory) ClearBaseFSTimecardMods() {
	f.baseFSTimecardMods = nil
}

func (f *Factory) AddBaseFSTimecardMod(mods ...FSTimecardMod) {
	f.baseFSTimecardMods = append(f.baseFSTimecardMods, mods...)
}

func (f *Factory) ClearBaseFSTrapdatumMods() {
	f.baseFSTrapdatumMods = nil
}

func (f *Factory) AddBaseFSTrapdatumMod(mods ...FSTrapdatumMod) {
	f.baseFSTrapdatumMods = append(f.baseFSTrapdatumMods, mods...)
}

func (f *Factory) ClearBaseFSTraplocationMods() {
	f.baseFSTraplocationMods = nil
}

func (f *Factory) AddBaseFSTraplocationMod(mods ...FSTraplocationMod) {
	f.baseFSTraplocationMods = append(f.baseFSTraplocationMods, mods...)
}

func (f *Factory) ClearBaseFSTreatmentMods() {
	f.baseFSTreatmentMods = nil
}

func (f *Factory) AddBaseFSTreatmentMod(mods ...FSTreatmentMod) {
	f.baseFSTreatmentMods = append(f.baseFSTreatmentMods, mods...)
}

func (f *Factory) ClearBaseFSTreatmentareaMods() {
	f.baseFSTreatmentareaMods = nil
}

func (f *Factory) AddBaseFSTreatmentareaMod(mods ...FSTreatmentareaMod) {
	f.baseFSTreatmentareaMods = append(f.baseFSTreatmentareaMods, mods...)
}

func (f *Factory) ClearBaseFSZoneMods() {
	f.baseFSZoneMods = nil
}

func (f *Factory) AddBaseFSZoneMod(mods ...FSZoneMod) {
	f.baseFSZoneMods = append(f.baseFSZoneMods, mods...)
}

func (f *Factory) ClearBaseFSZones2Mods() {
	f.baseFSZones2Mods = nil
}

func (f *Factory) AddBaseFSZones2Mod(mods ...FSZones2Mod) {
	f.baseFSZones2Mods = append(f.baseFSZones2Mods, mods...)
}

func (f *Factory) ClearBaseGooseDBVersionMods() {
	f.baseGooseDBVersionMods = nil
}

func (f *Factory) AddBaseGooseDBVersionMod(mods ...GooseDBVersionMod) {
	f.baseGooseDBVersionMods = append(f.baseGooseDBVersionMods, mods...)
}

func (f *Factory) ClearBaseHistoryContainerrelateMods() {
	f.baseHistoryContainerrelateMods = nil
}

func (f *Factory) AddBaseHistoryContainerrelateMod(mods ...HistoryContainerrelateMod) {
	f.baseHistoryContainerrelateMods = append(f.baseHistoryContainerrelateMods, mods...)
}

func (f *Factory) ClearBaseHistoryFieldscoutinglogMods() {
	f.baseHistoryFieldscoutinglogMods = nil
}

func (f *Factory) AddBaseHistoryFieldscoutinglogMod(mods ...HistoryFieldscoutinglogMod) {
	f.baseHistoryFieldscoutinglogMods = append(f.baseHistoryFieldscoutinglogMods, mods...)
}

func (f *Factory) ClearBaseHistoryHabitatrelateMods() {
	f.baseHistoryHabitatrelateMods = nil
}

func (f *Factory) AddBaseHistoryHabitatrelateMod(mods ...HistoryHabitatrelateMod) {
	f.baseHistoryHabitatrelateMods = append(f.baseHistoryHabitatrelateMods, mods...)
}

func (f *Factory) ClearBaseHistoryInspectionsampleMods() {
	f.baseHistoryInspectionsampleMods = nil
}

func (f *Factory) AddBaseHistoryInspectionsampleMod(mods ...HistoryInspectionsampleMod) {
	f.baseHistoryInspectionsampleMods = append(f.baseHistoryInspectionsampleMods, mods...)
}

func (f *Factory) ClearBaseHistoryInspectionsampledetailMods() {
	f.baseHistoryInspectionsampledetailMods = nil
}

func (f *Factory) AddBaseHistoryInspectionsampledetailMod(mods ...HistoryInspectionsampledetailMod) {
	f.baseHistoryInspectionsampledetailMods = append(f.baseHistoryInspectionsampledetailMods, mods...)
}

func (f *Factory) ClearBaseHistoryLinelocationMods() {
	f.baseHistoryLinelocationMods = nil
}

func (f *Factory) AddBaseHistoryLinelocationMod(mods ...HistoryLinelocationMod) {
	f.baseHistoryLinelocationMods = append(f.baseHistoryLinelocationMods, mods...)
}

func (f *Factory) ClearBaseHistoryLocationtrackingMods() {
	f.baseHistoryLocationtrackingMods = nil
}

func (f *Factory) AddBaseHistoryLocationtrackingMod(mods ...HistoryLocationtrackingMod) {
	f.baseHistoryLocationtrackingMods = append(f.baseHistoryLocationtrackingMods, mods...)
}

func (f *Factory) ClearBaseHistoryMosquitoinspectionMods() {
	f.baseHistoryMosquitoinspectionMods = nil
}

func (f *Factory) AddBaseHistoryMosquitoinspectionMod(mods ...HistoryMosquitoinspectionMod) {
	f.baseHistoryMosquitoinspectionMods = append(f.baseHistoryMosquitoinspectionMods, mods...)
}

func (f *Factory) ClearBaseHistoryNoteMods() {
	f.baseHistoryNoteMods = nil
}

func (f *Factory) AddBaseHistoryNoteMod(mods ...HistoryNoteMod) {
	f.baseHistoryNoteMods = append(f.baseHistoryNoteMods, mods...)
}

func (f *Factory) ClearBaseHistoryNoteAudioRecordingMods() {
	f.baseHistoryNoteAudioRecordingMods = nil
}

func (f *Factory) AddBaseHistoryNoteAudioRecordingMod(mods ...HistoryNoteAudioRecordingMod) {
	f.baseHistoryNoteAudioRecordingMods = append(f.baseHistoryNoteAudioRecordingMods, mods...)
}

func (f *Factory) ClearBaseHistoryPointlocationMods() {
	f.baseHistoryPointlocationMods = nil
}

func (f *Factory) AddBaseHistoryPointlocationMod(mods ...HistoryPointlocationMod) {
	f.baseHistoryPointlocationMods = append(f.baseHistoryPointlocationMods, mods...)
}

func (f *Factory) ClearBaseHistoryPolygonlocationMods() {
	f.baseHistoryPolygonlocationMods = nil
}

func (f *Factory) AddBaseHistoryPolygonlocationMod(mods ...HistoryPolygonlocationMod) {
	f.baseHistoryPolygonlocationMods = append(f.baseHistoryPolygonlocationMods, mods...)
}

func (f *Factory) ClearBaseHistoryPoolMods() {
	f.baseHistoryPoolMods = nil
}

func (f *Factory) AddBaseHistoryPoolMod(mods ...HistoryPoolMod) {
	f.baseHistoryPoolMods = append(f.baseHistoryPoolMods, mods...)
}

func (f *Factory) ClearBaseHistoryPooldetailMods() {
	f.baseHistoryPooldetailMods = nil
}

func (f *Factory) AddBaseHistoryPooldetailMod(mods ...HistoryPooldetailMod) {
	f.baseHistoryPooldetailMods = append(f.baseHistoryPooldetailMods, mods...)
}

func (f *Factory) ClearBaseHistoryProposedtreatmentareaMods() {
	f.baseHistoryProposedtreatmentareaMods = nil
}

func (f *Factory) AddBaseHistoryProposedtreatmentareaMod(mods ...HistoryProposedtreatmentareaMod) {
	f.baseHistoryProposedtreatmentareaMods = append(f.baseHistoryProposedtreatmentareaMods, mods...)
}

func (f *Factory) ClearBaseHistoryQamosquitoinspectionMods() {
	f.baseHistoryQamosquitoinspectionMods = nil
}

func (f *Factory) AddBaseHistoryQamosquitoinspectionMod(mods ...HistoryQamosquitoinspectionMod) {
	f.baseHistoryQamosquitoinspectionMods = append(f.baseHistoryQamosquitoinspectionMods, mods...)
}

func (f *Factory) ClearBaseHistoryRodentlocationMods() {
	f.baseHistoryRodentlocationMods = nil
}

func (f *Factory) AddBaseHistoryRodentlocationMod(mods ...HistoryRodentlocationMod) {
	f.baseHistoryRodentlocationMods = append(f.baseHistoryRodentlocationMods, mods...)
}

func (f *Factory) ClearBaseHistorySamplecollectionMods() {
	f.baseHistorySamplecollectionMods = nil
}

func (f *Factory) AddBaseHistorySamplecollectionMod(mods ...HistorySamplecollectionMod) {
	f.baseHistorySamplecollectionMods = append(f.baseHistorySamplecollectionMods, mods...)
}

func (f *Factory) ClearBaseHistorySamplelocationMods() {
	f.baseHistorySamplelocationMods = nil
}

func (f *Factory) AddBaseHistorySamplelocationMod(mods ...HistorySamplelocationMod) {
	f.baseHistorySamplelocationMods = append(f.baseHistorySamplelocationMods, mods...)
}

func (f *Factory) ClearBaseHistoryServicerequestMods() {
	f.baseHistoryServicerequestMods = nil
}

func (f *Factory) AddBaseHistoryServicerequestMod(mods ...HistoryServicerequestMod) {
	f.baseHistoryServicerequestMods = append(f.baseHistoryServicerequestMods, mods...)
}

func (f *Factory) ClearBaseHistorySpeciesabundanceMods() {
	f.baseHistorySpeciesabundanceMods = nil
}

func (f *Factory) AddBaseHistorySpeciesabundanceMod(mods ...HistorySpeciesabundanceMod) {
	f.baseHistorySpeciesabundanceMods = append(f.baseHistorySpeciesabundanceMods, mods...)
}

func (f *Factory) ClearBaseHistoryStormdrainMods() {
	f.baseHistoryStormdrainMods = nil
}

func (f *Factory) AddBaseHistoryStormdrainMod(mods ...HistoryStormdrainMod) {
	f.baseHistoryStormdrainMods = append(f.baseHistoryStormdrainMods, mods...)
}

func (f *Factory) ClearBaseHistoryTimecardMods() {
	f.baseHistoryTimecardMods = nil
}

func (f *Factory) AddBaseHistoryTimecardMod(mods ...HistoryTimecardMod) {
	f.baseHistoryTimecardMods = append(f.baseHistoryTimecardMods, mods...)
}

func (f *Factory) ClearBaseHistoryTrapdatumMods() {
	f.baseHistoryTrapdatumMods = nil
}

func (f *Factory) AddBaseHistoryTrapdatumMod(mods ...HistoryTrapdatumMod) {
	f.baseHistoryTrapdatumMods = append(f.baseHistoryTrapdatumMods, mods...)
}

func (f *Factory) ClearBaseHistoryTraplocationMods() {
	f.baseHistoryTraplocationMods = nil
}

func (f *Factory) AddBaseHistoryTraplocationMod(mods ...HistoryTraplocationMod) {
	f.baseHistoryTraplocationMods = append(f.baseHistoryTraplocationMods, mods...)
}

func (f *Factory) ClearBaseHistoryTreatmentMods() {
	f.baseHistoryTreatmentMods = nil
}

func (f *Factory) AddBaseHistoryTreatmentMod(mods ...HistoryTreatmentMod) {
	f.baseHistoryTreatmentMods = append(f.baseHistoryTreatmentMods, mods...)
}

func (f *Factory) ClearBaseHistoryTreatmentareaMods() {
	f.baseHistoryTreatmentareaMods = nil
}

func (f *Factory) AddBaseHistoryTreatmentareaMod(mods ...HistoryTreatmentareaMod) {
	f.baseHistoryTreatmentareaMods = append(f.baseHistoryTreatmentareaMods, mods...)
}

func (f *Factory) ClearBaseHistoryZoneMods() {
	f.baseHistoryZoneMods = nil
}

func (f *Factory) AddBaseHistoryZoneMod(mods ...HistoryZoneMod) {
	f.baseHistoryZoneMods = append(f.baseHistoryZoneMods, mods...)
}

func (f *Factory) ClearBaseHistoryZones2Mods() {
	f.baseHistoryZones2Mods = nil
}

func (f *Factory) AddBaseHistoryZones2Mod(mods ...HistoryZones2Mod) {
	f.baseHistoryZones2Mods = append(f.baseHistoryZones2Mods, mods...)
}

func (f *Factory) ClearBaseNoteMods() {
	f.baseNoteMods = nil
}

func (f *Factory) AddBaseNoteMod(mods ...NoteMod) {
	f.baseNoteMods = append(f.baseNoteMods, mods...)
}

func (f *Factory) ClearBaseNoteAudioMods() {
	f.baseNoteAudioMods = nil
}

func (f *Factory) AddBaseNoteAudioMod(mods ...NoteAudioMod) {
	f.baseNoteAudioMods = append(f.baseNoteAudioMods, mods...)
}

func (f *Factory) ClearBaseNoteAudioBreadcrumbMods() {
	f.baseNoteAudioBreadcrumbMods = nil
}

func (f *Factory) AddBaseNoteAudioBreadcrumbMod(mods ...NoteAudioBreadcrumbMod) {
	f.baseNoteAudioBreadcrumbMods = append(f.baseNoteAudioBreadcrumbMods, mods...)
}

func (f *Factory) ClearBaseNoteAudioRecordingMods() {
	f.baseNoteAudioRecordingMods = nil
}

func (f *Factory) AddBaseNoteAudioRecordingMod(mods ...NoteAudioRecordingMod) {
	f.baseNoteAudioRecordingMods = append(f.baseNoteAudioRecordingMods, mods...)
}

func (f *Factory) ClearBaseNoteImageMods() {
	f.baseNoteImageMods = nil
}

func (f *Factory) AddBaseNoteImageMod(mods ...NoteImageMod) {
	f.baseNoteImageMods = append(f.baseNoteImageMods, mods...)
}

func (f *Factory) ClearBaseSessionMods() {
	f.baseSessionMods = nil
}

func (f *Factory) AddBaseSessionMod(mods ...SessionMod) {
	f.baseSessionMods = append(f.baseSessionMods, mods...)
}

func (f *Factory) ClearBaseTaskAudioReviewMods() {
	f.baseTaskAudioReviewMods = nil
}

func (f *Factory) AddBaseTaskAudioReviewMod(mods ...TaskAudioReviewMod) {
	f.baseTaskAudioReviewMods = append(f.baseTaskAudioReviewMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}
