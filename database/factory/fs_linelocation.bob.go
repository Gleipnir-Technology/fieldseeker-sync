// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type FSLinelocationMod interface {
	Apply(context.Context, *FSLinelocationTemplate)
}

type FSLinelocationModFunc func(context.Context, *FSLinelocationTemplate)

func (f FSLinelocationModFunc) Apply(ctx context.Context, n *FSLinelocationTemplate) {
	f(ctx, n)
}

type FSLinelocationModSlice []FSLinelocationMod

func (mods FSLinelocationModSlice) Apply(ctx context.Context, n *FSLinelocationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// FSLinelocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type FSLinelocationTemplate struct {
	Accessdesc              func() null.Val[string]
	Acres                   func() null.Val[float64]
	Active                  func() null.Val[int16]
	Comments                func() null.Val[string]
	Creationdate            func() null.Val[int64]
	Creator                 func() null.Val[string]
	Description             func() null.Val[string]
	Externalid              func() null.Val[string]
	Editdate                func() null.Val[int64]
	Editor                  func() null.Val[string]
	Globalid                func() null.Val[string]
	Habitat                 func() null.Val[string]
	Hectares                func() null.Val[float64]
	Jurisdiction            func() null.Val[string]
	Larvinspectinterval     func() null.Val[int16]
	Lastinspectactiontaken  func() null.Val[string]
	Lastinspectactivity     func() null.Val[string]
	Lastinspectavglarvae    func() null.Val[float64]
	Lastinspectavgpupae     func() null.Val[float64]
	Lastinspectbreeding     func() null.Val[string]
	Lastinspectconditions   func() null.Val[string]
	Lastinspectdate         func() null.Val[int64]
	Lastinspectfieldspecies func() null.Val[string]
	Lastinspectlstages      func() null.Val[string]
	Lasttreatactivity       func() null.Val[string]
	Lasttreatdate           func() null.Val[int64]
	Lasttreatproduct        func() null.Val[string]
	Lasttreatqty            func() null.Val[float64]
	Lasttreatqtyunit        func() null.Val[string]
	LengthFT                func() null.Val[float64]
	LengthMeters            func() null.Val[float64]
	Locationnumber          func() null.Val[int64]
	Name                    func() null.Val[string]
	Nextactiondatescheduled func() null.Val[int64]
	Objectid                func() int32
	Priority                func() null.Val[string]
	Symbology               func() null.Val[string]
	ShapeLength             func() null.Val[float64]
	Usetype                 func() null.Val[string]
	Waterorigin             func() null.Val[string]
	WidthFT                 func() null.Val[float64]
	WidthMeters             func() null.Val[float64]
	Zone                    func() null.Val[string]
	Zone2                   func() null.Val[string]
	CreatedDate             func() null.Val[int64]
	CreatedUser             func() null.Val[string]
	GeometryX               func() null.Val[float64]
	GeometryY               func() null.Val[float64]
	LastEditedDate          func() null.Val[int64]
	LastEditedUser          func() null.Val[string]
	Updated                 func() time.Time

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the FSLinelocationTemplate
func (o *FSLinelocationTemplate) Apply(ctx context.Context, mods ...FSLinelocationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.FSLinelocation
// according to the relationships in the template. Nothing is inserted into the db
func (t FSLinelocationTemplate) setModelRels(o *models.FSLinelocation) {}

// BuildSetter returns an *models.FSLinelocationSetter
// this does nothing with the relationship templates
func (o FSLinelocationTemplate) BuildSetter() *models.FSLinelocationSetter {
	m := &models.FSLinelocationSetter{}

	if o.Accessdesc != nil {
		val := o.Accessdesc()
		m.Accessdesc = omitnull.FromNull(val)
	}
	if o.Acres != nil {
		val := o.Acres()
		m.Acres = omitnull.FromNull(val)
	}
	if o.Active != nil {
		val := o.Active()
		m.Active = omitnull.FromNull(val)
	}
	if o.Comments != nil {
		val := o.Comments()
		m.Comments = omitnull.FromNull(val)
	}
	if o.Creationdate != nil {
		val := o.Creationdate()
		m.Creationdate = omitnull.FromNull(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omitnull.FromNull(val)
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = omitnull.FromNull(val)
	}
	if o.Externalid != nil {
		val := o.Externalid()
		m.Externalid = omitnull.FromNull(val)
	}
	if o.Editdate != nil {
		val := o.Editdate()
		m.Editdate = omitnull.FromNull(val)
	}
	if o.Editor != nil {
		val := o.Editor()
		m.Editor = omitnull.FromNull(val)
	}
	if o.Globalid != nil {
		val := o.Globalid()
		m.Globalid = omitnull.FromNull(val)
	}
	if o.Habitat != nil {
		val := o.Habitat()
		m.Habitat = omitnull.FromNull(val)
	}
	if o.Hectares != nil {
		val := o.Hectares()
		m.Hectares = omitnull.FromNull(val)
	}
	if o.Jurisdiction != nil {
		val := o.Jurisdiction()
		m.Jurisdiction = omitnull.FromNull(val)
	}
	if o.Larvinspectinterval != nil {
		val := o.Larvinspectinterval()
		m.Larvinspectinterval = omitnull.FromNull(val)
	}
	if o.Lastinspectactiontaken != nil {
		val := o.Lastinspectactiontaken()
		m.Lastinspectactiontaken = omitnull.FromNull(val)
	}
	if o.Lastinspectactivity != nil {
		val := o.Lastinspectactivity()
		m.Lastinspectactivity = omitnull.FromNull(val)
	}
	if o.Lastinspectavglarvae != nil {
		val := o.Lastinspectavglarvae()
		m.Lastinspectavglarvae = omitnull.FromNull(val)
	}
	if o.Lastinspectavgpupae != nil {
		val := o.Lastinspectavgpupae()
		m.Lastinspectavgpupae = omitnull.FromNull(val)
	}
	if o.Lastinspectbreeding != nil {
		val := o.Lastinspectbreeding()
		m.Lastinspectbreeding = omitnull.FromNull(val)
	}
	if o.Lastinspectconditions != nil {
		val := o.Lastinspectconditions()
		m.Lastinspectconditions = omitnull.FromNull(val)
	}
	if o.Lastinspectdate != nil {
		val := o.Lastinspectdate()
		m.Lastinspectdate = omitnull.FromNull(val)
	}
	if o.Lastinspectfieldspecies != nil {
		val := o.Lastinspectfieldspecies()
		m.Lastinspectfieldspecies = omitnull.FromNull(val)
	}
	if o.Lastinspectlstages != nil {
		val := o.Lastinspectlstages()
		m.Lastinspectlstages = omitnull.FromNull(val)
	}
	if o.Lasttreatactivity != nil {
		val := o.Lasttreatactivity()
		m.Lasttreatactivity = omitnull.FromNull(val)
	}
	if o.Lasttreatdate != nil {
		val := o.Lasttreatdate()
		m.Lasttreatdate = omitnull.FromNull(val)
	}
	if o.Lasttreatproduct != nil {
		val := o.Lasttreatproduct()
		m.Lasttreatproduct = omitnull.FromNull(val)
	}
	if o.Lasttreatqty != nil {
		val := o.Lasttreatqty()
		m.Lasttreatqty = omitnull.FromNull(val)
	}
	if o.Lasttreatqtyunit != nil {
		val := o.Lasttreatqtyunit()
		m.Lasttreatqtyunit = omitnull.FromNull(val)
	}
	if o.LengthFT != nil {
		val := o.LengthFT()
		m.LengthFT = omitnull.FromNull(val)
	}
	if o.LengthMeters != nil {
		val := o.LengthMeters()
		m.LengthMeters = omitnull.FromNull(val)
	}
	if o.Locationnumber != nil {
		val := o.Locationnumber()
		m.Locationnumber = omitnull.FromNull(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omitnull.FromNull(val)
	}
	if o.Nextactiondatescheduled != nil {
		val := o.Nextactiondatescheduled()
		m.Nextactiondatescheduled = omitnull.FromNull(val)
	}
	if o.Objectid != nil {
		val := o.Objectid()
		m.Objectid = omit.From(val)
	}
	if o.Priority != nil {
		val := o.Priority()
		m.Priority = omitnull.FromNull(val)
	}
	if o.Symbology != nil {
		val := o.Symbology()
		m.Symbology = omitnull.FromNull(val)
	}
	if o.ShapeLength != nil {
		val := o.ShapeLength()
		m.ShapeLength = omitnull.FromNull(val)
	}
	if o.Usetype != nil {
		val := o.Usetype()
		m.Usetype = omitnull.FromNull(val)
	}
	if o.Waterorigin != nil {
		val := o.Waterorigin()
		m.Waterorigin = omitnull.FromNull(val)
	}
	if o.WidthFT != nil {
		val := o.WidthFT()
		m.WidthFT = omitnull.FromNull(val)
	}
	if o.WidthMeters != nil {
		val := o.WidthMeters()
		m.WidthMeters = omitnull.FromNull(val)
	}
	if o.Zone != nil {
		val := o.Zone()
		m.Zone = omitnull.FromNull(val)
	}
	if o.Zone2 != nil {
		val := o.Zone2()
		m.Zone2 = omitnull.FromNull(val)
	}
	if o.CreatedDate != nil {
		val := o.CreatedDate()
		m.CreatedDate = omitnull.FromNull(val)
	}
	if o.CreatedUser != nil {
		val := o.CreatedUser()
		m.CreatedUser = omitnull.FromNull(val)
	}
	if o.GeometryX != nil {
		val := o.GeometryX()
		m.GeometryX = omitnull.FromNull(val)
	}
	if o.GeometryY != nil {
		val := o.GeometryY()
		m.GeometryY = omitnull.FromNull(val)
	}
	if o.LastEditedDate != nil {
		val := o.LastEditedDate()
		m.LastEditedDate = omitnull.FromNull(val)
	}
	if o.LastEditedUser != nil {
		val := o.LastEditedUser()
		m.LastEditedUser = omitnull.FromNull(val)
	}
	if o.Updated != nil {
		val := o.Updated()
		m.Updated = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.FSLinelocationSetter
// this does nothing with the relationship templates
func (o FSLinelocationTemplate) BuildManySetter(number int) []*models.FSLinelocationSetter {
	m := make([]*models.FSLinelocationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.FSLinelocation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSLinelocationTemplate.Create
func (o FSLinelocationTemplate) Build() *models.FSLinelocation {
	m := &models.FSLinelocation{}

	if o.Accessdesc != nil {
		m.Accessdesc = o.Accessdesc()
	}
	if o.Acres != nil {
		m.Acres = o.Acres()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.Comments != nil {
		m.Comments = o.Comments()
	}
	if o.Creationdate != nil {
		m.Creationdate = o.Creationdate()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Externalid != nil {
		m.Externalid = o.Externalid()
	}
	if o.Editdate != nil {
		m.Editdate = o.Editdate()
	}
	if o.Editor != nil {
		m.Editor = o.Editor()
	}
	if o.Globalid != nil {
		m.Globalid = o.Globalid()
	}
	if o.Habitat != nil {
		m.Habitat = o.Habitat()
	}
	if o.Hectares != nil {
		m.Hectares = o.Hectares()
	}
	if o.Jurisdiction != nil {
		m.Jurisdiction = o.Jurisdiction()
	}
	if o.Larvinspectinterval != nil {
		m.Larvinspectinterval = o.Larvinspectinterval()
	}
	if o.Lastinspectactiontaken != nil {
		m.Lastinspectactiontaken = o.Lastinspectactiontaken()
	}
	if o.Lastinspectactivity != nil {
		m.Lastinspectactivity = o.Lastinspectactivity()
	}
	if o.Lastinspectavglarvae != nil {
		m.Lastinspectavglarvae = o.Lastinspectavglarvae()
	}
	if o.Lastinspectavgpupae != nil {
		m.Lastinspectavgpupae = o.Lastinspectavgpupae()
	}
	if o.Lastinspectbreeding != nil {
		m.Lastinspectbreeding = o.Lastinspectbreeding()
	}
	if o.Lastinspectconditions != nil {
		m.Lastinspectconditions = o.Lastinspectconditions()
	}
	if o.Lastinspectdate != nil {
		m.Lastinspectdate = o.Lastinspectdate()
	}
	if o.Lastinspectfieldspecies != nil {
		m.Lastinspectfieldspecies = o.Lastinspectfieldspecies()
	}
	if o.Lastinspectlstages != nil {
		m.Lastinspectlstages = o.Lastinspectlstages()
	}
	if o.Lasttreatactivity != nil {
		m.Lasttreatactivity = o.Lasttreatactivity()
	}
	if o.Lasttreatdate != nil {
		m.Lasttreatdate = o.Lasttreatdate()
	}
	if o.Lasttreatproduct != nil {
		m.Lasttreatproduct = o.Lasttreatproduct()
	}
	if o.Lasttreatqty != nil {
		m.Lasttreatqty = o.Lasttreatqty()
	}
	if o.Lasttreatqtyunit != nil {
		m.Lasttreatqtyunit = o.Lasttreatqtyunit()
	}
	if o.LengthFT != nil {
		m.LengthFT = o.LengthFT()
	}
	if o.LengthMeters != nil {
		m.LengthMeters = o.LengthMeters()
	}
	if o.Locationnumber != nil {
		m.Locationnumber = o.Locationnumber()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Nextactiondatescheduled != nil {
		m.Nextactiondatescheduled = o.Nextactiondatescheduled()
	}
	if o.Objectid != nil {
		m.Objectid = o.Objectid()
	}
	if o.Priority != nil {
		m.Priority = o.Priority()
	}
	if o.Symbology != nil {
		m.Symbology = o.Symbology()
	}
	if o.ShapeLength != nil {
		m.ShapeLength = o.ShapeLength()
	}
	if o.Usetype != nil {
		m.Usetype = o.Usetype()
	}
	if o.Waterorigin != nil {
		m.Waterorigin = o.Waterorigin()
	}
	if o.WidthFT != nil {
		m.WidthFT = o.WidthFT()
	}
	if o.WidthMeters != nil {
		m.WidthMeters = o.WidthMeters()
	}
	if o.Zone != nil {
		m.Zone = o.Zone()
	}
	if o.Zone2 != nil {
		m.Zone2 = o.Zone2()
	}
	if o.CreatedDate != nil {
		m.CreatedDate = o.CreatedDate()
	}
	if o.CreatedUser != nil {
		m.CreatedUser = o.CreatedUser()
	}
	if o.GeometryX != nil {
		m.GeometryX = o.GeometryX()
	}
	if o.GeometryY != nil {
		m.GeometryY = o.GeometryY()
	}
	if o.LastEditedDate != nil {
		m.LastEditedDate = o.LastEditedDate()
	}
	if o.LastEditedUser != nil {
		m.LastEditedUser = o.LastEditedUser()
	}
	if o.Updated != nil {
		m.Updated = o.Updated()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.FSLinelocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSLinelocationTemplate.CreateMany
func (o FSLinelocationTemplate) BuildMany(number int) models.FSLinelocationSlice {
	m := make(models.FSLinelocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableFSLinelocation(m *models.FSLinelocationSetter) {
	if !(m.Objectid.IsValue()) {
		val := random_int32(nil)
		m.Objectid = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.FSLinelocation
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *FSLinelocationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.FSLinelocation) error {
	var err error

	return err
}

// Create builds a fsLinelocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *FSLinelocationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.FSLinelocation, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableFSLinelocation(opt)

	m, err := models.FSLinelocations.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a fsLinelocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *FSLinelocationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.FSLinelocation {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a fsLinelocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *FSLinelocationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.FSLinelocation {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple fsLinelocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o FSLinelocationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.FSLinelocationSlice, error) {
	var err error
	m := make(models.FSLinelocationSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple fsLinelocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o FSLinelocationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.FSLinelocationSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple fsLinelocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o FSLinelocationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.FSLinelocationSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// FSLinelocation has methods that act as mods for the FSLinelocationTemplate
var FSLinelocationMods fsLinelocationMods

type fsLinelocationMods struct{}

func (m fsLinelocationMods) RandomizeAllColumns(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModSlice{
		FSLinelocationMods.RandomAccessdesc(f),
		FSLinelocationMods.RandomAcres(f),
		FSLinelocationMods.RandomActive(f),
		FSLinelocationMods.RandomComments(f),
		FSLinelocationMods.RandomCreationdate(f),
		FSLinelocationMods.RandomCreator(f),
		FSLinelocationMods.RandomDescription(f),
		FSLinelocationMods.RandomExternalid(f),
		FSLinelocationMods.RandomEditdate(f),
		FSLinelocationMods.RandomEditor(f),
		FSLinelocationMods.RandomGlobalid(f),
		FSLinelocationMods.RandomHabitat(f),
		FSLinelocationMods.RandomHectares(f),
		FSLinelocationMods.RandomJurisdiction(f),
		FSLinelocationMods.RandomLarvinspectinterval(f),
		FSLinelocationMods.RandomLastinspectactiontaken(f),
		FSLinelocationMods.RandomLastinspectactivity(f),
		FSLinelocationMods.RandomLastinspectavglarvae(f),
		FSLinelocationMods.RandomLastinspectavgpupae(f),
		FSLinelocationMods.RandomLastinspectbreeding(f),
		FSLinelocationMods.RandomLastinspectconditions(f),
		FSLinelocationMods.RandomLastinspectdate(f),
		FSLinelocationMods.RandomLastinspectfieldspecies(f),
		FSLinelocationMods.RandomLastinspectlstages(f),
		FSLinelocationMods.RandomLasttreatactivity(f),
		FSLinelocationMods.RandomLasttreatdate(f),
		FSLinelocationMods.RandomLasttreatproduct(f),
		FSLinelocationMods.RandomLasttreatqty(f),
		FSLinelocationMods.RandomLasttreatqtyunit(f),
		FSLinelocationMods.RandomLengthFT(f),
		FSLinelocationMods.RandomLengthMeters(f),
		FSLinelocationMods.RandomLocationnumber(f),
		FSLinelocationMods.RandomName(f),
		FSLinelocationMods.RandomNextactiondatescheduled(f),
		FSLinelocationMods.RandomObjectid(f),
		FSLinelocationMods.RandomPriority(f),
		FSLinelocationMods.RandomSymbology(f),
		FSLinelocationMods.RandomShapeLength(f),
		FSLinelocationMods.RandomUsetype(f),
		FSLinelocationMods.RandomWaterorigin(f),
		FSLinelocationMods.RandomWidthFT(f),
		FSLinelocationMods.RandomWidthMeters(f),
		FSLinelocationMods.RandomZone(f),
		FSLinelocationMods.RandomZone2(f),
		FSLinelocationMods.RandomCreatedDate(f),
		FSLinelocationMods.RandomCreatedUser(f),
		FSLinelocationMods.RandomGeometryX(f),
		FSLinelocationMods.RandomGeometryY(f),
		FSLinelocationMods.RandomLastEditedDate(f),
		FSLinelocationMods.RandomLastEditedUser(f),
		FSLinelocationMods.RandomUpdated(f),
	}
}

// Set the model columns to this value
func (m fsLinelocationMods) Accessdesc(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Accessdesc = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) AccessdescFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Accessdesc = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetAccessdesc() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Accessdesc = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomAccessdesc(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomAccessdescNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Acres(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Acres = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) AcresFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Acres = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetAcres() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Acres = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomAcres(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomAcresNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Active(val null.Val[int16]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Active = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) ActiveFunc(f func() null.Val[int16]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetActive() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomActive(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomActiveNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Comments(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Comments = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) CommentsFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Comments = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetComments() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Comments = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomComments(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomCommentsNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Creationdate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creationdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) CreationdateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creationdate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetCreationdate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creationdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomCreationdate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomCreationdateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Creator(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creator = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) CreatorFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetCreator() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomCreator(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomCreatorNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Description(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) DescriptionFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetDescription() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomDescription(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomDescriptionNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Externalid(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Externalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) ExternalidFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Externalid = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetExternalid() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Externalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomExternalid(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomExternalidNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Editdate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) EditdateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editdate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetEditdate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomEditdate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomEditdateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Editor(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editor = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) EditorFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editor = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetEditor() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editor = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomEditor(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomEditorNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Globalid(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Globalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) GlobalidFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Globalid = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetGlobalid() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Globalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomGlobalid(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomGlobalidNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Habitat(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Habitat = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) HabitatFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Habitat = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetHabitat() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Habitat = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomHabitat(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomHabitatNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Hectares(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Hectares = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) HectaresFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Hectares = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetHectares() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Hectares = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomHectares(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomHectaresNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Jurisdiction(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Jurisdiction = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) JurisdictionFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Jurisdiction = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetJurisdiction() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Jurisdiction = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomJurisdiction(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomJurisdictionNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Larvinspectinterval(val null.Val[int16]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LarvinspectintervalFunc(f func() null.Val[int16]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Larvinspectinterval = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLarvinspectinterval() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Larvinspectinterval = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLarvinspectinterval(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLarvinspectintervalNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectactiontaken(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectactiontakenFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactiontaken = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectactiontaken() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactiontaken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectactiontaken(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectactiontakenNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectactivity(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectactivityFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactivity = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectactivity() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectactivity(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectactivityNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectavglarvae(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectavglarvaeFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavglarvae = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectavglarvae() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavglarvae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectavglarvae(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectavglarvaeNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectavgpupae(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectavgpupaeFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavgpupae = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectavgpupae() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavgpupae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectavgpupae(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectavgpupaeNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectbreeding(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectbreedingFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectbreeding = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectbreeding() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectbreeding = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectbreeding(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectbreedingNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectconditions(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectconditionsFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectconditions = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectconditions() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectconditions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectconditions(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectconditionsNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectdate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectdateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectdate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectdate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectdate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectdateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectfieldspecies(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectfieldspeciesFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectfieldspecies = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectfieldspecies() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectfieldspecies = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectfieldspecies(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectfieldspeciesNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lastinspectlstages(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastinspectlstagesFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectlstages = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastinspectlstages() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectlstages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastinspectlstages(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastinspectlstagesNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lasttreatactivity(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LasttreatactivityFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatactivity = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLasttreatactivity() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLasttreatactivity(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLasttreatactivityNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lasttreatdate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LasttreatdateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatdate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLasttreatdate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLasttreatdate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLasttreatdateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lasttreatproduct(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LasttreatproductFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatproduct = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLasttreatproduct() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatproduct = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLasttreatproduct(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLasttreatproductNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lasttreatqty(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LasttreatqtyFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqty = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLasttreatqty() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqty = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLasttreatqty(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLasttreatqtyNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Lasttreatqtyunit(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LasttreatqtyunitFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqtyunit = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLasttreatqtyunit() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqtyunit = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLasttreatqtyunit(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLasttreatqtyunitNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) LengthFT(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthFT = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LengthFTFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthFT = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLengthFT() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthFT = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLengthFT(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthFT = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLengthFTNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthFT = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) LengthMeters(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthMeters = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LengthMetersFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthMeters = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLengthMeters() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthMeters = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLengthMeters(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthMeters = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLengthMetersNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LengthMeters = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Locationnumber(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Locationnumber = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LocationnumberFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Locationnumber = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLocationnumber() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Locationnumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLocationnumber(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLocationnumberNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Name(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) NameFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetName() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomName(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomNameNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Nextactiondatescheduled(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) NextactiondatescheduledFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Nextactiondatescheduled = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetNextactiondatescheduled() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Nextactiondatescheduled = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomNextactiondatescheduled(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomNextactiondatescheduledNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Objectid(val int32) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Objectid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) ObjectidFunc(f func() int32) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Objectid = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetObjectid() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Objectid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsLinelocationMods) RandomObjectid(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Objectid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Priority(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Priority = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) PriorityFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Priority = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetPriority() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Priority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomPriority(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomPriorityNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Symbology(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Symbology = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) SymbologyFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Symbology = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetSymbology() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Symbology = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomSymbology(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomSymbologyNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) ShapeLength(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.ShapeLength = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) ShapeLengthFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.ShapeLength = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetShapeLength() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.ShapeLength = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomShapeLength(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomShapeLengthNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Usetype(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Usetype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) UsetypeFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Usetype = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetUsetype() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Usetype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomUsetype(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomUsetypeNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Waterorigin(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Waterorigin = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) WateroriginFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Waterorigin = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetWaterorigin() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Waterorigin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomWaterorigin(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomWateroriginNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) WidthFT(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthFT = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) WidthFTFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthFT = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetWidthFT() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthFT = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomWidthFT(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthFT = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomWidthFTNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthFT = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) WidthMeters(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthMeters = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) WidthMetersFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthMeters = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetWidthMeters() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthMeters = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomWidthMeters(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthMeters = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomWidthMetersNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.WidthMeters = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Zone(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) ZoneFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetZone() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomZone(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomZoneNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Zone2(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone2 = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) Zone2Func(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone2 = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetZone2() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomZone2(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomZone2NotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) CreatedDate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedDate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) CreatedDateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedDate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetCreatedDate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomCreatedDate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomCreatedDateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) CreatedUser(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedUser = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) CreatedUserFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedUser = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetCreatedUser() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedUser = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomCreatedUser(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomCreatedUserNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.CreatedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) GeometryX(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryX = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) GeometryXFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryX = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetGeometryX() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryX = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomGeometryX(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomGeometryXNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) GeometryY(val null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryY = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) GeometryYFunc(f func() null.Val[float64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryY = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetGeometryY() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryY = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomGeometryY(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomGeometryYNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) LastEditedDate(val null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedDate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastEditedDateFunc(f func() null.Val[int64]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedDate = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastEditedDate() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastEditedDate(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastEditedDateNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) LastEditedUser(val null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedUser = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) LastEditedUserFunc(f func() null.Val[string]) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedUser = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetLastEditedUser() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedUser = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsLinelocationMods) RandomLastEditedUser(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsLinelocationMods) RandomLastEditedUserNotNull(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.LastEditedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsLinelocationMods) Updated(val time.Time) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Updated = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m fsLinelocationMods) UpdatedFunc(f func() time.Time) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Updated = f
	})
}

// Clear any values for the column
func (m fsLinelocationMods) UnsetUpdated() FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Updated = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsLinelocationMods) RandomUpdated(f *faker.Faker) FSLinelocationMod {
	return FSLinelocationModFunc(func(_ context.Context, o *FSLinelocationTemplate) {
		o.Updated = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m fsLinelocationMods) WithParentsCascading() FSLinelocationMod {
	return FSLinelocationModFunc(func(ctx context.Context, o *FSLinelocationTemplate) {
		if isDone, _ := fsLinelocationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = fsLinelocationWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
