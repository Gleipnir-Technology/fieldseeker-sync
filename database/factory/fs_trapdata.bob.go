// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type FSTrapdatumMod interface {
	Apply(context.Context, *FSTrapdatumTemplate)
}

type FSTrapdatumModFunc func(context.Context, *FSTrapdatumTemplate)

func (f FSTrapdatumModFunc) Apply(ctx context.Context, n *FSTrapdatumTemplate) {
	f(ctx, n)
}

type FSTrapdatumModSlice []FSTrapdatumMod

func (mods FSTrapdatumModSlice) Apply(ctx context.Context, n *FSTrapdatumTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// FSTrapdatumTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type FSTrapdatumTemplate struct {
	Avetemp                  func() null.Val[float64]
	Comments                 func() null.Val[string]
	Creationdate             func() null.Val[int64]
	Creator                  func() null.Val[string]
	Enddatetime              func() null.Val[int64]
	Editdate                 func() null.Val[int64]
	Editor                   func() null.Val[string]
	Fieldtech                func() null.Val[string]
	Field                    func() null.Val[int64]
	Gatewaysync              func() null.Val[int16]
	Globalid                 func() null.Val[string]
	Idbytech                 func() null.Val[string]
	Locationname             func() null.Val[string]
	LocID                    func() null.Val[string]
	LR                       func() null.Val[int16]
	Objectid                 func() int32
	Processed                func() null.Val[int16]
	Raingauge                func() null.Val[float64]
	Recordstatus             func() null.Val[int16]
	Reviewed                 func() null.Val[int16]
	Reviewedby               func() null.Val[string]
	Revieweddate             func() null.Val[int64]
	Sitecond                 func() null.Val[string]
	Sortbytech               func() null.Val[string]
	Srid                     func() null.Val[string]
	Startdatetime            func() null.Val[int64]
	Trapactivitytype         func() null.Val[string]
	Trapcondition            func() null.Val[string]
	Trapnights               func() null.Val[int16]
	Traptype                 func() null.Val[string]
	Voltage                  func() null.Val[float64]
	Winddir                  func() null.Val[string]
	Windspeed                func() null.Val[float64]
	Zone                     func() null.Val[string]
	Zone2                    func() null.Val[string]
	CreatedDate              func() null.Val[int64]
	CreatedUser              func() null.Val[string]
	GeometryX                func() null.Val[float64]
	GeometryY                func() null.Val[float64]
	LastEditedDate           func() null.Val[int64]
	LastEditedUser           func() null.Val[string]
	Lure                     func() null.Val[string]
	Vectorsurvtrapdataid     func() null.Val[string]
	Vectorsurvtraplocationid func() null.Val[string]
	Updated                  func() time.Time

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the FSTrapdatumTemplate
func (o *FSTrapdatumTemplate) Apply(ctx context.Context, mods ...FSTrapdatumMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.FSTrapdatum
// according to the relationships in the template. Nothing is inserted into the db
func (t FSTrapdatumTemplate) setModelRels(o *models.FSTrapdatum) {}

// BuildSetter returns an *models.FSTrapdatumSetter
// this does nothing with the relationship templates
func (o FSTrapdatumTemplate) BuildSetter() *models.FSTrapdatumSetter {
	m := &models.FSTrapdatumSetter{}

	if o.Avetemp != nil {
		val := o.Avetemp()
		m.Avetemp = omitnull.FromNull(val)
	}
	if o.Comments != nil {
		val := o.Comments()
		m.Comments = omitnull.FromNull(val)
	}
	if o.Creationdate != nil {
		val := o.Creationdate()
		m.Creationdate = omitnull.FromNull(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omitnull.FromNull(val)
	}
	if o.Enddatetime != nil {
		val := o.Enddatetime()
		m.Enddatetime = omitnull.FromNull(val)
	}
	if o.Editdate != nil {
		val := o.Editdate()
		m.Editdate = omitnull.FromNull(val)
	}
	if o.Editor != nil {
		val := o.Editor()
		m.Editor = omitnull.FromNull(val)
	}
	if o.Fieldtech != nil {
		val := o.Fieldtech()
		m.Fieldtech = omitnull.FromNull(val)
	}
	if o.Field != nil {
		val := o.Field()
		m.Field = omitnull.FromNull(val)
	}
	if o.Gatewaysync != nil {
		val := o.Gatewaysync()
		m.Gatewaysync = omitnull.FromNull(val)
	}
	if o.Globalid != nil {
		val := o.Globalid()
		m.Globalid = omitnull.FromNull(val)
	}
	if o.Idbytech != nil {
		val := o.Idbytech()
		m.Idbytech = omitnull.FromNull(val)
	}
	if o.Locationname != nil {
		val := o.Locationname()
		m.Locationname = omitnull.FromNull(val)
	}
	if o.LocID != nil {
		val := o.LocID()
		m.LocID = omitnull.FromNull(val)
	}
	if o.LR != nil {
		val := o.LR()
		m.LR = omitnull.FromNull(val)
	}
	if o.Objectid != nil {
		val := o.Objectid()
		m.Objectid = omit.From(val)
	}
	if o.Processed != nil {
		val := o.Processed()
		m.Processed = omitnull.FromNull(val)
	}
	if o.Raingauge != nil {
		val := o.Raingauge()
		m.Raingauge = omitnull.FromNull(val)
	}
	if o.Recordstatus != nil {
		val := o.Recordstatus()
		m.Recordstatus = omitnull.FromNull(val)
	}
	if o.Reviewed != nil {
		val := o.Reviewed()
		m.Reviewed = omitnull.FromNull(val)
	}
	if o.Reviewedby != nil {
		val := o.Reviewedby()
		m.Reviewedby = omitnull.FromNull(val)
	}
	if o.Revieweddate != nil {
		val := o.Revieweddate()
		m.Revieweddate = omitnull.FromNull(val)
	}
	if o.Sitecond != nil {
		val := o.Sitecond()
		m.Sitecond = omitnull.FromNull(val)
	}
	if o.Sortbytech != nil {
		val := o.Sortbytech()
		m.Sortbytech = omitnull.FromNull(val)
	}
	if o.Srid != nil {
		val := o.Srid()
		m.Srid = omitnull.FromNull(val)
	}
	if o.Startdatetime != nil {
		val := o.Startdatetime()
		m.Startdatetime = omitnull.FromNull(val)
	}
	if o.Trapactivitytype != nil {
		val := o.Trapactivitytype()
		m.Trapactivitytype = omitnull.FromNull(val)
	}
	if o.Trapcondition != nil {
		val := o.Trapcondition()
		m.Trapcondition = omitnull.FromNull(val)
	}
	if o.Trapnights != nil {
		val := o.Trapnights()
		m.Trapnights = omitnull.FromNull(val)
	}
	if o.Traptype != nil {
		val := o.Traptype()
		m.Traptype = omitnull.FromNull(val)
	}
	if o.Voltage != nil {
		val := o.Voltage()
		m.Voltage = omitnull.FromNull(val)
	}
	if o.Winddir != nil {
		val := o.Winddir()
		m.Winddir = omitnull.FromNull(val)
	}
	if o.Windspeed != nil {
		val := o.Windspeed()
		m.Windspeed = omitnull.FromNull(val)
	}
	if o.Zone != nil {
		val := o.Zone()
		m.Zone = omitnull.FromNull(val)
	}
	if o.Zone2 != nil {
		val := o.Zone2()
		m.Zone2 = omitnull.FromNull(val)
	}
	if o.CreatedDate != nil {
		val := o.CreatedDate()
		m.CreatedDate = omitnull.FromNull(val)
	}
	if o.CreatedUser != nil {
		val := o.CreatedUser()
		m.CreatedUser = omitnull.FromNull(val)
	}
	if o.GeometryX != nil {
		val := o.GeometryX()
		m.GeometryX = omitnull.FromNull(val)
	}
	if o.GeometryY != nil {
		val := o.GeometryY()
		m.GeometryY = omitnull.FromNull(val)
	}
	if o.LastEditedDate != nil {
		val := o.LastEditedDate()
		m.LastEditedDate = omitnull.FromNull(val)
	}
	if o.LastEditedUser != nil {
		val := o.LastEditedUser()
		m.LastEditedUser = omitnull.FromNull(val)
	}
	if o.Lure != nil {
		val := o.Lure()
		m.Lure = omitnull.FromNull(val)
	}
	if o.Vectorsurvtrapdataid != nil {
		val := o.Vectorsurvtrapdataid()
		m.Vectorsurvtrapdataid = omitnull.FromNull(val)
	}
	if o.Vectorsurvtraplocationid != nil {
		val := o.Vectorsurvtraplocationid()
		m.Vectorsurvtraplocationid = omitnull.FromNull(val)
	}
	if o.Updated != nil {
		val := o.Updated()
		m.Updated = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.FSTrapdatumSetter
// this does nothing with the relationship templates
func (o FSTrapdatumTemplate) BuildManySetter(number int) []*models.FSTrapdatumSetter {
	m := make([]*models.FSTrapdatumSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.FSTrapdatum
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSTrapdatumTemplate.Create
func (o FSTrapdatumTemplate) Build() *models.FSTrapdatum {
	m := &models.FSTrapdatum{}

	if o.Avetemp != nil {
		m.Avetemp = o.Avetemp()
	}
	if o.Comments != nil {
		m.Comments = o.Comments()
	}
	if o.Creationdate != nil {
		m.Creationdate = o.Creationdate()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}
	if o.Enddatetime != nil {
		m.Enddatetime = o.Enddatetime()
	}
	if o.Editdate != nil {
		m.Editdate = o.Editdate()
	}
	if o.Editor != nil {
		m.Editor = o.Editor()
	}
	if o.Fieldtech != nil {
		m.Fieldtech = o.Fieldtech()
	}
	if o.Field != nil {
		m.Field = o.Field()
	}
	if o.Gatewaysync != nil {
		m.Gatewaysync = o.Gatewaysync()
	}
	if o.Globalid != nil {
		m.Globalid = o.Globalid()
	}
	if o.Idbytech != nil {
		m.Idbytech = o.Idbytech()
	}
	if o.Locationname != nil {
		m.Locationname = o.Locationname()
	}
	if o.LocID != nil {
		m.LocID = o.LocID()
	}
	if o.LR != nil {
		m.LR = o.LR()
	}
	if o.Objectid != nil {
		m.Objectid = o.Objectid()
	}
	if o.Processed != nil {
		m.Processed = o.Processed()
	}
	if o.Raingauge != nil {
		m.Raingauge = o.Raingauge()
	}
	if o.Recordstatus != nil {
		m.Recordstatus = o.Recordstatus()
	}
	if o.Reviewed != nil {
		m.Reviewed = o.Reviewed()
	}
	if o.Reviewedby != nil {
		m.Reviewedby = o.Reviewedby()
	}
	if o.Revieweddate != nil {
		m.Revieweddate = o.Revieweddate()
	}
	if o.Sitecond != nil {
		m.Sitecond = o.Sitecond()
	}
	if o.Sortbytech != nil {
		m.Sortbytech = o.Sortbytech()
	}
	if o.Srid != nil {
		m.Srid = o.Srid()
	}
	if o.Startdatetime != nil {
		m.Startdatetime = o.Startdatetime()
	}
	if o.Trapactivitytype != nil {
		m.Trapactivitytype = o.Trapactivitytype()
	}
	if o.Trapcondition != nil {
		m.Trapcondition = o.Trapcondition()
	}
	if o.Trapnights != nil {
		m.Trapnights = o.Trapnights()
	}
	if o.Traptype != nil {
		m.Traptype = o.Traptype()
	}
	if o.Voltage != nil {
		m.Voltage = o.Voltage()
	}
	if o.Winddir != nil {
		m.Winddir = o.Winddir()
	}
	if o.Windspeed != nil {
		m.Windspeed = o.Windspeed()
	}
	if o.Zone != nil {
		m.Zone = o.Zone()
	}
	if o.Zone2 != nil {
		m.Zone2 = o.Zone2()
	}
	if o.CreatedDate != nil {
		m.CreatedDate = o.CreatedDate()
	}
	if o.CreatedUser != nil {
		m.CreatedUser = o.CreatedUser()
	}
	if o.GeometryX != nil {
		m.GeometryX = o.GeometryX()
	}
	if o.GeometryY != nil {
		m.GeometryY = o.GeometryY()
	}
	if o.LastEditedDate != nil {
		m.LastEditedDate = o.LastEditedDate()
	}
	if o.LastEditedUser != nil {
		m.LastEditedUser = o.LastEditedUser()
	}
	if o.Lure != nil {
		m.Lure = o.Lure()
	}
	if o.Vectorsurvtrapdataid != nil {
		m.Vectorsurvtrapdataid = o.Vectorsurvtrapdataid()
	}
	if o.Vectorsurvtraplocationid != nil {
		m.Vectorsurvtraplocationid = o.Vectorsurvtraplocationid()
	}
	if o.Updated != nil {
		m.Updated = o.Updated()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.FSTrapdatumSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSTrapdatumTemplate.CreateMany
func (o FSTrapdatumTemplate) BuildMany(number int) models.FSTrapdatumSlice {
	m := make(models.FSTrapdatumSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableFSTrapdatum(m *models.FSTrapdatumSetter) {
	if !(m.Objectid.IsValue()) {
		val := random_int32(nil)
		m.Objectid = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.FSTrapdatum
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *FSTrapdatumTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.FSTrapdatum) error {
	var err error

	return err
}

// Create builds a fsTrapdatum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *FSTrapdatumTemplate) Create(ctx context.Context, exec bob.Executor) (*models.FSTrapdatum, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableFSTrapdatum(opt)

	m, err := models.FSTrapdata.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a fsTrapdatum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *FSTrapdatumTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.FSTrapdatum {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a fsTrapdatum and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *FSTrapdatumTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.FSTrapdatum {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple fsTrapdata and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o FSTrapdatumTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.FSTrapdatumSlice, error) {
	var err error
	m := make(models.FSTrapdatumSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple fsTrapdata and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o FSTrapdatumTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.FSTrapdatumSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple fsTrapdata and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o FSTrapdatumTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.FSTrapdatumSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// FSTrapdatum has methods that act as mods for the FSTrapdatumTemplate
var FSTrapdatumMods fsTrapdatumMods

type fsTrapdatumMods struct{}

func (m fsTrapdatumMods) RandomizeAllColumns(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModSlice{
		FSTrapdatumMods.RandomAvetemp(f),
		FSTrapdatumMods.RandomComments(f),
		FSTrapdatumMods.RandomCreationdate(f),
		FSTrapdatumMods.RandomCreator(f),
		FSTrapdatumMods.RandomEnddatetime(f),
		FSTrapdatumMods.RandomEditdate(f),
		FSTrapdatumMods.RandomEditor(f),
		FSTrapdatumMods.RandomFieldtech(f),
		FSTrapdatumMods.RandomField(f),
		FSTrapdatumMods.RandomGatewaysync(f),
		FSTrapdatumMods.RandomGlobalid(f),
		FSTrapdatumMods.RandomIdbytech(f),
		FSTrapdatumMods.RandomLocationname(f),
		FSTrapdatumMods.RandomLocID(f),
		FSTrapdatumMods.RandomLR(f),
		FSTrapdatumMods.RandomObjectid(f),
		FSTrapdatumMods.RandomProcessed(f),
		FSTrapdatumMods.RandomRaingauge(f),
		FSTrapdatumMods.RandomRecordstatus(f),
		FSTrapdatumMods.RandomReviewed(f),
		FSTrapdatumMods.RandomReviewedby(f),
		FSTrapdatumMods.RandomRevieweddate(f),
		FSTrapdatumMods.RandomSitecond(f),
		FSTrapdatumMods.RandomSortbytech(f),
		FSTrapdatumMods.RandomSrid(f),
		FSTrapdatumMods.RandomStartdatetime(f),
		FSTrapdatumMods.RandomTrapactivitytype(f),
		FSTrapdatumMods.RandomTrapcondition(f),
		FSTrapdatumMods.RandomTrapnights(f),
		FSTrapdatumMods.RandomTraptype(f),
		FSTrapdatumMods.RandomVoltage(f),
		FSTrapdatumMods.RandomWinddir(f),
		FSTrapdatumMods.RandomWindspeed(f),
		FSTrapdatumMods.RandomZone(f),
		FSTrapdatumMods.RandomZone2(f),
		FSTrapdatumMods.RandomCreatedDate(f),
		FSTrapdatumMods.RandomCreatedUser(f),
		FSTrapdatumMods.RandomGeometryX(f),
		FSTrapdatumMods.RandomGeometryY(f),
		FSTrapdatumMods.RandomLastEditedDate(f),
		FSTrapdatumMods.RandomLastEditedUser(f),
		FSTrapdatumMods.RandomLure(f),
		FSTrapdatumMods.RandomVectorsurvtrapdataid(f),
		FSTrapdatumMods.RandomVectorsurvtraplocationid(f),
		FSTrapdatumMods.RandomUpdated(f),
	}
}

// Set the model columns to this value
func (m fsTrapdatumMods) Avetemp(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Avetemp = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) AvetempFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Avetemp = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetAvetemp() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Avetemp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomAvetemp(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Avetemp = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomAvetempNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Avetemp = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Comments(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Comments = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) CommentsFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Comments = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetComments() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Comments = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomComments(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomCommentsNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Creationdate(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creationdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) CreationdateFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creationdate = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetCreationdate() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creationdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomCreationdate(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomCreationdateNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Creator(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creator = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) CreatorFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetCreator() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomCreator(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomCreatorNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Enddatetime(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Enddatetime = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) EnddatetimeFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Enddatetime = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetEnddatetime() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Enddatetime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomEnddatetime(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Enddatetime = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomEnddatetimeNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Enddatetime = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Editdate(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) EditdateFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editdate = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetEditdate() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomEditdate(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomEditdateNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Editor(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editor = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) EditorFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editor = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetEditor() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editor = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomEditor(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomEditorNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Fieldtech(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Fieldtech = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) FieldtechFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Fieldtech = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetFieldtech() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Fieldtech = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomFieldtech(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Fieldtech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomFieldtechNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Fieldtech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Field(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Field = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) FieldFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Field = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetField() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Field = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomField(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Field = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomFieldNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Field = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Gatewaysync(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Gatewaysync = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) GatewaysyncFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Gatewaysync = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetGatewaysync() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Gatewaysync = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomGatewaysync(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Gatewaysync = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomGatewaysyncNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Gatewaysync = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Globalid(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Globalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) GlobalidFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Globalid = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetGlobalid() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Globalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomGlobalid(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomGlobalidNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Idbytech(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Idbytech = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) IdbytechFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Idbytech = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetIdbytech() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Idbytech = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomIdbytech(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Idbytech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomIdbytechNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Idbytech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Locationname(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Locationname = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LocationnameFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Locationname = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLocationname() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Locationname = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLocationname(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Locationname = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLocationnameNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Locationname = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) LocID(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LocID = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LocIDFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LocID = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLocID() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LocID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLocID(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LocID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLocIDNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LocID = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) LR(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LR = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LRFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LR = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLR() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LR = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLR(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LR = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLRNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LR = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Objectid(val int32) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Objectid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) ObjectidFunc(f func() int32) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Objectid = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetObjectid() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Objectid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsTrapdatumMods) RandomObjectid(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Objectid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Processed(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Processed = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) ProcessedFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Processed = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetProcessed() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Processed = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomProcessed(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Processed = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomProcessedNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Processed = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Raingauge(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Raingauge = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) RaingaugeFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Raingauge = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetRaingauge() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Raingauge = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomRaingauge(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Raingauge = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomRaingaugeNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Raingauge = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Recordstatus(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Recordstatus = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) RecordstatusFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Recordstatus = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetRecordstatus() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Recordstatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomRecordstatus(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Recordstatus = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomRecordstatusNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Recordstatus = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Reviewed(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewed = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) ReviewedFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewed = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetReviewed() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewed = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomReviewed(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewed = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomReviewedNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewed = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Reviewedby(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewedby = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) ReviewedbyFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewedby = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetReviewedby() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewedby = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomReviewedby(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewedby = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomReviewedbyNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Reviewedby = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Revieweddate(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Revieweddate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) RevieweddateFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Revieweddate = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetRevieweddate() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Revieweddate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomRevieweddate(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Revieweddate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomRevieweddateNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Revieweddate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Sitecond(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sitecond = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) SitecondFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sitecond = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetSitecond() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sitecond = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomSitecond(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sitecond = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomSitecondNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sitecond = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Sortbytech(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sortbytech = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) SortbytechFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sortbytech = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetSortbytech() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sortbytech = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomSortbytech(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sortbytech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomSortbytechNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Sortbytech = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Srid(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Srid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) SridFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Srid = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetSrid() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Srid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomSrid(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Srid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomSridNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Srid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Startdatetime(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Startdatetime = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) StartdatetimeFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Startdatetime = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetStartdatetime() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Startdatetime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomStartdatetime(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Startdatetime = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomStartdatetimeNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Startdatetime = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Trapactivitytype(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapactivitytype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) TrapactivitytypeFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapactivitytype = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetTrapactivitytype() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapactivitytype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomTrapactivitytype(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapactivitytype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomTrapactivitytypeNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapactivitytype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Trapcondition(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapcondition = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) TrapconditionFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapcondition = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetTrapcondition() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapcondition = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomTrapcondition(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapcondition = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomTrapconditionNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapcondition = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Trapnights(val null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapnights = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) TrapnightsFunc(f func() null.Val[int16]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapnights = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetTrapnights() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapnights = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomTrapnights(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapnights = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomTrapnightsNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Trapnights = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Traptype(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Traptype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) TraptypeFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Traptype = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetTraptype() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Traptype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomTraptype(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Traptype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomTraptypeNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Traptype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Voltage(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Voltage = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) VoltageFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Voltage = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetVoltage() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Voltage = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomVoltage(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Voltage = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomVoltageNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Voltage = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Winddir(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Winddir = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) WinddirFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Winddir = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetWinddir() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Winddir = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomWinddir(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Winddir = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomWinddirNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Winddir = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Windspeed(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Windspeed = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) WindspeedFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Windspeed = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetWindspeed() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Windspeed = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomWindspeed(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Windspeed = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomWindspeedNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Windspeed = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Zone(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) ZoneFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetZone() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomZone(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomZoneNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Zone2(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone2 = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) Zone2Func(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone2 = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetZone2() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomZone2(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomZone2NotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) CreatedDate(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedDate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) CreatedDateFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedDate = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetCreatedDate() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomCreatedDate(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomCreatedDateNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) CreatedUser(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedUser = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) CreatedUserFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedUser = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetCreatedUser() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedUser = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomCreatedUser(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomCreatedUserNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.CreatedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) GeometryX(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryX = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) GeometryXFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryX = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetGeometryX() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryX = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomGeometryX(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomGeometryXNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) GeometryY(val null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryY = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) GeometryYFunc(f func() null.Val[float64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryY = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetGeometryY() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryY = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomGeometryY(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomGeometryYNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) LastEditedDate(val null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedDate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LastEditedDateFunc(f func() null.Val[int64]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedDate = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLastEditedDate() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLastEditedDate(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLastEditedDateNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedDate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) LastEditedUser(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedUser = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LastEditedUserFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedUser = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLastEditedUser() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedUser = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLastEditedUser(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLastEditedUserNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.LastEditedUser = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Lure(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Lure = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) LureFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Lure = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetLure() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Lure = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomLure(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Lure = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomLureNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Lure = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Vectorsurvtrapdataid(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtrapdataid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) VectorsurvtrapdataidFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtrapdataid = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetVectorsurvtrapdataid() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtrapdataid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomVectorsurvtrapdataid(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtrapdataid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomVectorsurvtrapdataidNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtrapdataid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Vectorsurvtraplocationid(val null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtraplocationid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) VectorsurvtraplocationidFunc(f func() null.Val[string]) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtraplocationid = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetVectorsurvtraplocationid() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtraplocationid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsTrapdatumMods) RandomVectorsurvtraplocationid(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtraplocationid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsTrapdatumMods) RandomVectorsurvtraplocationidNotNull(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Vectorsurvtraplocationid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsTrapdatumMods) Updated(val time.Time) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Updated = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m fsTrapdatumMods) UpdatedFunc(f func() time.Time) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Updated = f
	})
}

// Clear any values for the column
func (m fsTrapdatumMods) UnsetUpdated() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Updated = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsTrapdatumMods) RandomUpdated(f *faker.Faker) FSTrapdatumMod {
	return FSTrapdatumModFunc(func(_ context.Context, o *FSTrapdatumTemplate) {
		o.Updated = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m fsTrapdatumMods) WithParentsCascading() FSTrapdatumMod {
	return FSTrapdatumModFunc(func(ctx context.Context, o *FSTrapdatumTemplate) {
		if isDone, _ := fsTrapdatumWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = fsTrapdatumWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
