// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type NoteMod interface {
	Apply(context.Context, *NoteTemplate)
}

type NoteModFunc func(context.Context, *NoteTemplate)

func (f NoteModFunc) Apply(ctx context.Context, n *NoteTemplate) {
	f(ctx, n)
}

type NoteModSlice []NoteMod

func (mods NoteModSlice) Apply(ctx context.Context, n *NoteTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// NoteTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type NoteTemplate struct {
	Created   func() null.Val[time.Time]
	Deleted   func() null.Val[time.Time]
	Latitude  func() null.Val[float64]
	Longitude func() null.Val[float64]
	Text      func() string
	Updated   func() null.Val[time.Time]
	UUID      func() string

	r noteR
	f *Factory

	alreadyPersisted bool
}

type noteR struct {
	HistoryNoteAudioRecordings []*noteRHistoryNoteAudioRecordingsR
	NoteAudioRecordings        []*noteRNoteAudioRecordingsR
}

type noteRHistoryNoteAudioRecordingsR struct {
	number int
	o      *HistoryNoteAudioRecordingTemplate
}
type noteRNoteAudioRecordingsR struct {
	number int
	o      *NoteAudioRecordingTemplate
}

// Apply mods to the NoteTemplate
func (o *NoteTemplate) Apply(ctx context.Context, mods ...NoteMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Note
// according to the relationships in the template. Nothing is inserted into the db
func (t NoteTemplate) setModelRels(o *models.Note) {
	if t.r.HistoryNoteAudioRecordings != nil {
		rel := models.HistoryNoteAudioRecordingSlice{}
		for _, r := range t.r.HistoryNoteAudioRecordings {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.NoteUUID = null.From(o.UUID) // h2
				rel.R.Note = o
			}
			rel = append(rel, related...)
		}
		o.R.HistoryNoteAudioRecordings = rel
	}

	if t.r.NoteAudioRecordings != nil {
		rel := models.NoteAudioRecordingSlice{}
		for _, r := range t.r.NoteAudioRecordings {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.NoteUUID = null.From(o.UUID) // h2
				rel.R.Note = o
			}
			rel = append(rel, related...)
		}
		o.R.NoteAudioRecordings = rel
	}
}

// BuildSetter returns an *models.NoteSetter
// this does nothing with the relationship templates
func (o NoteTemplate) BuildSetter() *models.NoteSetter {
	m := &models.NoteSetter{}

	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.Deleted != nil {
		val := o.Deleted()
		m.Deleted = omitnull.FromNull(val)
	}
	if o.Latitude != nil {
		val := o.Latitude()
		m.Latitude = omitnull.FromNull(val)
	}
	if o.Longitude != nil {
		val := o.Longitude()
		m.Longitude = omitnull.FromNull(val)
	}
	if o.Text != nil {
		val := o.Text()
		m.Text = omit.From(val)
	}
	if o.Updated != nil {
		val := o.Updated()
		m.Updated = omitnull.FromNull(val)
	}
	if o.UUID != nil {
		val := o.UUID()
		m.UUID = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.NoteSetter
// this does nothing with the relationship templates
func (o NoteTemplate) BuildManySetter(number int) []*models.NoteSetter {
	m := make([]*models.NoteSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Note
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteTemplate.Create
func (o NoteTemplate) Build() *models.Note {
	m := &models.Note{}

	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.Deleted != nil {
		m.Deleted = o.Deleted()
	}
	if o.Latitude != nil {
		m.Latitude = o.Latitude()
	}
	if o.Longitude != nil {
		m.Longitude = o.Longitude()
	}
	if o.Text != nil {
		m.Text = o.Text()
	}
	if o.Updated != nil {
		m.Updated = o.Updated()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.NoteSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use NoteTemplate.CreateMany
func (o NoteTemplate) BuildMany(number int) models.NoteSlice {
	m := make(models.NoteSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableNote(m *models.NoteSetter) {
	if !(m.Text.IsValue()) {
		val := random_string(nil)
		m.Text = omit.From(val)
	}
	if !(m.UUID.IsValue()) {
		val := random_string(nil)
		m.UUID = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Note
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *NoteTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Note) error {
	var err error

	isHistoryNoteAudioRecordingsDone, _ := noteRelHistoryNoteAudioRecordingsCtx.Value(ctx)
	if !isHistoryNoteAudioRecordingsDone && o.r.HistoryNoteAudioRecordings != nil {
		ctx = noteRelHistoryNoteAudioRecordingsCtx.WithValue(ctx, true)
		for _, r := range o.r.HistoryNoteAudioRecordings {
			if r.o.alreadyPersisted {
				m.R.HistoryNoteAudioRecordings = append(m.R.HistoryNoteAudioRecordings, r.o.Build())
			} else {
				rel0, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachHistoryNoteAudioRecordings(ctx, exec, rel0...)
				if err != nil {
					return err
				}
			}
		}
	}

	isNoteAudioRecordingsDone, _ := noteRelNoteAudioRecordingsCtx.Value(ctx)
	if !isNoteAudioRecordingsDone && o.r.NoteAudioRecordings != nil {
		ctx = noteRelNoteAudioRecordingsCtx.WithValue(ctx, true)
		for _, r := range o.r.NoteAudioRecordings {
			if r.o.alreadyPersisted {
				m.R.NoteAudioRecordings = append(m.R.NoteAudioRecordings, r.o.Build())
			} else {
				rel1, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachNoteAudioRecordings(ctx, exec, rel1...)
				if err != nil {
					return err
				}
			}
		}
	}

	return err
}

// Create builds a note and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *NoteTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Note, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableNote(opt)

	m, err := models.Notes.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a note and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *NoteTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Note {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a note and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *NoteTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Note {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple notes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o NoteTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.NoteSlice, error) {
	var err error
	m := make(models.NoteSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple notes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o NoteTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.NoteSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple notes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o NoteTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.NoteSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// Note has methods that act as mods for the NoteTemplate
var NoteMods noteMods

type noteMods struct{}

func (m noteMods) RandomizeAllColumns(f *faker.Faker) NoteMod {
	return NoteModSlice{
		NoteMods.RandomCreated(f),
		NoteMods.RandomDeleted(f),
		NoteMods.RandomLatitude(f),
		NoteMods.RandomLongitude(f),
		NoteMods.RandomText(f),
		NoteMods.RandomUpdated(f),
		NoteMods.RandomUUID(f),
	}
}

// Set the model columns to this value
func (m noteMods) Created(val null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteMods) CreatedFunc(f func() null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetCreated() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteMods) RandomCreated(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteMods) RandomCreatedNotNull(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteMods) Deleted(val null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Deleted = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteMods) DeletedFunc(f func() null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Deleted = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetDeleted() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Deleted = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteMods) RandomDeleted(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteMods) RandomDeletedNotNull(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Deleted = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteMods) Latitude(val null.Val[float64]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Latitude = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m noteMods) LatitudeFunc(f func() null.Val[float64]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Latitude = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetLatitude() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Latitude = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteMods) RandomLatitude(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Latitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteMods) RandomLatitudeNotNull(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Latitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteMods) Longitude(val null.Val[float64]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Longitude = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m noteMods) LongitudeFunc(f func() null.Val[float64]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Longitude = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetLongitude() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Longitude = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteMods) RandomLongitude(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Longitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteMods) RandomLongitudeNotNull(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Longitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteMods) Text(val string) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Text = func() string { return val }
	})
}

// Set the Column from the function
func (m noteMods) TextFunc(f func() string) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Text = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetText() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Text = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteMods) RandomText(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Text = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m noteMods) Updated(val null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Updated = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m noteMods) UpdatedFunc(f func() null.Val[time.Time]) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Updated = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetUpdated() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Updated = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m noteMods) RandomUpdated(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Updated = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m noteMods) RandomUpdatedNotNull(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.Updated = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m noteMods) UUID(val string) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.UUID = func() string { return val }
	})
}

// Set the Column from the function
func (m noteMods) UUIDFunc(f func() string) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m noteMods) UnsetUUID() NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m noteMods) RandomUUID(f *faker.Faker) NoteMod {
	return NoteModFunc(func(_ context.Context, o *NoteTemplate) {
		o.UUID = func() string {
			return random_string(f)
		}
	})
}

func (m noteMods) WithParentsCascading() NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		if isDone, _ := noteWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = noteWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m noteMods) WithHistoryNoteAudioRecordings(number int, related *HistoryNoteAudioRecordingTemplate) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.HistoryNoteAudioRecordings = []*noteRHistoryNoteAudioRecordingsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m noteMods) WithNewHistoryNoteAudioRecordings(number int, mods ...HistoryNoteAudioRecordingMod) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		related := o.f.NewHistoryNoteAudioRecordingWithContext(ctx, mods...)
		m.WithHistoryNoteAudioRecordings(number, related).Apply(ctx, o)
	})
}

func (m noteMods) AddHistoryNoteAudioRecordings(number int, related *HistoryNoteAudioRecordingTemplate) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.HistoryNoteAudioRecordings = append(o.r.HistoryNoteAudioRecordings, &noteRHistoryNoteAudioRecordingsR{
			number: number,
			o:      related,
		})
	})
}

func (m noteMods) AddNewHistoryNoteAudioRecordings(number int, mods ...HistoryNoteAudioRecordingMod) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		related := o.f.NewHistoryNoteAudioRecordingWithContext(ctx, mods...)
		m.AddHistoryNoteAudioRecordings(number, related).Apply(ctx, o)
	})
}

func (m noteMods) AddExistingHistoryNoteAudioRecordings(existingModels ...*models.HistoryNoteAudioRecording) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		for _, em := range existingModels {
			o.r.HistoryNoteAudioRecordings = append(o.r.HistoryNoteAudioRecordings, &noteRHistoryNoteAudioRecordingsR{
				o: o.f.FromExistingHistoryNoteAudioRecording(em),
			})
		}
	})
}

func (m noteMods) WithoutHistoryNoteAudioRecordings() NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.HistoryNoteAudioRecordings = nil
	})
}

func (m noteMods) WithNoteAudioRecordings(number int, related *NoteAudioRecordingTemplate) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.NoteAudioRecordings = []*noteRNoteAudioRecordingsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m noteMods) WithNewNoteAudioRecordings(number int, mods ...NoteAudioRecordingMod) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		related := o.f.NewNoteAudioRecordingWithContext(ctx, mods...)
		m.WithNoteAudioRecordings(number, related).Apply(ctx, o)
	})
}

func (m noteMods) AddNoteAudioRecordings(number int, related *NoteAudioRecordingTemplate) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.NoteAudioRecordings = append(o.r.NoteAudioRecordings, &noteRNoteAudioRecordingsR{
			number: number,
			o:      related,
		})
	})
}

func (m noteMods) AddNewNoteAudioRecordings(number int, mods ...NoteAudioRecordingMod) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		related := o.f.NewNoteAudioRecordingWithContext(ctx, mods...)
		m.AddNoteAudioRecordings(number, related).Apply(ctx, o)
	})
}

func (m noteMods) AddExistingNoteAudioRecordings(existingModels ...*models.NoteAudioRecording) NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		for _, em := range existingModels {
			o.r.NoteAudioRecordings = append(o.r.NoteAudioRecordings, &noteRNoteAudioRecordingsR{
				o: o.f.FromExistingNoteAudioRecording(em),
			})
		}
	})
}

func (m noteMods) WithoutNoteAudioRecordings() NoteMod {
	return NoteModFunc(func(ctx context.Context, o *NoteTemplate) {
		o.r.NoteAudioRecordings = nil
	})
}
