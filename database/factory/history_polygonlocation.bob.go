// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type HistoryPolygonlocationMod interface {
	Apply(context.Context, *HistoryPolygonlocationTemplate)
}

type HistoryPolygonlocationModFunc func(context.Context, *HistoryPolygonlocationTemplate)

func (f HistoryPolygonlocationModFunc) Apply(ctx context.Context, n *HistoryPolygonlocationTemplate) {
	f(ctx, n)
}

type HistoryPolygonlocationModSlice []HistoryPolygonlocationMod

func (mods HistoryPolygonlocationModSlice) Apply(ctx context.Context, n *HistoryPolygonlocationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// HistoryPolygonlocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type HistoryPolygonlocationTemplate struct {
	Accessdesc              func() null.Val[string]
	Acres                   func() null.Val[float64]
	Active                  func() null.Val[int16]
	Comments                func() null.Val[string]
	Creationdate            func() null.Val[int64]
	Creator                 func() null.Val[string]
	Description             func() null.Val[string]
	Externalid              func() null.Val[string]
	Editdate                func() null.Val[int64]
	Editor                  func() null.Val[string]
	Filter                  func() null.Val[string]
	Globalid                func() null.Val[string]
	Habitat                 func() null.Val[string]
	Hectares                func() null.Val[float64]
	Jurisdiction            func() null.Val[string]
	Larvinspectinterval     func() null.Val[int16]
	Lastinspectactiontaken  func() null.Val[string]
	Lastinspectactivity     func() null.Val[string]
	Lastinspectavglarvae    func() null.Val[float64]
	Lastinspectavgpupae     func() null.Val[float64]
	Lastinspectbreeding     func() null.Val[string]
	Lastinspectconditions   func() null.Val[string]
	Lastinspectdate         func() null.Val[int64]
	Lastinspectfieldspecies func() null.Val[string]
	Lastinspectlstages      func() null.Val[string]
	Lasttreatactivity       func() null.Val[string]
	Lasttreatdate           func() null.Val[int64]
	Lasttreatproduct        func() null.Val[string]
	Lasttreatqty            func() null.Val[float64]
	Lasttreatqtyunit        func() null.Val[string]
	Locationnumber          func() null.Val[int64]
	Name                    func() null.Val[string]
	Nextactiondatescheduled func() null.Val[int64]
	Objectid                func() int32
	Priority                func() null.Val[string]
	Symbology               func() null.Val[string]
	ShapeArea               func() null.Val[float64]
	ShapeLength             func() null.Val[float64]
	Usetype                 func() null.Val[string]
	Waterorigin             func() null.Val[string]
	Zone                    func() null.Val[string]
	Zone2                   func() null.Val[string]
	Created                 func() null.Val[time.Time]
	GeometryX               func() null.Val[float64]
	GeometryY               func() null.Val[float64]
	Version                 func() int32

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the HistoryPolygonlocationTemplate
func (o *HistoryPolygonlocationTemplate) Apply(ctx context.Context, mods ...HistoryPolygonlocationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.HistoryPolygonlocation
// according to the relationships in the template. Nothing is inserted into the db
func (t HistoryPolygonlocationTemplate) setModelRels(o *models.HistoryPolygonlocation) {}

// BuildSetter returns an *models.HistoryPolygonlocationSetter
// this does nothing with the relationship templates
func (o HistoryPolygonlocationTemplate) BuildSetter() *models.HistoryPolygonlocationSetter {
	m := &models.HistoryPolygonlocationSetter{}

	if o.Accessdesc != nil {
		val := o.Accessdesc()
		m.Accessdesc = omitnull.FromNull(val)
	}
	if o.Acres != nil {
		val := o.Acres()
		m.Acres = omitnull.FromNull(val)
	}
	if o.Active != nil {
		val := o.Active()
		m.Active = omitnull.FromNull(val)
	}
	if o.Comments != nil {
		val := o.Comments()
		m.Comments = omitnull.FromNull(val)
	}
	if o.Creationdate != nil {
		val := o.Creationdate()
		m.Creationdate = omitnull.FromNull(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omitnull.FromNull(val)
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = omitnull.FromNull(val)
	}
	if o.Externalid != nil {
		val := o.Externalid()
		m.Externalid = omitnull.FromNull(val)
	}
	if o.Editdate != nil {
		val := o.Editdate()
		m.Editdate = omitnull.FromNull(val)
	}
	if o.Editor != nil {
		val := o.Editor()
		m.Editor = omitnull.FromNull(val)
	}
	if o.Filter != nil {
		val := o.Filter()
		m.Filter = omitnull.FromNull(val)
	}
	if o.Globalid != nil {
		val := o.Globalid()
		m.Globalid = omitnull.FromNull(val)
	}
	if o.Habitat != nil {
		val := o.Habitat()
		m.Habitat = omitnull.FromNull(val)
	}
	if o.Hectares != nil {
		val := o.Hectares()
		m.Hectares = omitnull.FromNull(val)
	}
	if o.Jurisdiction != nil {
		val := o.Jurisdiction()
		m.Jurisdiction = omitnull.FromNull(val)
	}
	if o.Larvinspectinterval != nil {
		val := o.Larvinspectinterval()
		m.Larvinspectinterval = omitnull.FromNull(val)
	}
	if o.Lastinspectactiontaken != nil {
		val := o.Lastinspectactiontaken()
		m.Lastinspectactiontaken = omitnull.FromNull(val)
	}
	if o.Lastinspectactivity != nil {
		val := o.Lastinspectactivity()
		m.Lastinspectactivity = omitnull.FromNull(val)
	}
	if o.Lastinspectavglarvae != nil {
		val := o.Lastinspectavglarvae()
		m.Lastinspectavglarvae = omitnull.FromNull(val)
	}
	if o.Lastinspectavgpupae != nil {
		val := o.Lastinspectavgpupae()
		m.Lastinspectavgpupae = omitnull.FromNull(val)
	}
	if o.Lastinspectbreeding != nil {
		val := o.Lastinspectbreeding()
		m.Lastinspectbreeding = omitnull.FromNull(val)
	}
	if o.Lastinspectconditions != nil {
		val := o.Lastinspectconditions()
		m.Lastinspectconditions = omitnull.FromNull(val)
	}
	if o.Lastinspectdate != nil {
		val := o.Lastinspectdate()
		m.Lastinspectdate = omitnull.FromNull(val)
	}
	if o.Lastinspectfieldspecies != nil {
		val := o.Lastinspectfieldspecies()
		m.Lastinspectfieldspecies = omitnull.FromNull(val)
	}
	if o.Lastinspectlstages != nil {
		val := o.Lastinspectlstages()
		m.Lastinspectlstages = omitnull.FromNull(val)
	}
	if o.Lasttreatactivity != nil {
		val := o.Lasttreatactivity()
		m.Lasttreatactivity = omitnull.FromNull(val)
	}
	if o.Lasttreatdate != nil {
		val := o.Lasttreatdate()
		m.Lasttreatdate = omitnull.FromNull(val)
	}
	if o.Lasttreatproduct != nil {
		val := o.Lasttreatproduct()
		m.Lasttreatproduct = omitnull.FromNull(val)
	}
	if o.Lasttreatqty != nil {
		val := o.Lasttreatqty()
		m.Lasttreatqty = omitnull.FromNull(val)
	}
	if o.Lasttreatqtyunit != nil {
		val := o.Lasttreatqtyunit()
		m.Lasttreatqtyunit = omitnull.FromNull(val)
	}
	if o.Locationnumber != nil {
		val := o.Locationnumber()
		m.Locationnumber = omitnull.FromNull(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omitnull.FromNull(val)
	}
	if o.Nextactiondatescheduled != nil {
		val := o.Nextactiondatescheduled()
		m.Nextactiondatescheduled = omitnull.FromNull(val)
	}
	if o.Objectid != nil {
		val := o.Objectid()
		m.Objectid = omit.From(val)
	}
	if o.Priority != nil {
		val := o.Priority()
		m.Priority = omitnull.FromNull(val)
	}
	if o.Symbology != nil {
		val := o.Symbology()
		m.Symbology = omitnull.FromNull(val)
	}
	if o.ShapeArea != nil {
		val := o.ShapeArea()
		m.ShapeArea = omitnull.FromNull(val)
	}
	if o.ShapeLength != nil {
		val := o.ShapeLength()
		m.ShapeLength = omitnull.FromNull(val)
	}
	if o.Usetype != nil {
		val := o.Usetype()
		m.Usetype = omitnull.FromNull(val)
	}
	if o.Waterorigin != nil {
		val := o.Waterorigin()
		m.Waterorigin = omitnull.FromNull(val)
	}
	if o.Zone != nil {
		val := o.Zone()
		m.Zone = omitnull.FromNull(val)
	}
	if o.Zone2 != nil {
		val := o.Zone2()
		m.Zone2 = omitnull.FromNull(val)
	}
	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.GeometryX != nil {
		val := o.GeometryX()
		m.GeometryX = omitnull.FromNull(val)
	}
	if o.GeometryY != nil {
		val := o.GeometryY()
		m.GeometryY = omitnull.FromNull(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.HistoryPolygonlocationSetter
// this does nothing with the relationship templates
func (o HistoryPolygonlocationTemplate) BuildManySetter(number int) []*models.HistoryPolygonlocationSetter {
	m := make([]*models.HistoryPolygonlocationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.HistoryPolygonlocation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryPolygonlocationTemplate.Create
func (o HistoryPolygonlocationTemplate) Build() *models.HistoryPolygonlocation {
	m := &models.HistoryPolygonlocation{}

	if o.Accessdesc != nil {
		m.Accessdesc = o.Accessdesc()
	}
	if o.Acres != nil {
		m.Acres = o.Acres()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.Comments != nil {
		m.Comments = o.Comments()
	}
	if o.Creationdate != nil {
		m.Creationdate = o.Creationdate()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Externalid != nil {
		m.Externalid = o.Externalid()
	}
	if o.Editdate != nil {
		m.Editdate = o.Editdate()
	}
	if o.Editor != nil {
		m.Editor = o.Editor()
	}
	if o.Filter != nil {
		m.Filter = o.Filter()
	}
	if o.Globalid != nil {
		m.Globalid = o.Globalid()
	}
	if o.Habitat != nil {
		m.Habitat = o.Habitat()
	}
	if o.Hectares != nil {
		m.Hectares = o.Hectares()
	}
	if o.Jurisdiction != nil {
		m.Jurisdiction = o.Jurisdiction()
	}
	if o.Larvinspectinterval != nil {
		m.Larvinspectinterval = o.Larvinspectinterval()
	}
	if o.Lastinspectactiontaken != nil {
		m.Lastinspectactiontaken = o.Lastinspectactiontaken()
	}
	if o.Lastinspectactivity != nil {
		m.Lastinspectactivity = o.Lastinspectactivity()
	}
	if o.Lastinspectavglarvae != nil {
		m.Lastinspectavglarvae = o.Lastinspectavglarvae()
	}
	if o.Lastinspectavgpupae != nil {
		m.Lastinspectavgpupae = o.Lastinspectavgpupae()
	}
	if o.Lastinspectbreeding != nil {
		m.Lastinspectbreeding = o.Lastinspectbreeding()
	}
	if o.Lastinspectconditions != nil {
		m.Lastinspectconditions = o.Lastinspectconditions()
	}
	if o.Lastinspectdate != nil {
		m.Lastinspectdate = o.Lastinspectdate()
	}
	if o.Lastinspectfieldspecies != nil {
		m.Lastinspectfieldspecies = o.Lastinspectfieldspecies()
	}
	if o.Lastinspectlstages != nil {
		m.Lastinspectlstages = o.Lastinspectlstages()
	}
	if o.Lasttreatactivity != nil {
		m.Lasttreatactivity = o.Lasttreatactivity()
	}
	if o.Lasttreatdate != nil {
		m.Lasttreatdate = o.Lasttreatdate()
	}
	if o.Lasttreatproduct != nil {
		m.Lasttreatproduct = o.Lasttreatproduct()
	}
	if o.Lasttreatqty != nil {
		m.Lasttreatqty = o.Lasttreatqty()
	}
	if o.Lasttreatqtyunit != nil {
		m.Lasttreatqtyunit = o.Lasttreatqtyunit()
	}
	if o.Locationnumber != nil {
		m.Locationnumber = o.Locationnumber()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Nextactiondatescheduled != nil {
		m.Nextactiondatescheduled = o.Nextactiondatescheduled()
	}
	if o.Objectid != nil {
		m.Objectid = o.Objectid()
	}
	if o.Priority != nil {
		m.Priority = o.Priority()
	}
	if o.Symbology != nil {
		m.Symbology = o.Symbology()
	}
	if o.ShapeArea != nil {
		m.ShapeArea = o.ShapeArea()
	}
	if o.ShapeLength != nil {
		m.ShapeLength = o.ShapeLength()
	}
	if o.Usetype != nil {
		m.Usetype = o.Usetype()
	}
	if o.Waterorigin != nil {
		m.Waterorigin = o.Waterorigin()
	}
	if o.Zone != nil {
		m.Zone = o.Zone()
	}
	if o.Zone2 != nil {
		m.Zone2 = o.Zone2()
	}
	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.GeometryX != nil {
		m.GeometryX = o.GeometryX()
	}
	if o.GeometryY != nil {
		m.GeometryY = o.GeometryY()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.HistoryPolygonlocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryPolygonlocationTemplate.CreateMany
func (o HistoryPolygonlocationTemplate) BuildMany(number int) models.HistoryPolygonlocationSlice {
	m := make(models.HistoryPolygonlocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableHistoryPolygonlocation(m *models.HistoryPolygonlocationSetter) {
	if !(m.Objectid.IsValue()) {
		val := random_int32(nil)
		m.Objectid = omit.From(val)
	}
	if !(m.Version.IsValue()) {
		val := random_int32(nil)
		m.Version = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.HistoryPolygonlocation
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *HistoryPolygonlocationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.HistoryPolygonlocation) error {
	var err error

	return err
}

// Create builds a historyPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *HistoryPolygonlocationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.HistoryPolygonlocation, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableHistoryPolygonlocation(opt)

	m, err := models.HistoryPolygonlocations.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a historyPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *HistoryPolygonlocationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.HistoryPolygonlocation {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a historyPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *HistoryPolygonlocationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.HistoryPolygonlocation {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple historyPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o HistoryPolygonlocationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.HistoryPolygonlocationSlice, error) {
	var err error
	m := make(models.HistoryPolygonlocationSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple historyPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o HistoryPolygonlocationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.HistoryPolygonlocationSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple historyPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o HistoryPolygonlocationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.HistoryPolygonlocationSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// HistoryPolygonlocation has methods that act as mods for the HistoryPolygonlocationTemplate
var HistoryPolygonlocationMods historyPolygonlocationMods

type historyPolygonlocationMods struct{}

func (m historyPolygonlocationMods) RandomizeAllColumns(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModSlice{
		HistoryPolygonlocationMods.RandomAccessdesc(f),
		HistoryPolygonlocationMods.RandomAcres(f),
		HistoryPolygonlocationMods.RandomActive(f),
		HistoryPolygonlocationMods.RandomComments(f),
		HistoryPolygonlocationMods.RandomCreationdate(f),
		HistoryPolygonlocationMods.RandomCreator(f),
		HistoryPolygonlocationMods.RandomDescription(f),
		HistoryPolygonlocationMods.RandomExternalid(f),
		HistoryPolygonlocationMods.RandomEditdate(f),
		HistoryPolygonlocationMods.RandomEditor(f),
		HistoryPolygonlocationMods.RandomFilter(f),
		HistoryPolygonlocationMods.RandomGlobalid(f),
		HistoryPolygonlocationMods.RandomHabitat(f),
		HistoryPolygonlocationMods.RandomHectares(f),
		HistoryPolygonlocationMods.RandomJurisdiction(f),
		HistoryPolygonlocationMods.RandomLarvinspectinterval(f),
		HistoryPolygonlocationMods.RandomLastinspectactiontaken(f),
		HistoryPolygonlocationMods.RandomLastinspectactivity(f),
		HistoryPolygonlocationMods.RandomLastinspectavglarvae(f),
		HistoryPolygonlocationMods.RandomLastinspectavgpupae(f),
		HistoryPolygonlocationMods.RandomLastinspectbreeding(f),
		HistoryPolygonlocationMods.RandomLastinspectconditions(f),
		HistoryPolygonlocationMods.RandomLastinspectdate(f),
		HistoryPolygonlocationMods.RandomLastinspectfieldspecies(f),
		HistoryPolygonlocationMods.RandomLastinspectlstages(f),
		HistoryPolygonlocationMods.RandomLasttreatactivity(f),
		HistoryPolygonlocationMods.RandomLasttreatdate(f),
		HistoryPolygonlocationMods.RandomLasttreatproduct(f),
		HistoryPolygonlocationMods.RandomLasttreatqty(f),
		HistoryPolygonlocationMods.RandomLasttreatqtyunit(f),
		HistoryPolygonlocationMods.RandomLocationnumber(f),
		HistoryPolygonlocationMods.RandomName(f),
		HistoryPolygonlocationMods.RandomNextactiondatescheduled(f),
		HistoryPolygonlocationMods.RandomObjectid(f),
		HistoryPolygonlocationMods.RandomPriority(f),
		HistoryPolygonlocationMods.RandomSymbology(f),
		HistoryPolygonlocationMods.RandomShapeArea(f),
		HistoryPolygonlocationMods.RandomShapeLength(f),
		HistoryPolygonlocationMods.RandomUsetype(f),
		HistoryPolygonlocationMods.RandomWaterorigin(f),
		HistoryPolygonlocationMods.RandomZone(f),
		HistoryPolygonlocationMods.RandomZone2(f),
		HistoryPolygonlocationMods.RandomCreated(f),
		HistoryPolygonlocationMods.RandomGeometryX(f),
		HistoryPolygonlocationMods.RandomGeometryY(f),
		HistoryPolygonlocationMods.RandomVersion(f),
	}
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Accessdesc(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) AccessdescFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Accessdesc = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetAccessdesc() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Accessdesc = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomAccessdesc(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomAccessdescNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Acres(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) AcresFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Acres = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetAcres() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Acres = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomAcres(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomAcresNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Active(val null.Val[int16]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ActiveFunc(f func() null.Val[int16]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetActive() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomActive(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomActiveNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Comments(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) CommentsFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Comments = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetComments() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Comments = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomComments(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomCommentsNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Creationdate(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) CreationdateFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creationdate = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetCreationdate() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creationdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomCreationdate(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomCreationdateNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Creator(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) CreatorFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetCreator() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomCreator(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomCreatorNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Description(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) DescriptionFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetDescription() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomDescription(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomDescriptionNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Externalid(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ExternalidFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Externalid = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetExternalid() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Externalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomExternalid(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomExternalidNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Editdate(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) EditdateFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editdate = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetEditdate() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomEditdate(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomEditdateNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Editor(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) EditorFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editor = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetEditor() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editor = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomEditor(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomEditorNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Filter(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) FilterFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Filter = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetFilter() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Filter = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomFilter(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomFilterNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Globalid(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) GlobalidFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Globalid = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetGlobalid() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Globalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomGlobalid(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomGlobalidNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Habitat(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) HabitatFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Habitat = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetHabitat() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Habitat = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomHabitat(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomHabitatNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Hectares(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) HectaresFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Hectares = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetHectares() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Hectares = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomHectares(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomHectaresNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Jurisdiction(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) JurisdictionFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Jurisdiction = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetJurisdiction() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Jurisdiction = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomJurisdiction(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomJurisdictionNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Larvinspectinterval(val null.Val[int16]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LarvinspectintervalFunc(f func() null.Val[int16]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Larvinspectinterval = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLarvinspectinterval() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Larvinspectinterval = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLarvinspectinterval(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLarvinspectintervalNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectactiontaken(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectactiontakenFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactiontaken = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectactiontaken() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactiontaken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectactiontaken(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectactiontakenNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectactivity(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectactivityFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactivity = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectactivity() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectactivity(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectactivityNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectavglarvae(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectavglarvaeFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavglarvae = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectavglarvae() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavglarvae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectavglarvae(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectavglarvaeNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectavgpupae(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectavgpupaeFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavgpupae = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectavgpupae() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavgpupae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectavgpupae(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectavgpupaeNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectbreeding(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectbreedingFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectbreeding = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectbreeding() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectbreeding = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectbreeding(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectbreedingNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectconditions(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectconditionsFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectconditions = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectconditions() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectconditions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectconditions(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectconditionsNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectdate(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectdateFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectdate = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectdate() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectdate(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectdateNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectfieldspecies(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectfieldspeciesFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectfieldspecies() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectfieldspecies(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectfieldspeciesNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lastinspectlstages(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LastinspectlstagesFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectlstages = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLastinspectlstages() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectlstages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLastinspectlstages(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLastinspectlstagesNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lasttreatactivity(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LasttreatactivityFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatactivity = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLasttreatactivity() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLasttreatactivity(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLasttreatactivityNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lasttreatdate(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LasttreatdateFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatdate = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLasttreatdate() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLasttreatdate(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLasttreatdateNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lasttreatproduct(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LasttreatproductFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatproduct = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLasttreatproduct() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatproduct = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLasttreatproduct(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLasttreatproductNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lasttreatqty(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LasttreatqtyFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqty = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLasttreatqty() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqty = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLasttreatqty(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLasttreatqtyNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Lasttreatqtyunit(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LasttreatqtyunitFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqtyunit = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLasttreatqtyunit() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqtyunit = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLasttreatqtyunit(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLasttreatqtyunitNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Locationnumber(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) LocationnumberFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Locationnumber = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetLocationnumber() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Locationnumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomLocationnumber(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomLocationnumberNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Name(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) NameFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetName() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomName(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomNameNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Nextactiondatescheduled(val null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) NextactiondatescheduledFunc(f func() null.Val[int64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Nextactiondatescheduled = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetNextactiondatescheduled() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Nextactiondatescheduled = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomNextactiondatescheduled(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomNextactiondatescheduledNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Objectid(val int32) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Objectid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ObjectidFunc(f func() int32) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Objectid = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetObjectid() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Objectid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyPolygonlocationMods) RandomObjectid(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Objectid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Priority(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) PriorityFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Priority = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetPriority() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Priority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomPriority(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomPriorityNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Symbology(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) SymbologyFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Symbology = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetSymbology() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Symbology = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomSymbology(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomSymbologyNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) ShapeArea(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ShapeAreaFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeArea = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetShapeArea() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeArea = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomShapeArea(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomShapeAreaNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) ShapeLength(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ShapeLengthFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeLength = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetShapeLength() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeLength = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomShapeLength(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomShapeLengthNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Usetype(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) UsetypeFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Usetype = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetUsetype() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Usetype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomUsetype(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomUsetypeNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Waterorigin(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) WateroriginFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Waterorigin = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetWaterorigin() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Waterorigin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomWaterorigin(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomWateroriginNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Zone(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) ZoneFunc(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetZone() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomZone(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomZoneNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Zone2(val null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) Zone2Func(f func() null.Val[string]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone2 = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetZone2() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomZone2(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomZone2NotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Created(val null.Val[time.Time]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) CreatedFunc(f func() null.Val[time.Time]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetCreated() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomCreated(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomCreatedNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) GeometryX(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) GeometryXFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryX = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetGeometryX() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryX = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomGeometryX(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomGeometryXNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) GeometryY(val null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) GeometryYFunc(f func() null.Val[float64]) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryY = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetGeometryY() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryY = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyPolygonlocationMods) RandomGeometryY(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyPolygonlocationMods) RandomGeometryYNotNull(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyPolygonlocationMods) Version(val int32) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyPolygonlocationMods) VersionFunc(f func() int32) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m historyPolygonlocationMods) UnsetVersion() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyPolygonlocationMods) RandomVersion(f *faker.Faker) HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(_ context.Context, o *HistoryPolygonlocationTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

func (m historyPolygonlocationMods) WithParentsCascading() HistoryPolygonlocationMod {
	return HistoryPolygonlocationModFunc(func(ctx context.Context, o *HistoryPolygonlocationTemplate) {
		if isDone, _ := historyPolygonlocationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = historyPolygonlocationWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
