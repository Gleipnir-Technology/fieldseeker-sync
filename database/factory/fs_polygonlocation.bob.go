// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type FSPolygonlocationMod interface {
	Apply(context.Context, *FSPolygonlocationTemplate)
}

type FSPolygonlocationModFunc func(context.Context, *FSPolygonlocationTemplate)

func (f FSPolygonlocationModFunc) Apply(ctx context.Context, n *FSPolygonlocationTemplate) {
	f(ctx, n)
}

type FSPolygonlocationModSlice []FSPolygonlocationMod

func (mods FSPolygonlocationModSlice) Apply(ctx context.Context, n *FSPolygonlocationTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// FSPolygonlocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type FSPolygonlocationTemplate struct {
	Accessdesc              func() null.Val[string]
	Acres                   func() null.Val[float64]
	Active                  func() null.Val[int16]
	Comments                func() null.Val[string]
	Creationdate            func() null.Val[int64]
	Creator                 func() null.Val[string]
	Description             func() null.Val[string]
	Externalid              func() null.Val[string]
	Editdate                func() null.Val[int64]
	Editor                  func() null.Val[string]
	Filter                  func() null.Val[string]
	Globalid                func() null.Val[string]
	Habitat                 func() null.Val[string]
	Hectares                func() null.Val[float64]
	Jurisdiction            func() null.Val[string]
	Larvinspectinterval     func() null.Val[int16]
	Lastinspectactiontaken  func() null.Val[string]
	Lastinspectactivity     func() null.Val[string]
	Lastinspectavglarvae    func() null.Val[float64]
	Lastinspectavgpupae     func() null.Val[float64]
	Lastinspectbreeding     func() null.Val[string]
	Lastinspectconditions   func() null.Val[string]
	Lastinspectdate         func() null.Val[int64]
	Lastinspectfieldspecies func() null.Val[string]
	Lastinspectlstages      func() null.Val[string]
	Lasttreatactivity       func() null.Val[string]
	Lasttreatdate           func() null.Val[int64]
	Lasttreatproduct        func() null.Val[string]
	Lasttreatqty            func() null.Val[float64]
	Lasttreatqtyunit        func() null.Val[string]
	Locationnumber          func() null.Val[int64]
	Name                    func() null.Val[string]
	Nextactiondatescheduled func() null.Val[int64]
	Objectid                func() int32
	Priority                func() null.Val[string]
	Symbology               func() null.Val[string]
	ShapeArea               func() null.Val[float64]
	ShapeLength             func() null.Val[float64]
	Usetype                 func() null.Val[string]
	Waterorigin             func() null.Val[string]
	Zone                    func() null.Val[string]
	Zone2                   func() null.Val[string]
	GeometryX               func() null.Val[float64]
	GeometryY               func() null.Val[float64]
	Updated                 func() time.Time

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the FSPolygonlocationTemplate
func (o *FSPolygonlocationTemplate) Apply(ctx context.Context, mods ...FSPolygonlocationMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.FSPolygonlocation
// according to the relationships in the template. Nothing is inserted into the db
func (t FSPolygonlocationTemplate) setModelRels(o *models.FSPolygonlocation) {}

// BuildSetter returns an *models.FSPolygonlocationSetter
// this does nothing with the relationship templates
func (o FSPolygonlocationTemplate) BuildSetter() *models.FSPolygonlocationSetter {
	m := &models.FSPolygonlocationSetter{}

	if o.Accessdesc != nil {
		val := o.Accessdesc()
		m.Accessdesc = omitnull.FromNull(val)
	}
	if o.Acres != nil {
		val := o.Acres()
		m.Acres = omitnull.FromNull(val)
	}
	if o.Active != nil {
		val := o.Active()
		m.Active = omitnull.FromNull(val)
	}
	if o.Comments != nil {
		val := o.Comments()
		m.Comments = omitnull.FromNull(val)
	}
	if o.Creationdate != nil {
		val := o.Creationdate()
		m.Creationdate = omitnull.FromNull(val)
	}
	if o.Creator != nil {
		val := o.Creator()
		m.Creator = omitnull.FromNull(val)
	}
	if o.Description != nil {
		val := o.Description()
		m.Description = omitnull.FromNull(val)
	}
	if o.Externalid != nil {
		val := o.Externalid()
		m.Externalid = omitnull.FromNull(val)
	}
	if o.Editdate != nil {
		val := o.Editdate()
		m.Editdate = omitnull.FromNull(val)
	}
	if o.Editor != nil {
		val := o.Editor()
		m.Editor = omitnull.FromNull(val)
	}
	if o.Filter != nil {
		val := o.Filter()
		m.Filter = omitnull.FromNull(val)
	}
	if o.Globalid != nil {
		val := o.Globalid()
		m.Globalid = omitnull.FromNull(val)
	}
	if o.Habitat != nil {
		val := o.Habitat()
		m.Habitat = omitnull.FromNull(val)
	}
	if o.Hectares != nil {
		val := o.Hectares()
		m.Hectares = omitnull.FromNull(val)
	}
	if o.Jurisdiction != nil {
		val := o.Jurisdiction()
		m.Jurisdiction = omitnull.FromNull(val)
	}
	if o.Larvinspectinterval != nil {
		val := o.Larvinspectinterval()
		m.Larvinspectinterval = omitnull.FromNull(val)
	}
	if o.Lastinspectactiontaken != nil {
		val := o.Lastinspectactiontaken()
		m.Lastinspectactiontaken = omitnull.FromNull(val)
	}
	if o.Lastinspectactivity != nil {
		val := o.Lastinspectactivity()
		m.Lastinspectactivity = omitnull.FromNull(val)
	}
	if o.Lastinspectavglarvae != nil {
		val := o.Lastinspectavglarvae()
		m.Lastinspectavglarvae = omitnull.FromNull(val)
	}
	if o.Lastinspectavgpupae != nil {
		val := o.Lastinspectavgpupae()
		m.Lastinspectavgpupae = omitnull.FromNull(val)
	}
	if o.Lastinspectbreeding != nil {
		val := o.Lastinspectbreeding()
		m.Lastinspectbreeding = omitnull.FromNull(val)
	}
	if o.Lastinspectconditions != nil {
		val := o.Lastinspectconditions()
		m.Lastinspectconditions = omitnull.FromNull(val)
	}
	if o.Lastinspectdate != nil {
		val := o.Lastinspectdate()
		m.Lastinspectdate = omitnull.FromNull(val)
	}
	if o.Lastinspectfieldspecies != nil {
		val := o.Lastinspectfieldspecies()
		m.Lastinspectfieldspecies = omitnull.FromNull(val)
	}
	if o.Lastinspectlstages != nil {
		val := o.Lastinspectlstages()
		m.Lastinspectlstages = omitnull.FromNull(val)
	}
	if o.Lasttreatactivity != nil {
		val := o.Lasttreatactivity()
		m.Lasttreatactivity = omitnull.FromNull(val)
	}
	if o.Lasttreatdate != nil {
		val := o.Lasttreatdate()
		m.Lasttreatdate = omitnull.FromNull(val)
	}
	if o.Lasttreatproduct != nil {
		val := o.Lasttreatproduct()
		m.Lasttreatproduct = omitnull.FromNull(val)
	}
	if o.Lasttreatqty != nil {
		val := o.Lasttreatqty()
		m.Lasttreatqty = omitnull.FromNull(val)
	}
	if o.Lasttreatqtyunit != nil {
		val := o.Lasttreatqtyunit()
		m.Lasttreatqtyunit = omitnull.FromNull(val)
	}
	if o.Locationnumber != nil {
		val := o.Locationnumber()
		m.Locationnumber = omitnull.FromNull(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omitnull.FromNull(val)
	}
	if o.Nextactiondatescheduled != nil {
		val := o.Nextactiondatescheduled()
		m.Nextactiondatescheduled = omitnull.FromNull(val)
	}
	if o.Objectid != nil {
		val := o.Objectid()
		m.Objectid = omit.From(val)
	}
	if o.Priority != nil {
		val := o.Priority()
		m.Priority = omitnull.FromNull(val)
	}
	if o.Symbology != nil {
		val := o.Symbology()
		m.Symbology = omitnull.FromNull(val)
	}
	if o.ShapeArea != nil {
		val := o.ShapeArea()
		m.ShapeArea = omitnull.FromNull(val)
	}
	if o.ShapeLength != nil {
		val := o.ShapeLength()
		m.ShapeLength = omitnull.FromNull(val)
	}
	if o.Usetype != nil {
		val := o.Usetype()
		m.Usetype = omitnull.FromNull(val)
	}
	if o.Waterorigin != nil {
		val := o.Waterorigin()
		m.Waterorigin = omitnull.FromNull(val)
	}
	if o.Zone != nil {
		val := o.Zone()
		m.Zone = omitnull.FromNull(val)
	}
	if o.Zone2 != nil {
		val := o.Zone2()
		m.Zone2 = omitnull.FromNull(val)
	}
	if o.GeometryX != nil {
		val := o.GeometryX()
		m.GeometryX = omitnull.FromNull(val)
	}
	if o.GeometryY != nil {
		val := o.GeometryY()
		m.GeometryY = omitnull.FromNull(val)
	}
	if o.Updated != nil {
		val := o.Updated()
		m.Updated = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.FSPolygonlocationSetter
// this does nothing with the relationship templates
func (o FSPolygonlocationTemplate) BuildManySetter(number int) []*models.FSPolygonlocationSetter {
	m := make([]*models.FSPolygonlocationSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.FSPolygonlocation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSPolygonlocationTemplate.Create
func (o FSPolygonlocationTemplate) Build() *models.FSPolygonlocation {
	m := &models.FSPolygonlocation{}

	if o.Accessdesc != nil {
		m.Accessdesc = o.Accessdesc()
	}
	if o.Acres != nil {
		m.Acres = o.Acres()
	}
	if o.Active != nil {
		m.Active = o.Active()
	}
	if o.Comments != nil {
		m.Comments = o.Comments()
	}
	if o.Creationdate != nil {
		m.Creationdate = o.Creationdate()
	}
	if o.Creator != nil {
		m.Creator = o.Creator()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}
	if o.Externalid != nil {
		m.Externalid = o.Externalid()
	}
	if o.Editdate != nil {
		m.Editdate = o.Editdate()
	}
	if o.Editor != nil {
		m.Editor = o.Editor()
	}
	if o.Filter != nil {
		m.Filter = o.Filter()
	}
	if o.Globalid != nil {
		m.Globalid = o.Globalid()
	}
	if o.Habitat != nil {
		m.Habitat = o.Habitat()
	}
	if o.Hectares != nil {
		m.Hectares = o.Hectares()
	}
	if o.Jurisdiction != nil {
		m.Jurisdiction = o.Jurisdiction()
	}
	if o.Larvinspectinterval != nil {
		m.Larvinspectinterval = o.Larvinspectinterval()
	}
	if o.Lastinspectactiontaken != nil {
		m.Lastinspectactiontaken = o.Lastinspectactiontaken()
	}
	if o.Lastinspectactivity != nil {
		m.Lastinspectactivity = o.Lastinspectactivity()
	}
	if o.Lastinspectavglarvae != nil {
		m.Lastinspectavglarvae = o.Lastinspectavglarvae()
	}
	if o.Lastinspectavgpupae != nil {
		m.Lastinspectavgpupae = o.Lastinspectavgpupae()
	}
	if o.Lastinspectbreeding != nil {
		m.Lastinspectbreeding = o.Lastinspectbreeding()
	}
	if o.Lastinspectconditions != nil {
		m.Lastinspectconditions = o.Lastinspectconditions()
	}
	if o.Lastinspectdate != nil {
		m.Lastinspectdate = o.Lastinspectdate()
	}
	if o.Lastinspectfieldspecies != nil {
		m.Lastinspectfieldspecies = o.Lastinspectfieldspecies()
	}
	if o.Lastinspectlstages != nil {
		m.Lastinspectlstages = o.Lastinspectlstages()
	}
	if o.Lasttreatactivity != nil {
		m.Lasttreatactivity = o.Lasttreatactivity()
	}
	if o.Lasttreatdate != nil {
		m.Lasttreatdate = o.Lasttreatdate()
	}
	if o.Lasttreatproduct != nil {
		m.Lasttreatproduct = o.Lasttreatproduct()
	}
	if o.Lasttreatqty != nil {
		m.Lasttreatqty = o.Lasttreatqty()
	}
	if o.Lasttreatqtyunit != nil {
		m.Lasttreatqtyunit = o.Lasttreatqtyunit()
	}
	if o.Locationnumber != nil {
		m.Locationnumber = o.Locationnumber()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Nextactiondatescheduled != nil {
		m.Nextactiondatescheduled = o.Nextactiondatescheduled()
	}
	if o.Objectid != nil {
		m.Objectid = o.Objectid()
	}
	if o.Priority != nil {
		m.Priority = o.Priority()
	}
	if o.Symbology != nil {
		m.Symbology = o.Symbology()
	}
	if o.ShapeArea != nil {
		m.ShapeArea = o.ShapeArea()
	}
	if o.ShapeLength != nil {
		m.ShapeLength = o.ShapeLength()
	}
	if o.Usetype != nil {
		m.Usetype = o.Usetype()
	}
	if o.Waterorigin != nil {
		m.Waterorigin = o.Waterorigin()
	}
	if o.Zone != nil {
		m.Zone = o.Zone()
	}
	if o.Zone2 != nil {
		m.Zone2 = o.Zone2()
	}
	if o.GeometryX != nil {
		m.GeometryX = o.GeometryX()
	}
	if o.GeometryY != nil {
		m.GeometryY = o.GeometryY()
	}
	if o.Updated != nil {
		m.Updated = o.Updated()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.FSPolygonlocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FSPolygonlocationTemplate.CreateMany
func (o FSPolygonlocationTemplate) BuildMany(number int) models.FSPolygonlocationSlice {
	m := make(models.FSPolygonlocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableFSPolygonlocation(m *models.FSPolygonlocationSetter) {
	if !(m.Objectid.IsValue()) {
		val := random_int32(nil)
		m.Objectid = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.FSPolygonlocation
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *FSPolygonlocationTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.FSPolygonlocation) error {
	var err error

	return err
}

// Create builds a fsPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *FSPolygonlocationTemplate) Create(ctx context.Context, exec bob.Executor) (*models.FSPolygonlocation, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableFSPolygonlocation(opt)

	m, err := models.FSPolygonlocations.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a fsPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *FSPolygonlocationTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.FSPolygonlocation {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a fsPolygonlocation and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *FSPolygonlocationTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.FSPolygonlocation {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple fsPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o FSPolygonlocationTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.FSPolygonlocationSlice, error) {
	var err error
	m := make(models.FSPolygonlocationSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple fsPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o FSPolygonlocationTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.FSPolygonlocationSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple fsPolygonlocations and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o FSPolygonlocationTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.FSPolygonlocationSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// FSPolygonlocation has methods that act as mods for the FSPolygonlocationTemplate
var FSPolygonlocationMods fsPolygonlocationMods

type fsPolygonlocationMods struct{}

func (m fsPolygonlocationMods) RandomizeAllColumns(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModSlice{
		FSPolygonlocationMods.RandomAccessdesc(f),
		FSPolygonlocationMods.RandomAcres(f),
		FSPolygonlocationMods.RandomActive(f),
		FSPolygonlocationMods.RandomComments(f),
		FSPolygonlocationMods.RandomCreationdate(f),
		FSPolygonlocationMods.RandomCreator(f),
		FSPolygonlocationMods.RandomDescription(f),
		FSPolygonlocationMods.RandomExternalid(f),
		FSPolygonlocationMods.RandomEditdate(f),
		FSPolygonlocationMods.RandomEditor(f),
		FSPolygonlocationMods.RandomFilter(f),
		FSPolygonlocationMods.RandomGlobalid(f),
		FSPolygonlocationMods.RandomHabitat(f),
		FSPolygonlocationMods.RandomHectares(f),
		FSPolygonlocationMods.RandomJurisdiction(f),
		FSPolygonlocationMods.RandomLarvinspectinterval(f),
		FSPolygonlocationMods.RandomLastinspectactiontaken(f),
		FSPolygonlocationMods.RandomLastinspectactivity(f),
		FSPolygonlocationMods.RandomLastinspectavglarvae(f),
		FSPolygonlocationMods.RandomLastinspectavgpupae(f),
		FSPolygonlocationMods.RandomLastinspectbreeding(f),
		FSPolygonlocationMods.RandomLastinspectconditions(f),
		FSPolygonlocationMods.RandomLastinspectdate(f),
		FSPolygonlocationMods.RandomLastinspectfieldspecies(f),
		FSPolygonlocationMods.RandomLastinspectlstages(f),
		FSPolygonlocationMods.RandomLasttreatactivity(f),
		FSPolygonlocationMods.RandomLasttreatdate(f),
		FSPolygonlocationMods.RandomLasttreatproduct(f),
		FSPolygonlocationMods.RandomLasttreatqty(f),
		FSPolygonlocationMods.RandomLasttreatqtyunit(f),
		FSPolygonlocationMods.RandomLocationnumber(f),
		FSPolygonlocationMods.RandomName(f),
		FSPolygonlocationMods.RandomNextactiondatescheduled(f),
		FSPolygonlocationMods.RandomObjectid(f),
		FSPolygonlocationMods.RandomPriority(f),
		FSPolygonlocationMods.RandomSymbology(f),
		FSPolygonlocationMods.RandomShapeArea(f),
		FSPolygonlocationMods.RandomShapeLength(f),
		FSPolygonlocationMods.RandomUsetype(f),
		FSPolygonlocationMods.RandomWaterorigin(f),
		FSPolygonlocationMods.RandomZone(f),
		FSPolygonlocationMods.RandomZone2(f),
		FSPolygonlocationMods.RandomGeometryX(f),
		FSPolygonlocationMods.RandomGeometryY(f),
		FSPolygonlocationMods.RandomUpdated(f),
	}
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Accessdesc(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) AccessdescFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Accessdesc = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetAccessdesc() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Accessdesc = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomAccessdesc(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomAccessdescNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Accessdesc = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Acres(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) AcresFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Acres = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetAcres() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Acres = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomAcres(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomAcresNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Acres = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Active(val null.Val[int16]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ActiveFunc(f func() null.Val[int16]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Active = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetActive() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Active = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomActive(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomActiveNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Active = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Comments(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) CommentsFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Comments = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetComments() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Comments = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomComments(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomCommentsNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Comments = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Creationdate(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) CreationdateFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creationdate = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetCreationdate() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creationdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomCreationdate(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomCreationdateNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creationdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Creator(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) CreatorFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creator = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetCreator() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creator = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomCreator(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomCreatorNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Creator = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Description(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Description = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) DescriptionFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetDescription() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomDescription(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomDescriptionNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Description = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Externalid(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ExternalidFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Externalid = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetExternalid() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Externalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomExternalid(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomExternalidNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Externalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Editdate(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) EditdateFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editdate = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetEditdate() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomEditdate(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomEditdateNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Editor(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) EditorFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editor = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetEditor() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editor = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomEditor(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomEditorNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Editor = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Filter(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) FilterFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Filter = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetFilter() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Filter = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomFilter(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomFilterNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Filter = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Globalid(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) GlobalidFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Globalid = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetGlobalid() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Globalid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomGlobalid(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomGlobalidNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Globalid = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Habitat(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) HabitatFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Habitat = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetHabitat() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Habitat = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomHabitat(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomHabitatNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Habitat = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Hectares(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) HectaresFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Hectares = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetHectares() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Hectares = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomHectares(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomHectaresNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Hectares = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Jurisdiction(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) JurisdictionFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Jurisdiction = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetJurisdiction() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Jurisdiction = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomJurisdiction(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomJurisdictionNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Jurisdiction = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Larvinspectinterval(val null.Val[int16]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LarvinspectintervalFunc(f func() null.Val[int16]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Larvinspectinterval = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLarvinspectinterval() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Larvinspectinterval = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLarvinspectinterval(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLarvinspectintervalNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Larvinspectinterval = func() null.Val[int16] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int16(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectactiontaken(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectactiontakenFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactiontaken = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectactiontaken() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactiontaken = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectactiontaken(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectactiontakenNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactiontaken = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectactivity(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectactivityFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactivity = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectactivity() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectactivity(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectactivityNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectavglarvae(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectavglarvaeFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavglarvae = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectavglarvae() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavglarvae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectavglarvae(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectavglarvaeNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavglarvae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectavgpupae(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectavgpupaeFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavgpupae = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectavgpupae() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavgpupae = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectavgpupae(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectavgpupaeNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectavgpupae = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectbreeding(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectbreedingFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectbreeding = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectbreeding() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectbreeding = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectbreeding(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectbreedingNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectbreeding = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectconditions(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectconditionsFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectconditions = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectconditions() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectconditions = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectconditions(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectconditionsNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectconditions = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectdate(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectdateFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectdate = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectdate() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectdate(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectdateNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectfieldspecies(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectfieldspeciesFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectfieldspecies() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectfieldspecies(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectfieldspeciesNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectfieldspecies = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lastinspectlstages(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LastinspectlstagesFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectlstages = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLastinspectlstages() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectlstages = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLastinspectlstages(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLastinspectlstagesNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lastinspectlstages = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lasttreatactivity(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LasttreatactivityFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatactivity = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLasttreatactivity() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatactivity = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLasttreatactivity(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLasttreatactivityNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatactivity = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lasttreatdate(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LasttreatdateFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatdate = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLasttreatdate() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatdate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLasttreatdate(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLasttreatdateNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatdate = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lasttreatproduct(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LasttreatproductFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatproduct = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLasttreatproduct() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatproduct = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLasttreatproduct(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLasttreatproductNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatproduct = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lasttreatqty(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LasttreatqtyFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqty = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLasttreatqty() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqty = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLasttreatqty(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLasttreatqtyNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqty = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Lasttreatqtyunit(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LasttreatqtyunitFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqtyunit = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLasttreatqtyunit() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqtyunit = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLasttreatqtyunit(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLasttreatqtyunitNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Lasttreatqtyunit = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Locationnumber(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) LocationnumberFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Locationnumber = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetLocationnumber() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Locationnumber = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomLocationnumber(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomLocationnumberNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Locationnumber = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Name(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) NameFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetName() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomName(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomNameNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Name = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Nextactiondatescheduled(val null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) NextactiondatescheduledFunc(f func() null.Val[int64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Nextactiondatescheduled = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetNextactiondatescheduled() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Nextactiondatescheduled = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomNextactiondatescheduled(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomNextactiondatescheduledNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Nextactiondatescheduled = func() null.Val[int64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Objectid(val int32) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Objectid = func() int32 { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ObjectidFunc(f func() int32) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Objectid = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetObjectid() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Objectid = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsPolygonlocationMods) RandomObjectid(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Objectid = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Priority(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) PriorityFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Priority = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetPriority() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Priority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomPriority(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomPriorityNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Priority = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Symbology(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) SymbologyFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Symbology = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetSymbology() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Symbology = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomSymbology(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomSymbologyNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Symbology = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) ShapeArea(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ShapeAreaFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeArea = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetShapeArea() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeArea = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomShapeArea(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomShapeAreaNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeArea = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) ShapeLength(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ShapeLengthFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeLength = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetShapeLength() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeLength = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomShapeLength(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomShapeLengthNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.ShapeLength = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Usetype(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) UsetypeFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Usetype = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetUsetype() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Usetype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomUsetype(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomUsetypeNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Usetype = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Waterorigin(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) WateroriginFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Waterorigin = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetWaterorigin() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Waterorigin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomWaterorigin(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomWateroriginNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Waterorigin = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Zone(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) ZoneFunc(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetZone() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomZone(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomZoneNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Zone2(val null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) Zone2Func(f func() null.Val[string]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone2 = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetZone2() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone2 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomZone2(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomZone2NotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Zone2 = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) GeometryX(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) GeometryXFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryX = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetGeometryX() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryX = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomGeometryX(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomGeometryXNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryX = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) GeometryY(val null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) GeometryYFunc(f func() null.Val[float64]) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryY = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetGeometryY() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryY = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m fsPolygonlocationMods) RandomGeometryY(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m fsPolygonlocationMods) RandomGeometryYNotNull(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.GeometryY = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m fsPolygonlocationMods) Updated(val time.Time) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Updated = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m fsPolygonlocationMods) UpdatedFunc(f func() time.Time) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Updated = f
	})
}

// Clear any values for the column
func (m fsPolygonlocationMods) UnsetUpdated() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Updated = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m fsPolygonlocationMods) RandomUpdated(f *faker.Faker) FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(_ context.Context, o *FSPolygonlocationTemplate) {
		o.Updated = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m fsPolygonlocationMods) WithParentsCascading() FSPolygonlocationMod {
	return FSPolygonlocationModFunc(func(ctx context.Context, o *FSPolygonlocationTemplate) {
		if isDone, _ := fsPolygonlocationWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = fsPolygonlocationWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
