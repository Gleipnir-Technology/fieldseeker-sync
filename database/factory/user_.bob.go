// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	enums "github.com/Gleipnir-Technology/fieldseeker-sync/database/enums"
	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(context.Context, *UserTemplate)
}

type UserModFunc func(context.Context, *UserTemplate)

func (f UserModFunc) Apply(ctx context.Context, n *UserTemplate) {
	f(ctx, n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(ctx context.Context, n *UserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID               func() int32
	DisplayName      func() null.Val[string]
	PasswordHashType func() null.Val[enums.Hashtype]
	PasswordHash     func() null.Val[string]
	Username         func() null.Val[string]

	r userR
	f *Factory

	alreadyPersisted bool
}

type userR struct {
	CreatorNoteAudios           []*userRCreatorNoteAudiosR
	DeletedByNoteAudios         []*userRDeletedByNoteAudiosR
	CreatorNoteImages           []*userRCreatorNoteImagesR
	CompletedByTaskAudioReviews []*userRCompletedByTaskAudioReviewsR
	ReviewedByTaskAudioReviews  []*userRReviewedByTaskAudioReviewsR
}

type userRCreatorNoteAudiosR struct {
	number int
	o      *NoteAudioTemplate
}
type userRDeletedByNoteAudiosR struct {
	number int
	o      *NoteAudioTemplate
}
type userRCreatorNoteImagesR struct {
	number int
	o      *NoteImageTemplate
}
type userRCompletedByTaskAudioReviewsR struct {
	number int
	o      *TaskAudioReviewTemplate
}
type userRReviewedByTaskAudioReviewsR struct {
	number int
	o      *TaskAudioReviewTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(ctx context.Context, mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.CreatorNoteAudios != nil {
		rel := models.NoteAudioSlice{}
		for _, r := range t.r.CreatorNoteAudios {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.Creator = o.ID // h2
				rel.R.CreatorUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CreatorNoteAudios = rel
	}

	if t.r.DeletedByNoteAudios != nil {
		rel := models.NoteAudioSlice{}
		for _, r := range t.r.DeletedByNoteAudios {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.DeletedBy = null.From(o.ID) // h2
				rel.R.DeletedByUser = o
			}
			rel = append(rel, related...)
		}
		o.R.DeletedByNoteAudios = rel
	}

	if t.r.CreatorNoteImages != nil {
		rel := models.NoteImageSlice{}
		for _, r := range t.r.CreatorNoteImages {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.Creator = o.ID // h2
				rel.R.CreatorUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CreatorNoteImages = rel
	}

	if t.r.CompletedByTaskAudioReviews != nil {
		rel := models.TaskAudioReviewSlice{}
		for _, r := range t.r.CompletedByTaskAudioReviews {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.CompletedBy = null.From(o.ID) // h2
				rel.R.CompletedByUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CompletedByTaskAudioReviews = rel
	}

	if t.r.ReviewedByTaskAudioReviews != nil {
		rel := models.TaskAudioReviewSlice{}
		for _, r := range t.r.ReviewedByTaskAudioReviews {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.ReviewedBy = null.From(o.ID) // h2
				rel.R.ReviewedByUser = o
			}
			rel = append(rel, related...)
		}
		o.R.ReviewedByTaskAudioReviews = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.DisplayName != nil {
		val := o.DisplayName()
		m.DisplayName = omitnull.FromNull(val)
	}
	if o.PasswordHashType != nil {
		val := o.PasswordHashType()
		m.PasswordHashType = omitnull.FromNull(val)
	}
	if o.PasswordHash != nil {
		val := o.PasswordHash()
		m.PasswordHash = omitnull.FromNull(val)
	}
	if o.Username != nil {
		val := o.Username()
		m.Username = omitnull.FromNull(val)
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.DisplayName != nil {
		m.DisplayName = o.DisplayName()
	}
	if o.PasswordHashType != nil {
		m.PasswordHashType = o.PasswordHashType()
	}
	if o.PasswordHash != nil {
		m.PasswordHash = o.PasswordHash()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) error {
	var err error

	isCreatorNoteAudiosDone, _ := userRelCreatorNoteAudiosCtx.Value(ctx)
	if !isCreatorNoteAudiosDone && o.r.CreatorNoteAudios != nil {
		ctx = userRelCreatorNoteAudiosCtx.WithValue(ctx, true)
		for _, r := range o.r.CreatorNoteAudios {
			if r.o.alreadyPersisted {
				m.R.CreatorNoteAudios = append(m.R.CreatorNoteAudios, r.o.Build())
			} else {
				rel0, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachCreatorNoteAudios(ctx, exec, rel0...)
				if err != nil {
					return err
				}
			}
		}
	}

	isDeletedByNoteAudiosDone, _ := userRelDeletedByNoteAudiosCtx.Value(ctx)
	if !isDeletedByNoteAudiosDone && o.r.DeletedByNoteAudios != nil {
		ctx = userRelDeletedByNoteAudiosCtx.WithValue(ctx, true)
		for _, r := range o.r.DeletedByNoteAudios {
			if r.o.alreadyPersisted {
				m.R.DeletedByNoteAudios = append(m.R.DeletedByNoteAudios, r.o.Build())
			} else {
				rel1, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachDeletedByNoteAudios(ctx, exec, rel1...)
				if err != nil {
					return err
				}
			}
		}
	}

	isCreatorNoteImagesDone, _ := userRelCreatorNoteImagesCtx.Value(ctx)
	if !isCreatorNoteImagesDone && o.r.CreatorNoteImages != nil {
		ctx = userRelCreatorNoteImagesCtx.WithValue(ctx, true)
		for _, r := range o.r.CreatorNoteImages {
			if r.o.alreadyPersisted {
				m.R.CreatorNoteImages = append(m.R.CreatorNoteImages, r.o.Build())
			} else {
				rel2, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachCreatorNoteImages(ctx, exec, rel2...)
				if err != nil {
					return err
				}
			}
		}
	}

	isCompletedByTaskAudioReviewsDone, _ := userRelCompletedByTaskAudioReviewsCtx.Value(ctx)
	if !isCompletedByTaskAudioReviewsDone && o.r.CompletedByTaskAudioReviews != nil {
		ctx = userRelCompletedByTaskAudioReviewsCtx.WithValue(ctx, true)
		for _, r := range o.r.CompletedByTaskAudioReviews {
			if r.o.alreadyPersisted {
				m.R.CompletedByTaskAudioReviews = append(m.R.CompletedByTaskAudioReviews, r.o.Build())
			} else {
				rel3, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachCompletedByTaskAudioReviews(ctx, exec, rel3...)
				if err != nil {
					return err
				}
			}
		}
	}

	isReviewedByTaskAudioReviewsDone, _ := userRelReviewedByTaskAudioReviewsCtx.Value(ctx)
	if !isReviewedByTaskAudioReviewsDone && o.r.ReviewedByTaskAudioReviews != nil {
		ctx = userRelReviewedByTaskAudioReviewsCtx.WithValue(ctx, true)
		for _, r := range o.r.ReviewedByTaskAudioReviews {
			if r.o.alreadyPersisted {
				m.R.ReviewedByTaskAudioReviews = append(m.R.ReviewedByTaskAudioReviews, r.o.Build())
			} else {
				rel4, err := r.o.CreateMany(ctx, exec, r.number)
				if err != nil {
					return err
				}

				err = m.AttachReviewedByTaskAudioReviews(ctx, exec, rel4...)
				if err != nil {
					return err
				}
			}
		}
	}

	return err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomDisplayName(f),
		UserMods.RandomPasswordHashType(f),
		UserMods.RandomPasswordHash(f),
		UserMods.RandomUsername(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val int32) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() int32) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) DisplayName(val null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DisplayName = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) DisplayNameFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DisplayName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDisplayName() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DisplayName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomDisplayName(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DisplayName = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "200")
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomDisplayNameNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.DisplayName = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f, "200")
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) PasswordHashType(val null.Val[enums.Hashtype]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHashType = func() null.Val[enums.Hashtype] { return val }
	})
}

// Set the Column from the function
func (m userMods) PasswordHashTypeFunc(f func() null.Val[enums.Hashtype]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHashType = f
	})
}

// Clear any values for the column
func (m userMods) UnsetPasswordHashType() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHashType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomPasswordHashType(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHashType = func() null.Val[enums.Hashtype] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_enums_Hashtype(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomPasswordHashTypeNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHashType = func() null.Val[enums.Hashtype] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_enums_Hashtype(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) PasswordHash(val null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHash = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) PasswordHashFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHash = f
	})
}

// Clear any values for the column
func (m userMods) UnsetPasswordHash() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHash = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomPasswordHash(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHash = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomPasswordHashNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.PasswordHash = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m userMods) Username(val null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userMods) UsernameFunc(f func() null.Val[string]) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUsername() UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m userMods) RandomUsername(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m userMods) RandomUsernameNotNull(f *faker.Faker) UserMod {
	return UserModFunc(func(_ context.Context, o *UserTemplate) {
		o.Username = func() null.Val[string] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_string(f)
			return null.From(val)
		}
	})
}

func (m userMods) WithParentsCascading() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		if isDone, _ := userWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = userWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m userMods) WithCreatorNoteAudios(number int, related *NoteAudioTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteAudios = []*userRCreatorNoteAudiosR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCreatorNoteAudios(number int, mods ...NoteAudioMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteAudioWithContext(ctx, mods...)
		m.WithCreatorNoteAudios(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddCreatorNoteAudios(number int, related *NoteAudioTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteAudios = append(o.r.CreatorNoteAudios, &userRCreatorNoteAudiosR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCreatorNoteAudios(number int, mods ...NoteAudioMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteAudioWithContext(ctx, mods...)
		m.AddCreatorNoteAudios(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingCreatorNoteAudios(existingModels ...*models.NoteAudio) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.CreatorNoteAudios = append(o.r.CreatorNoteAudios, &userRCreatorNoteAudiosR{
				o: o.f.FromExistingNoteAudio(em),
			})
		}
	})
}

func (m userMods) WithoutCreatorNoteAudios() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteAudios = nil
	})
}

func (m userMods) WithDeletedByNoteAudios(number int, related *NoteAudioTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.DeletedByNoteAudios = []*userRDeletedByNoteAudiosR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewDeletedByNoteAudios(number int, mods ...NoteAudioMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteAudioWithContext(ctx, mods...)
		m.WithDeletedByNoteAudios(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddDeletedByNoteAudios(number int, related *NoteAudioTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.DeletedByNoteAudios = append(o.r.DeletedByNoteAudios, &userRDeletedByNoteAudiosR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewDeletedByNoteAudios(number int, mods ...NoteAudioMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteAudioWithContext(ctx, mods...)
		m.AddDeletedByNoteAudios(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingDeletedByNoteAudios(existingModels ...*models.NoteAudio) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.DeletedByNoteAudios = append(o.r.DeletedByNoteAudios, &userRDeletedByNoteAudiosR{
				o: o.f.FromExistingNoteAudio(em),
			})
		}
	})
}

func (m userMods) WithoutDeletedByNoteAudios() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.DeletedByNoteAudios = nil
	})
}

func (m userMods) WithCreatorNoteImages(number int, related *NoteImageTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteImages = []*userRCreatorNoteImagesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCreatorNoteImages(number int, mods ...NoteImageMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteImageWithContext(ctx, mods...)
		m.WithCreatorNoteImages(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddCreatorNoteImages(number int, related *NoteImageTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteImages = append(o.r.CreatorNoteImages, &userRCreatorNoteImagesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCreatorNoteImages(number int, mods ...NoteImageMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewNoteImageWithContext(ctx, mods...)
		m.AddCreatorNoteImages(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingCreatorNoteImages(existingModels ...*models.NoteImage) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.CreatorNoteImages = append(o.r.CreatorNoteImages, &userRCreatorNoteImagesR{
				o: o.f.FromExistingNoteImage(em),
			})
		}
	})
}

func (m userMods) WithoutCreatorNoteImages() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CreatorNoteImages = nil
	})
}

func (m userMods) WithCompletedByTaskAudioReviews(number int, related *TaskAudioReviewTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CompletedByTaskAudioReviews = []*userRCompletedByTaskAudioReviewsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCompletedByTaskAudioReviews(number int, mods ...TaskAudioReviewMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewTaskAudioReviewWithContext(ctx, mods...)
		m.WithCompletedByTaskAudioReviews(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddCompletedByTaskAudioReviews(number int, related *TaskAudioReviewTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CompletedByTaskAudioReviews = append(o.r.CompletedByTaskAudioReviews, &userRCompletedByTaskAudioReviewsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCompletedByTaskAudioReviews(number int, mods ...TaskAudioReviewMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewTaskAudioReviewWithContext(ctx, mods...)
		m.AddCompletedByTaskAudioReviews(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingCompletedByTaskAudioReviews(existingModels ...*models.TaskAudioReview) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.CompletedByTaskAudioReviews = append(o.r.CompletedByTaskAudioReviews, &userRCompletedByTaskAudioReviewsR{
				o: o.f.FromExistingTaskAudioReview(em),
			})
		}
	})
}

func (m userMods) WithoutCompletedByTaskAudioReviews() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.CompletedByTaskAudioReviews = nil
	})
}

func (m userMods) WithReviewedByTaskAudioReviews(number int, related *TaskAudioReviewTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.ReviewedByTaskAudioReviews = []*userRReviewedByTaskAudioReviewsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewReviewedByTaskAudioReviews(number int, mods ...TaskAudioReviewMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewTaskAudioReviewWithContext(ctx, mods...)
		m.WithReviewedByTaskAudioReviews(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddReviewedByTaskAudioReviews(number int, related *TaskAudioReviewTemplate) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.ReviewedByTaskAudioReviews = append(o.r.ReviewedByTaskAudioReviews, &userRReviewedByTaskAudioReviewsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewReviewedByTaskAudioReviews(number int, mods ...TaskAudioReviewMod) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		related := o.f.NewTaskAudioReviewWithContext(ctx, mods...)
		m.AddReviewedByTaskAudioReviews(number, related).Apply(ctx, o)
	})
}

func (m userMods) AddExistingReviewedByTaskAudioReviews(existingModels ...*models.TaskAudioReview) UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		for _, em := range existingModels {
			o.r.ReviewedByTaskAudioReviews = append(o.r.ReviewedByTaskAudioReviews, &userRReviewedByTaskAudioReviewsR{
				o: o.f.FromExistingTaskAudioReview(em),
			})
		}
	})
}

func (m userMods) WithoutReviewedByTaskAudioReviews() UserMod {
	return UserModFunc(func(ctx context.Context, o *UserTemplate) {
		o.r.ReviewedByTaskAudioReviews = nil
	})
}
