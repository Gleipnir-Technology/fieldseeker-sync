// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type TaskAudioReviewMod interface {
	Apply(context.Context, *TaskAudioReviewTemplate)
}

type TaskAudioReviewModFunc func(context.Context, *TaskAudioReviewTemplate)

func (f TaskAudioReviewModFunc) Apply(ctx context.Context, n *TaskAudioReviewTemplate) {
	f(ctx, n)
}

type TaskAudioReviewModSlice []TaskAudioReviewMod

func (mods TaskAudioReviewModSlice) Apply(ctx context.Context, n *TaskAudioReviewTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// TaskAudioReviewTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TaskAudioReviewTemplate struct {
	ID               func() int32
	CompletedBy      func() null.Val[int32]
	Created          func() time.Time
	NeedsReview      func() bool
	NoteAudioUUID    func() string
	NoteAudioVersion func() int32
	ReviewedBy       func() null.Val[int32]

	r taskAudioReviewR
	f *Factory

	alreadyPersisted bool
}

type taskAudioReviewR struct {
	CompletedByUser *taskAudioReviewRCompletedByUserR
	NoteAudio       *taskAudioReviewRNoteAudioR
	ReviewedByUser  *taskAudioReviewRReviewedByUserR
}

type taskAudioReviewRCompletedByUserR struct {
	o *UserTemplate
}
type taskAudioReviewRNoteAudioR struct {
	o *NoteAudioTemplate
}
type taskAudioReviewRReviewedByUserR struct {
	o *UserTemplate
}

// Apply mods to the TaskAudioReviewTemplate
func (o *TaskAudioReviewTemplate) Apply(ctx context.Context, mods ...TaskAudioReviewMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.TaskAudioReview
// according to the relationships in the template. Nothing is inserted into the db
func (t TaskAudioReviewTemplate) setModelRels(o *models.TaskAudioReview) {
	if t.r.CompletedByUser != nil {
		rel := t.r.CompletedByUser.o.Build()
		rel.R.CompletedByTaskAudioReviews = append(rel.R.CompletedByTaskAudioReviews, o)
		o.CompletedBy = null.From(rel.ID) // h2
		o.R.CompletedByUser = rel
	}

	if t.r.NoteAudio != nil {
		rel := t.r.NoteAudio.o.Build()
		rel.R.TaskAudioReviews = append(rel.R.TaskAudioReviews, o)
		o.NoteAudioUUID = rel.UUID       // h2
		o.NoteAudioVersion = rel.Version // h2
		o.R.NoteAudio = rel
	}

	if t.r.ReviewedByUser != nil {
		rel := t.r.ReviewedByUser.o.Build()
		rel.R.ReviewedByTaskAudioReviews = append(rel.R.ReviewedByTaskAudioReviews, o)
		o.ReviewedBy = null.From(rel.ID) // h2
		o.R.ReviewedByUser = rel
	}
}

// BuildSetter returns an *models.TaskAudioReviewSetter
// this does nothing with the relationship templates
func (o TaskAudioReviewTemplate) BuildSetter() *models.TaskAudioReviewSetter {
	m := &models.TaskAudioReviewSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.CompletedBy != nil {
		val := o.CompletedBy()
		m.CompletedBy = omitnull.FromNull(val)
	}
	if o.Created != nil {
		val := o.Created()
		m.Created = omit.From(val)
	}
	if o.NeedsReview != nil {
		val := o.NeedsReview()
		m.NeedsReview = omit.From(val)
	}
	if o.NoteAudioUUID != nil {
		val := o.NoteAudioUUID()
		m.NoteAudioUUID = omit.From(val)
	}
	if o.NoteAudioVersion != nil {
		val := o.NoteAudioVersion()
		m.NoteAudioVersion = omit.From(val)
	}
	if o.ReviewedBy != nil {
		val := o.ReviewedBy()
		m.ReviewedBy = omitnull.FromNull(val)
	}

	return m
}

// BuildManySetter returns an []*models.TaskAudioReviewSetter
// this does nothing with the relationship templates
func (o TaskAudioReviewTemplate) BuildManySetter(number int) []*models.TaskAudioReviewSetter {
	m := make([]*models.TaskAudioReviewSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.TaskAudioReview
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskAudioReviewTemplate.Create
func (o TaskAudioReviewTemplate) Build() *models.TaskAudioReview {
	m := &models.TaskAudioReview{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.CompletedBy != nil {
		m.CompletedBy = o.CompletedBy()
	}
	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.NeedsReview != nil {
		m.NeedsReview = o.NeedsReview()
	}
	if o.NoteAudioUUID != nil {
		m.NoteAudioUUID = o.NoteAudioUUID()
	}
	if o.NoteAudioVersion != nil {
		m.NoteAudioVersion = o.NoteAudioVersion()
	}
	if o.ReviewedBy != nil {
		m.ReviewedBy = o.ReviewedBy()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TaskAudioReviewSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TaskAudioReviewTemplate.CreateMany
func (o TaskAudioReviewTemplate) BuildMany(number int) models.TaskAudioReviewSlice {
	m := make(models.TaskAudioReviewSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTaskAudioReview(m *models.TaskAudioReviewSetter) {
	if !(m.Created.IsValue()) {
		val := random_time_Time(nil)
		m.Created = omit.From(val)
	}
	if !(m.NeedsReview.IsValue()) {
		val := random_bool(nil)
		m.NeedsReview = omit.From(val)
	}
	if !(m.NoteAudioUUID.IsValue()) {
		val := random_string(nil)
		m.NoteAudioUUID = omit.From(val)
	}
	if !(m.NoteAudioVersion.IsValue()) {
		val := random_int32(nil)
		m.NoteAudioVersion = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.TaskAudioReview
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TaskAudioReviewTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.TaskAudioReview) error {
	var err error

	isCompletedByUserDone, _ := taskAudioReviewRelCompletedByUserCtx.Value(ctx)
	if !isCompletedByUserDone && o.r.CompletedByUser != nil {
		ctx = taskAudioReviewRelCompletedByUserCtx.WithValue(ctx, true)
		if o.r.CompletedByUser.o.alreadyPersisted {
			m.R.CompletedByUser = o.r.CompletedByUser.o.Build()
		} else {
			var rel0 *models.User
			rel0, err = o.r.CompletedByUser.o.Create(ctx, exec)
			if err != nil {
				return err
			}
			err = m.AttachCompletedByUser(ctx, exec, rel0)
			if err != nil {
				return err
			}
		}

	}

	isReviewedByUserDone, _ := taskAudioReviewRelReviewedByUserCtx.Value(ctx)
	if !isReviewedByUserDone && o.r.ReviewedByUser != nil {
		ctx = taskAudioReviewRelReviewedByUserCtx.WithValue(ctx, true)
		if o.r.ReviewedByUser.o.alreadyPersisted {
			m.R.ReviewedByUser = o.r.ReviewedByUser.o.Build()
		} else {
			var rel2 *models.User
			rel2, err = o.r.ReviewedByUser.o.Create(ctx, exec)
			if err != nil {
				return err
			}
			err = m.AttachReviewedByUser(ctx, exec, rel2)
			if err != nil {
				return err
			}
		}

	}

	return err
}

// Create builds a taskAudioReview and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TaskAudioReviewTemplate) Create(ctx context.Context, exec bob.Executor) (*models.TaskAudioReview, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTaskAudioReview(opt)

	if o.r.NoteAudio == nil {
		TaskAudioReviewMods.WithNewNoteAudio().Apply(ctx, o)
	}

	var rel1 *models.NoteAudio

	if o.r.NoteAudio.o.alreadyPersisted {
		rel1 = o.r.NoteAudio.o.Build()
	} else {
		rel1, err = o.r.NoteAudio.o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	opt.NoteAudioUUID = omit.From(rel1.UUID)
	opt.NoteAudioVersion = omit.From(rel1.Version)

	m, err := models.TaskAudioReviews.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	m.R.NoteAudio = rel1

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a taskAudioReview and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TaskAudioReviewTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.TaskAudioReview {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a taskAudioReview and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TaskAudioReviewTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.TaskAudioReview {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple taskAudioReviews and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TaskAudioReviewTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TaskAudioReviewSlice, error) {
	var err error
	m := make(models.TaskAudioReviewSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple taskAudioReviews and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TaskAudioReviewTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TaskAudioReviewSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple taskAudioReviews and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TaskAudioReviewTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TaskAudioReviewSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// TaskAudioReview has methods that act as mods for the TaskAudioReviewTemplate
var TaskAudioReviewMods taskAudioReviewMods

type taskAudioReviewMods struct{}

func (m taskAudioReviewMods) RandomizeAllColumns(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModSlice{
		TaskAudioReviewMods.RandomID(f),
		TaskAudioReviewMods.RandomCompletedBy(f),
		TaskAudioReviewMods.RandomCreated(f),
		TaskAudioReviewMods.RandomNeedsReview(f),
		TaskAudioReviewMods.RandomNoteAudioUUID(f),
		TaskAudioReviewMods.RandomNoteAudioVersion(f),
		TaskAudioReviewMods.RandomReviewedBy(f),
	}
}

// Set the model columns to this value
func (m taskAudioReviewMods) ID(val int32) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) IDFunc(f func() int32) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetID() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskAudioReviewMods) RandomID(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ID = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) CompletedBy(val null.Val[int32]) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.CompletedBy = func() null.Val[int32] { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) CompletedByFunc(f func() null.Val[int32]) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.CompletedBy = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetCompletedBy() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.CompletedBy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m taskAudioReviewMods) RandomCompletedBy(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.CompletedBy = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m taskAudioReviewMods) RandomCompletedByNotNull(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.CompletedBy = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) Created(val time.Time) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.Created = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) CreatedFunc(f func() time.Time) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetCreated() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskAudioReviewMods) RandomCreated(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.Created = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) NeedsReview(val bool) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NeedsReview = func() bool { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) NeedsReviewFunc(f func() bool) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NeedsReview = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetNeedsReview() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NeedsReview = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskAudioReviewMods) RandomNeedsReview(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NeedsReview = func() bool {
			return random_bool(f)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) NoteAudioUUID(val string) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioUUID = func() string { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) NoteAudioUUIDFunc(f func() string) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioUUID = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetNoteAudioUUID() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioUUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskAudioReviewMods) RandomNoteAudioUUID(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioUUID = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) NoteAudioVersion(val int32) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioVersion = func() int32 { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) NoteAudioVersionFunc(f func() int32) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioVersion = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetNoteAudioVersion() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioVersion = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m taskAudioReviewMods) RandomNoteAudioVersion(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.NoteAudioVersion = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m taskAudioReviewMods) ReviewedBy(val null.Val[int32]) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ReviewedBy = func() null.Val[int32] { return val }
	})
}

// Set the Column from the function
func (m taskAudioReviewMods) ReviewedByFunc(f func() null.Val[int32]) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ReviewedBy = f
	})
}

// Clear any values for the column
func (m taskAudioReviewMods) UnsetReviewedBy() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ReviewedBy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m taskAudioReviewMods) RandomReviewedBy(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ReviewedBy = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m taskAudioReviewMods) RandomReviewedByNotNull(f *faker.Faker) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(_ context.Context, o *TaskAudioReviewTemplate) {
		o.ReviewedBy = func() null.Val[int32] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_int32(f)
			return null.From(val)
		}
	})
}

func (m taskAudioReviewMods) WithParentsCascading() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		if isDone, _ := taskAudioReviewWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = taskAudioReviewWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithCompletedByUser(related).Apply(ctx, o)
		}
		{

			related := o.f.NewNoteAudioWithContext(ctx, NoteAudioMods.WithParentsCascading())
			m.WithNoteAudio(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithReviewedByUser(related).Apply(ctx, o)
		}
	})
}

func (m taskAudioReviewMods) WithCompletedByUser(rel *UserTemplate) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.CompletedByUser = &taskAudioReviewRCompletedByUserR{
			o: rel,
		}
	})
}

func (m taskAudioReviewMods) WithNewCompletedByUser(mods ...UserMod) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithCompletedByUser(related).Apply(ctx, o)
	})
}

func (m taskAudioReviewMods) WithExistingCompletedByUser(em *models.User) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.CompletedByUser = &taskAudioReviewRCompletedByUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m taskAudioReviewMods) WithoutCompletedByUser() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.CompletedByUser = nil
	})
}

func (m taskAudioReviewMods) WithNoteAudio(rel *NoteAudioTemplate) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.NoteAudio = &taskAudioReviewRNoteAudioR{
			o: rel,
		}
	})
}

func (m taskAudioReviewMods) WithNewNoteAudio(mods ...NoteAudioMod) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		related := o.f.NewNoteAudioWithContext(ctx, mods...)

		m.WithNoteAudio(related).Apply(ctx, o)
	})
}

func (m taskAudioReviewMods) WithExistingNoteAudio(em *models.NoteAudio) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.NoteAudio = &taskAudioReviewRNoteAudioR{
			o: o.f.FromExistingNoteAudio(em),
		}
	})
}

func (m taskAudioReviewMods) WithoutNoteAudio() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.NoteAudio = nil
	})
}

func (m taskAudioReviewMods) WithReviewedByUser(rel *UserTemplate) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.ReviewedByUser = &taskAudioReviewRReviewedByUserR{
			o: rel,
		}
	})
}

func (m taskAudioReviewMods) WithNewReviewedByUser(mods ...UserMod) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithReviewedByUser(related).Apply(ctx, o)
	})
}

func (m taskAudioReviewMods) WithExistingReviewedByUser(em *models.User) TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.ReviewedByUser = &taskAudioReviewRReviewedByUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m taskAudioReviewMods) WithoutReviewedByUser() TaskAudioReviewMod {
	return TaskAudioReviewModFunc(func(ctx context.Context, o *TaskAudioReviewTemplate) {
		o.r.ReviewedByUser = nil
	})
}
