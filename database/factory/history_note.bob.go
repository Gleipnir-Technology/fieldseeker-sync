// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "github.com/Gleipnir-Technology/fieldseeker-sync/database/models"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type HistoryNoteMod interface {
	Apply(context.Context, *HistoryNoteTemplate)
}

type HistoryNoteModFunc func(context.Context, *HistoryNoteTemplate)

func (f HistoryNoteModFunc) Apply(ctx context.Context, n *HistoryNoteTemplate) {
	f(ctx, n)
}

type HistoryNoteModSlice []HistoryNoteMod

func (mods HistoryNoteModSlice) Apply(ctx context.Context, n *HistoryNoteTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// HistoryNoteTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type HistoryNoteTemplate struct {
	Created   func() null.Val[time.Time]
	Latitude  func() null.Val[float64]
	Longitude func() null.Val[float64]
	Text      func() string
	Version   func() int32
	UUID      func() string

	f *Factory

	alreadyPersisted bool
}

// Apply mods to the HistoryNoteTemplate
func (o *HistoryNoteTemplate) Apply(ctx context.Context, mods ...HistoryNoteMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.HistoryNote
// according to the relationships in the template. Nothing is inserted into the db
func (t HistoryNoteTemplate) setModelRels(o *models.HistoryNote) {}

// BuildSetter returns an *models.HistoryNoteSetter
// this does nothing with the relationship templates
func (o HistoryNoteTemplate) BuildSetter() *models.HistoryNoteSetter {
	m := &models.HistoryNoteSetter{}

	if o.Created != nil {
		val := o.Created()
		m.Created = omitnull.FromNull(val)
	}
	if o.Latitude != nil {
		val := o.Latitude()
		m.Latitude = omitnull.FromNull(val)
	}
	if o.Longitude != nil {
		val := o.Longitude()
		m.Longitude = omitnull.FromNull(val)
	}
	if o.Text != nil {
		val := o.Text()
		m.Text = omit.From(val)
	}
	if o.Version != nil {
		val := o.Version()
		m.Version = omit.From(val)
	}
	if o.UUID != nil {
		val := o.UUID()
		m.UUID = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.HistoryNoteSetter
// this does nothing with the relationship templates
func (o HistoryNoteTemplate) BuildManySetter(number int) []*models.HistoryNoteSetter {
	m := make([]*models.HistoryNoteSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.HistoryNote
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryNoteTemplate.Create
func (o HistoryNoteTemplate) Build() *models.HistoryNote {
	m := &models.HistoryNote{}

	if o.Created != nil {
		m.Created = o.Created()
	}
	if o.Latitude != nil {
		m.Latitude = o.Latitude()
	}
	if o.Longitude != nil {
		m.Longitude = o.Longitude()
	}
	if o.Text != nil {
		m.Text = o.Text()
	}
	if o.Version != nil {
		m.Version = o.Version()
	}
	if o.UUID != nil {
		m.UUID = o.UUID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.HistoryNoteSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use HistoryNoteTemplate.CreateMany
func (o HistoryNoteTemplate) BuildMany(number int) models.HistoryNoteSlice {
	m := make(models.HistoryNoteSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableHistoryNote(m *models.HistoryNoteSetter) {
	if !(m.Text.IsValue()) {
		val := random_string(nil)
		m.Text = omit.From(val)
	}
	if !(m.Version.IsValue()) {
		val := random_int32(nil)
		m.Version = omit.From(val)
	}
	if !(m.UUID.IsValue()) {
		val := random_string(nil)
		m.UUID = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.HistoryNote
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *HistoryNoteTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.HistoryNote) error {
	var err error

	return err
}

// Create builds a historyNote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *HistoryNoteTemplate) Create(ctx context.Context, exec bob.Executor) (*models.HistoryNote, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableHistoryNote(opt)

	m, err := models.HistoryNotes.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a historyNote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *HistoryNoteTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.HistoryNote {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a historyNote and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *HistoryNoteTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.HistoryNote {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple historyNotes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o HistoryNoteTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.HistoryNoteSlice, error) {
	var err error
	m := make(models.HistoryNoteSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple historyNotes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o HistoryNoteTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.HistoryNoteSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple historyNotes and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o HistoryNoteTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.HistoryNoteSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// HistoryNote has methods that act as mods for the HistoryNoteTemplate
var HistoryNoteMods historyNoteMods

type historyNoteMods struct{}

func (m historyNoteMods) RandomizeAllColumns(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModSlice{
		HistoryNoteMods.RandomCreated(f),
		HistoryNoteMods.RandomLatitude(f),
		HistoryNoteMods.RandomLongitude(f),
		HistoryNoteMods.RandomText(f),
		HistoryNoteMods.RandomVersion(f),
		HistoryNoteMods.RandomUUID(f),
	}
}

// Set the model columns to this value
func (m historyNoteMods) Created(val null.Val[time.Time]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Created = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) CreatedFunc(f func() null.Val[time.Time]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Created = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetCreated() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Created = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteMods) RandomCreated(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteMods) RandomCreatedNotNull(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Created = func() null.Val[time.Time] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_time_Time(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteMods) Latitude(val null.Val[float64]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Latitude = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) LatitudeFunc(f func() null.Val[float64]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Latitude = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetLatitude() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Latitude = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteMods) RandomLatitude(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Latitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteMods) RandomLatitudeNotNull(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Latitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteMods) Longitude(val null.Val[float64]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Longitude = func() null.Val[float64] { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) LongitudeFunc(f func() null.Val[float64]) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Longitude = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetLongitude() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Longitude = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is sometimes null
func (m historyNoteMods) RandomLongitude(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Longitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
// The generated value is never null
func (m historyNoteMods) RandomLongitudeNotNull(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Longitude = func() null.Val[float64] {
			if f == nil {
				f = &defaultFaker
			}

			val := random_float64(f)
			return null.From(val)
		}
	})
}

// Set the model columns to this value
func (m historyNoteMods) Text(val string) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Text = func() string { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) TextFunc(f func() string) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Text = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetText() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Text = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteMods) RandomText(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Text = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m historyNoteMods) Version(val int32) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Version = func() int32 { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) VersionFunc(f func() int32) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Version = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetVersion() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Version = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteMods) RandomVersion(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.Version = func() int32 {
			return random_int32(f)
		}
	})
}

// Set the model columns to this value
func (m historyNoteMods) UUID(val string) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.UUID = func() string { return val }
	})
}

// Set the Column from the function
func (m historyNoteMods) UUIDFunc(f func() string) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.UUID = f
	})
}

// Clear any values for the column
func (m historyNoteMods) UnsetUUID() HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.UUID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m historyNoteMods) RandomUUID(f *faker.Faker) HistoryNoteMod {
	return HistoryNoteModFunc(func(_ context.Context, o *HistoryNoteTemplate) {
		o.UUID = func() string {
			return random_string(f)
		}
	})
}

func (m historyNoteMods) WithParentsCascading() HistoryNoteMod {
	return HistoryNoteModFunc(func(ctx context.Context, o *HistoryNoteTemplate) {
		if isDone, _ := historyNoteWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = historyNoteWithParentsCascadingCtx.WithValue(ctx, true)
	})
}
