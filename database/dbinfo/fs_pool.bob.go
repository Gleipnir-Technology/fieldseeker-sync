// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var FSPools = Table[
	fsPoolColumns,
	fsPoolIndexes,
	fsPoolForeignKeys,
	fsPoolUniques,
	fsPoolChecks,
]{
	Schema: "",
	Name:   "fs_pool",
	Columns: fsPoolColumns{
		Comments: column{
			Name:      "comments",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Creationdate: column{
			Name:      "creationdate",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Creator: column{
			Name:      "creator",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Datesent: column{
			Name:      "datesent",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Datetested: column{
			Name:      "datetested",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Diseasepos: column{
			Name:      "diseasepos",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Diseasetested: column{
			Name:      "diseasetested",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Editdate: column{
			Name:      "editdate",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Editor: column{
			Name:      "editor",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Gatewaysync: column{
			Name:      "gatewaysync",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Globalid: column{
			Name:      "globalid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Lab: column{
			Name:      "lab",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		LabID: column{
			Name:      "lab_id",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Objectid: column{
			Name:      "objectid",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Poolyear: column{
			Name:      "poolyear",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Processed: column{
			Name:      "processed",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Sampleid: column{
			Name:      "sampleid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Survtech: column{
			Name:      "survtech",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Testmethod: column{
			Name:      "testmethod",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Testtech: column{
			Name:      "testtech",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		TrapdataID: column{
			Name:      "trapdata_id",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedDate: column{
			Name:      "created_date",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedUser: column{
			Name:      "created_user",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		GeometryX: column{
			Name:      "geometry_x",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		GeometryY: column{
			Name:      "geometry_y",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		LastEditedDate: column{
			Name:      "last_edited_date",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		LastEditedUser: column{
			Name:      "last_edited_user",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Vectorsurvcollectionid: column{
			Name:      "vectorsurvcollectionid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Vectorsurvpoolid: column{
			Name:      "vectorsurvpoolid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Vectorsurvtrapdataid: column{
			Name:      "vectorsurvtrapdataid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Updated: column{
			Name:      "updated",
			DBType:    "timestamp without time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: fsPoolIndexes{
		FSPoolPkey: index{
			Type: "btree",
			Name: "fs_pool_pkey",
			Columns: []indexColumn{
				{
					Name:         "objectid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "fs_pool_pkey",
		Columns: []string{"objectid"},
		Comment: "",
	},

	Comment: "",
}

type fsPoolColumns struct {
	Comments               column
	Creationdate           column
	Creator                column
	Datesent               column
	Datetested             column
	Diseasepos             column
	Diseasetested          column
	Editdate               column
	Editor                 column
	Gatewaysync            column
	Globalid               column
	Lab                    column
	LabID                  column
	Objectid               column
	Poolyear               column
	Processed              column
	Sampleid               column
	Survtech               column
	Testmethod             column
	Testtech               column
	TrapdataID             column
	CreatedDate            column
	CreatedUser            column
	GeometryX              column
	GeometryY              column
	LastEditedDate         column
	LastEditedUser         column
	Vectorsurvcollectionid column
	Vectorsurvpoolid       column
	Vectorsurvtrapdataid   column
	Updated                column
}

func (c fsPoolColumns) AsSlice() []column {
	return []column{
		c.Comments, c.Creationdate, c.Creator, c.Datesent, c.Datetested, c.Diseasepos, c.Diseasetested, c.Editdate, c.Editor, c.Gatewaysync, c.Globalid, c.Lab, c.LabID, c.Objectid, c.Poolyear, c.Processed, c.Sampleid, c.Survtech, c.Testmethod, c.Testtech, c.TrapdataID, c.CreatedDate, c.CreatedUser, c.GeometryX, c.GeometryY, c.LastEditedDate, c.LastEditedUser, c.Vectorsurvcollectionid, c.Vectorsurvpoolid, c.Vectorsurvtrapdataid, c.Updated,
	}
}

type fsPoolIndexes struct {
	FSPoolPkey index
}

func (i fsPoolIndexes) AsSlice() []index {
	return []index{
		i.FSPoolPkey,
	}
}

type fsPoolForeignKeys struct{}

func (f fsPoolForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type fsPoolUniques struct{}

func (u fsPoolUniques) AsSlice() []constraint {
	return []constraint{}
}

type fsPoolChecks struct{}

func (c fsPoolChecks) AsSlice() []check {
	return []check{}
}
