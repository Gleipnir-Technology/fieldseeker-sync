// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var NoteAudios = Table[
	noteAudioColumns,
	noteAudioIndexes,
	noteAudioForeignKeys,
	noteAudioUniques,
	noteAudioChecks,
]{
	Schema: "",
	Name:   "note_audio",
	Columns: noteAudioColumns{
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Deleted: column{
			Name:      "deleted",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Duration: column{
			Name:      "duration",
			DBType:    "real",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Transcription: column{
			Name:      "transcription",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Version: column{
			Name:      "version",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UUID: column{
			Name:      "uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Creator: column{
			Name:      "creator",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		TranscriptionUserEdited: column{
			Name:      "transcription_user_edited",
			DBType:    "boolean",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IsAudioNormalized: column{
			Name:      "is_audio_normalized",
			DBType:    "boolean",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IsTranscodedToOgg: column{
			Name:      "is_transcoded_to_ogg",
			DBType:    "boolean",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		DeletedBy: column{
			Name:      "deleted_by",
			DBType:    "integer",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: noteAudioIndexes{
		NoteAudioPkey: index{
			Type: "btree",
			Name: "note_audio_pkey",
			Columns: []indexColumn{
				{
					Name:         "version",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
				{
					Name:         "uuid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false, false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "note_audio_pkey",
		Columns: []string{"version", "uuid"},
		Comment: "",
	},
	ForeignKeys: noteAudioForeignKeys{
		NoteAudioNoteAudioCreatorFkey: foreignKey{
			constraint: constraint{
				Name:    "note_audio.note_audio_creator_fkey",
				Columns: []string{"creator"},
				Comment: "",
			},
			ForeignTable:   "user_",
			ForeignColumns: []string{"id"},
		},
		NoteAudioNoteAudioDeletedByFkey: foreignKey{
			constraint: constraint{
				Name:    "note_audio.note_audio_deleted_by_fkey",
				Columns: []string{"deleted_by"},
				Comment: "",
			},
			ForeignTable:   "user_",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type noteAudioColumns struct {
	Created                 column
	Deleted                 column
	Duration                column
	Transcription           column
	Version                 column
	UUID                    column
	Creator                 column
	TranscriptionUserEdited column
	IsAudioNormalized       column
	IsTranscodedToOgg       column
	DeletedBy               column
}

func (c noteAudioColumns) AsSlice() []column {
	return []column{
		c.Created, c.Deleted, c.Duration, c.Transcription, c.Version, c.UUID, c.Creator, c.TranscriptionUserEdited, c.IsAudioNormalized, c.IsTranscodedToOgg, c.DeletedBy,
	}
}

type noteAudioIndexes struct {
	NoteAudioPkey index
}

func (i noteAudioIndexes) AsSlice() []index {
	return []index{
		i.NoteAudioPkey,
	}
}

type noteAudioForeignKeys struct {
	NoteAudioNoteAudioCreatorFkey   foreignKey
	NoteAudioNoteAudioDeletedByFkey foreignKey
}

func (f noteAudioForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.NoteAudioNoteAudioCreatorFkey, f.NoteAudioNoteAudioDeletedByFkey,
	}
}

type noteAudioUniques struct{}

func (u noteAudioUniques) AsSlice() []constraint {
	return []constraint{}
}

type noteAudioChecks struct{}

func (c noteAudioChecks) AsSlice() []check {
	return []check{}
}
