// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var TaskAudioReviews = Table[
	taskAudioReviewColumns,
	taskAudioReviewIndexes,
	taskAudioReviewForeignKeys,
	taskAudioReviewUniques,
	taskAudioReviewChecks,
]{
	Schema: "",
	Name:   "task_audio_review",
	Columns: taskAudioReviewColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('task_audio_review_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CompletedBy: column{
			Name:      "completed_by",
			DBType:    "integer",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NeedsReview: column{
			Name:      "needs_review",
			DBType:    "boolean",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteAudioUUID: column{
			Name:      "note_audio_uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteAudioVersion: column{
			Name:      "note_audio_version",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		ReviewedBy: column{
			Name:      "reviewed_by",
			DBType:    "integer",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: taskAudioReviewIndexes{
		TaskAudioReviewPkey: index{
			Type: "btree",
			Name: "task_audio_review_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "task_audio_review_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: taskAudioReviewForeignKeys{
		TaskAudioReviewTaskAudioReviewCompletedByFkey: foreignKey{
			constraint: constraint{
				Name:    "task_audio_review.task_audio_review_completed_by_fkey",
				Columns: []string{"completed_by"},
				Comment: "",
			},
			ForeignTable:   "user_",
			ForeignColumns: []string{"id"},
		},
		TaskAudioReviewTaskAudioReviewNoteAudioUUIDNoteAudioVersionFkey: foreignKey{
			constraint: constraint{
				Name:    "task_audio_review.task_audio_review_note_audio_uuid_note_audio_version_fkey",
				Columns: []string{"note_audio_uuid", "note_audio_version"},
				Comment: "",
			},
			ForeignTable:   "note_audio",
			ForeignColumns: []string{"uuid", "version"},
		},
		TaskAudioReviewTaskAudioReviewReviewedByFkey: foreignKey{
			constraint: constraint{
				Name:    "task_audio_review.task_audio_review_reviewed_by_fkey",
				Columns: []string{"reviewed_by"},
				Comment: "",
			},
			ForeignTable:   "user_",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type taskAudioReviewColumns struct {
	ID               column
	CompletedBy      column
	Created          column
	NeedsReview      column
	NoteAudioUUID    column
	NoteAudioVersion column
	ReviewedBy       column
}

func (c taskAudioReviewColumns) AsSlice() []column {
	return []column{
		c.ID, c.CompletedBy, c.Created, c.NeedsReview, c.NoteAudioUUID, c.NoteAudioVersion, c.ReviewedBy,
	}
}

type taskAudioReviewIndexes struct {
	TaskAudioReviewPkey index
}

func (i taskAudioReviewIndexes) AsSlice() []index {
	return []index{
		i.TaskAudioReviewPkey,
	}
}

type taskAudioReviewForeignKeys struct {
	TaskAudioReviewTaskAudioReviewCompletedByFkey                   foreignKey
	TaskAudioReviewTaskAudioReviewNoteAudioUUIDNoteAudioVersionFkey foreignKey
	TaskAudioReviewTaskAudioReviewReviewedByFkey                    foreignKey
}

func (f taskAudioReviewForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.TaskAudioReviewTaskAudioReviewCompletedByFkey, f.TaskAudioReviewTaskAudioReviewNoteAudioUUIDNoteAudioVersionFkey, f.TaskAudioReviewTaskAudioReviewReviewedByFkey,
	}
}

type taskAudioReviewUniques struct{}

func (u taskAudioReviewUniques) AsSlice() []constraint {
	return []constraint{}
}

type taskAudioReviewChecks struct{}

func (c taskAudioReviewChecks) AsSlice() []check {
	return []check{}
}
