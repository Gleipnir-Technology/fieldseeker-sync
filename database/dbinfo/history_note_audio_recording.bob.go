// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var HistoryNoteAudioRecordings = Table[
	historyNoteAudioRecordingColumns,
	historyNoteAudioRecordingIndexes,
	historyNoteAudioRecordingForeignKeys,
	historyNoteAudioRecordingUniques,
	historyNoteAudioRecordingChecks,
]{
	Schema: "",
	Name:   "history_note_audio_recording",
	Columns: historyNoteAudioRecordingColumns{
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Duration: column{
			Name:      "duration",
			DBType:    "interval",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteUUID: column{
			Name:      "note_uuid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Transcript: column{
			Name:      "transcript",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		UUID: column{
			Name:      "uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Version: column{
			Name:      "version",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: historyNoteAudioRecordingIndexes{
		HistoryNoteAudioRecordingPkey: index{
			Type: "btree",
			Name: "history_note_audio_recording_pkey",
			Columns: []indexColumn{
				{
					Name:         "uuid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
				{
					Name:         "version",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false, false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "history_note_audio_recording_pkey",
		Columns: []string{"uuid", "version"},
		Comment: "",
	},
	ForeignKeys: historyNoteAudioRecordingForeignKeys{
		HistoryNoteAudioRecordingHistoryNoteAudioRecordingNoteUUIDFkey: foreignKey{
			constraint: constraint{
				Name:    "history_note_audio_recording.history_note_audio_recording_note_uuid_fkey",
				Columns: []string{"note_uuid"},
				Comment: "",
			},
			ForeignTable:   "note",
			ForeignColumns: []string{"uuid"},
		},
	},

	Comment: "",
}

type historyNoteAudioRecordingColumns struct {
	Created    column
	Duration   column
	NoteUUID   column
	Transcript column
	UUID       column
	Version    column
}

func (c historyNoteAudioRecordingColumns) AsSlice() []column {
	return []column{
		c.Created, c.Duration, c.NoteUUID, c.Transcript, c.UUID, c.Version,
	}
}

type historyNoteAudioRecordingIndexes struct {
	HistoryNoteAudioRecordingPkey index
}

func (i historyNoteAudioRecordingIndexes) AsSlice() []index {
	return []index{
		i.HistoryNoteAudioRecordingPkey,
	}
}

type historyNoteAudioRecordingForeignKeys struct {
	HistoryNoteAudioRecordingHistoryNoteAudioRecordingNoteUUIDFkey foreignKey
}

func (f historyNoteAudioRecordingForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.HistoryNoteAudioRecordingHistoryNoteAudioRecordingNoteUUIDFkey,
	}
}

type historyNoteAudioRecordingUniques struct{}

func (u historyNoteAudioRecordingUniques) AsSlice() []constraint {
	return []constraint{}
}

type historyNoteAudioRecordingChecks struct{}

func (c historyNoteAudioRecordingChecks) AsSlice() []check {
	return []check{}
}
