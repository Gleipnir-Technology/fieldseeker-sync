// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Notes = Table[
	noteColumns,
	noteIndexes,
	noteForeignKeys,
	noteUniques,
	noteChecks,
]{
	Schema: "",
	Name:   "note",
	Columns: noteColumns{
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Deleted: column{
			Name:      "deleted",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Latitude: column{
			Name:      "latitude",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Longitude: column{
			Name:      "longitude",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Text: column{
			Name:      "text",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Updated: column{
			Name:      "updated",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		UUID: column{
			Name:      "uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: noteIndexes{
		NotePkey: index{
			Type: "btree",
			Name: "note_pkey",
			Columns: []indexColumn{
				{
					Name:         "uuid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "note_pkey",
		Columns: []string{"uuid"},
		Comment: "",
	},

	Comment: "",
}

type noteColumns struct {
	Created   column
	Deleted   column
	Latitude  column
	Longitude column
	Text      column
	Updated   column
	UUID      column
}

func (c noteColumns) AsSlice() []column {
	return []column{
		c.Created, c.Deleted, c.Latitude, c.Longitude, c.Text, c.Updated, c.UUID,
	}
}

type noteIndexes struct {
	NotePkey index
}

func (i noteIndexes) AsSlice() []index {
	return []index{
		i.NotePkey,
	}
}

type noteForeignKeys struct{}

func (f noteForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type noteUniques struct{}

func (u noteUniques) AsSlice() []constraint {
	return []constraint{}
}

type noteChecks struct{}

func (c noteChecks) AsSlice() []check {
	return []check{}
}
