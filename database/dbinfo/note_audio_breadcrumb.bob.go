// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var NoteAudioBreadcrumbs = Table[
	noteAudioBreadcrumbColumns,
	noteAudioBreadcrumbIndexes,
	noteAudioBreadcrumbForeignKeys,
	noteAudioBreadcrumbUniques,
	noteAudioBreadcrumbChecks,
]{
	Schema: "",
	Name:   "note_audio_breadcrumb",
	Columns: noteAudioBreadcrumbColumns{
		Cell: column{
			Name:      "cell",
			DBType:    "numeric",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteAudioUUID: column{
			Name:      "note_audio_uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteAudioVersion: column{
			Name:      "note_audio_version",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Position: column{
			Name:      "position",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: noteAudioBreadcrumbIndexes{
		NoteAudioBreadcrumbPkey: index{
			Type: "btree",
			Name: "note_audio_breadcrumb_pkey",
			Columns: []indexColumn{
				{
					Name:         "note_audio_version",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
				{
					Name:         "note_audio_uuid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
				{
					Name:         "\"position\"",
					Desc:         null.FromCond(false, true),
					IsExpression: true,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false, false, false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "note_audio_breadcrumb_pkey",
		Columns: []string{"note_audio_version", "note_audio_uuid", "position"},
		Comment: "",
	},
	ForeignKeys: noteAudioBreadcrumbForeignKeys{
		NoteAudioBreadcrumbNoteAudioBreadcrumbNoteAudioVersionNoteAudioUUIDFkey: foreignKey{
			constraint: constraint{
				Name:    "note_audio_breadcrumb.note_audio_breadcrumb_note_audio_version_note_audio_uuid_fkey",
				Columns: []string{"note_audio_version", "note_audio_uuid"},
				Comment: "",
			},
			ForeignTable:   "note_audio",
			ForeignColumns: []string{"version", "uuid"},
		},
	},

	Comment: "",
}

type noteAudioBreadcrumbColumns struct {
	Cell             column
	Created          column
	NoteAudioUUID    column
	NoteAudioVersion column
	Position         column
}

func (c noteAudioBreadcrumbColumns) AsSlice() []column {
	return []column{
		c.Cell, c.Created, c.NoteAudioUUID, c.NoteAudioVersion, c.Position,
	}
}

type noteAudioBreadcrumbIndexes struct {
	NoteAudioBreadcrumbPkey index
}

func (i noteAudioBreadcrumbIndexes) AsSlice() []index {
	return []index{
		i.NoteAudioBreadcrumbPkey,
	}
}

type noteAudioBreadcrumbForeignKeys struct {
	NoteAudioBreadcrumbNoteAudioBreadcrumbNoteAudioVersionNoteAudioUUIDFkey foreignKey
}

func (f noteAudioBreadcrumbForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.NoteAudioBreadcrumbNoteAudioBreadcrumbNoteAudioVersionNoteAudioUUIDFkey,
	}
}

type noteAudioBreadcrumbUniques struct{}

func (u noteAudioBreadcrumbUniques) AsSlice() []constraint {
	return []constraint{}
}

type noteAudioBreadcrumbChecks struct{}

func (c noteAudioBreadcrumbChecks) AsSlice() []check {
	return []check{}
}
