// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Users = Table[
	userColumns,
	userIndexes,
	userForeignKeys,
	userUniques,
	userChecks,
]{
	Schema: "",
	Name:   "user_",
	Columns: userColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "nextval('user__id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		DisplayName: column{
			Name:      "display_name",
			DBType:    "character varying",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		PasswordHashType: column{
			Name:      "password_hash_type",
			DBType:    "public.hashtype",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		PasswordHash: column{
			Name:      "password_hash",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Username: column{
			Name:      "username",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: userIndexes{
		UserPkey: index{
			Type: "btree",
			Name: "user__pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "user__pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Comment: "",
}

type userColumns struct {
	ID               column
	DisplayName      column
	PasswordHashType column
	PasswordHash     column
	Username         column
}

func (c userColumns) AsSlice() []column {
	return []column{
		c.ID, c.DisplayName, c.PasswordHashType, c.PasswordHash, c.Username,
	}
}

type userIndexes struct {
	UserPkey index
}

func (i userIndexes) AsSlice() []index {
	return []index{
		i.UserPkey,
	}
}

type userForeignKeys struct{}

func (f userForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type userUniques struct{}

func (u userUniques) AsSlice() []constraint {
	return []constraint{}
}

type userChecks struct{}

func (c userChecks) AsSlice() []check {
	return []check{}
}
