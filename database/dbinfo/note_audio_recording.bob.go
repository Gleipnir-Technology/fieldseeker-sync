// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var NoteAudioRecordings = Table[
	noteAudioRecordingColumns,
	noteAudioRecordingIndexes,
	noteAudioRecordingForeignKeys,
	noteAudioRecordingUniques,
	noteAudioRecordingChecks,
]{
	Schema: "",
	Name:   "note_audio_recording",
	Columns: noteAudioRecordingColumns{
		Created: column{
			Name:      "created",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Deleted: column{
			Name:      "deleted",
			DBType:    "timestamp without time zone",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Duration: column{
			Name:      "duration",
			DBType:    "interval",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		NoteUUID: column{
			Name:      "note_uuid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Transcript: column{
			Name:      "transcript",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		UUID: column{
			Name:      "uuid",
			DBType:    "text",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: noteAudioRecordingIndexes{
		NoteAudioRecordingPkey: index{
			Type: "btree",
			Name: "note_audio_recording_pkey",
			Columns: []indexColumn{
				{
					Name:         "uuid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "note_audio_recording_pkey",
		Columns: []string{"uuid"},
		Comment: "",
	},
	ForeignKeys: noteAudioRecordingForeignKeys{
		NoteAudioRecordingNoteAudioRecordingNoteUUIDFkey: foreignKey{
			constraint: constraint{
				Name:    "note_audio_recording.note_audio_recording_note_uuid_fkey",
				Columns: []string{"note_uuid"},
				Comment: "",
			},
			ForeignTable:   "note",
			ForeignColumns: []string{"uuid"},
		},
	},

	Comment: "",
}

type noteAudioRecordingColumns struct {
	Created    column
	Deleted    column
	Duration   column
	NoteUUID   column
	Transcript column
	UUID       column
}

func (c noteAudioRecordingColumns) AsSlice() []column {
	return []column{
		c.Created, c.Deleted, c.Duration, c.NoteUUID, c.Transcript, c.UUID,
	}
}

type noteAudioRecordingIndexes struct {
	NoteAudioRecordingPkey index
}

func (i noteAudioRecordingIndexes) AsSlice() []index {
	return []index{
		i.NoteAudioRecordingPkey,
	}
}

type noteAudioRecordingForeignKeys struct {
	NoteAudioRecordingNoteAudioRecordingNoteUUIDFkey foreignKey
}

func (f noteAudioRecordingForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.NoteAudioRecordingNoteAudioRecordingNoteUUIDFkey,
	}
}

type noteAudioRecordingUniques struct{}

func (u noteAudioRecordingUniques) AsSlice() []constraint {
	return []constraint{}
}

type noteAudioRecordingChecks struct{}

func (c noteAudioRecordingChecks) AsSlice() []check {
	return []check{}
}
