// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var FSSpeciesabundances = Table[
	fsSpeciesabundanceColumns,
	fsSpeciesabundanceIndexes,
	fsSpeciesabundanceForeignKeys,
	fsSpeciesabundanceUniques,
	fsSpeciesabundanceChecks,
]{
	Schema: "",
	Name:   "fs_speciesabundance",
	Columns: fsSpeciesabundanceColumns{
		Bloodedfem: column{
			Name:      "bloodedfem",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Creationdate: column{
			Name:      "creationdate",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Creator: column{
			Name:      "creator",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Eggs: column{
			Name:      "eggs",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Editdate: column{
			Name:      "editdate",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Editor: column{
			Name:      "editor",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Females: column{
			Name:      "females",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Gravidfem: column{
			Name:      "gravidfem",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Globalid: column{
			Name:      "globalid",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Larvae: column{
			Name:      "larvae",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Males: column{
			Name:      "males",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Objectid: column{
			Name:      "objectid",
			DBType:    "integer",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Poolstogen: column{
			Name:      "poolstogen",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Processed: column{
			Name:      "processed",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Pupae: column{
			Name:      "pupae",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Species: column{
			Name:      "species",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Total: column{
			Name:      "total",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		TrapdataID: column{
			Name:      "trapdata_id",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Unknown: column{
			Name:      "unknown",
			DBType:    "smallint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedDate: column{
			Name:      "created_date",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedUser: column{
			Name:      "created_user",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		GeometryX: column{
			Name:      "geometry_x",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		GeometryY: column{
			Name:      "geometry_y",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		LastEditedDate: column{
			Name:      "last_edited_date",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		LastEditedUser: column{
			Name:      "last_edited_user",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Globalzscore: column{
			Name:      "globalzscore",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		H3R7: column{
			Name:      "h3r7",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		H3R8: column{
			Name:      "h3r8",
			DBType:    "text",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		R7score: column{
			Name:      "r7score",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		R8score: column{
			Name:      "r8score",
			DBType:    "double precision",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Yearweek: column{
			Name:      "yearweek",
			DBType:    "bigint",
			Default:   "NULL",
			Comment:   "",
			Nullable:  true,
			Generated: false,
			AutoIncr:  false,
		},
		Updated: column{
			Name:      "updated",
			DBType:    "timestamp without time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: fsSpeciesabundanceIndexes{
		FSSpeciesabundancePkey: index{
			Type: "btree",
			Name: "fs_speciesabundance_pkey",
			Columns: []indexColumn{
				{
					Name:         "objectid",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "fs_speciesabundance_pkey",
		Columns: []string{"objectid"},
		Comment: "",
	},

	Comment: "",
}

type fsSpeciesabundanceColumns struct {
	Bloodedfem     column
	Creationdate   column
	Creator        column
	Eggs           column
	Editdate       column
	Editor         column
	Females        column
	Gravidfem      column
	Globalid       column
	Larvae         column
	Males          column
	Objectid       column
	Poolstogen     column
	Processed      column
	Pupae          column
	Species        column
	Total          column
	TrapdataID     column
	Unknown        column
	CreatedDate    column
	CreatedUser    column
	GeometryX      column
	GeometryY      column
	LastEditedDate column
	LastEditedUser column
	Globalzscore   column
	H3R7           column
	H3R8           column
	R7score        column
	R8score        column
	Yearweek       column
	Updated        column
}

func (c fsSpeciesabundanceColumns) AsSlice() []column {
	return []column{
		c.Bloodedfem, c.Creationdate, c.Creator, c.Eggs, c.Editdate, c.Editor, c.Females, c.Gravidfem, c.Globalid, c.Larvae, c.Males, c.Objectid, c.Poolstogen, c.Processed, c.Pupae, c.Species, c.Total, c.TrapdataID, c.Unknown, c.CreatedDate, c.CreatedUser, c.GeometryX, c.GeometryY, c.LastEditedDate, c.LastEditedUser, c.Globalzscore, c.H3R7, c.H3R8, c.R7score, c.R8score, c.Yearweek, c.Updated,
	}
}

type fsSpeciesabundanceIndexes struct {
	FSSpeciesabundancePkey index
}

func (i fsSpeciesabundanceIndexes) AsSlice() []index {
	return []index{
		i.FSSpeciesabundancePkey,
	}
}

type fsSpeciesabundanceForeignKeys struct{}

func (f fsSpeciesabundanceForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type fsSpeciesabundanceUniques struct{}

func (u fsSpeciesabundanceUniques) AsSlice() []constraint {
	return []constraint{}
}

type fsSpeciesabundanceChecks struct{}

func (c fsSpeciesabundanceChecks) AsSlice() []check {
	return []check{}
}
