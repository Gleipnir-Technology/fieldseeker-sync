// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var GooseDBVersions = Table[
	gooseDBVersionColumns,
	gooseDBVersionIndexes,
	gooseDBVersionForeignKeys,
	gooseDBVersionUniques,
	gooseDBVersionChecks,
]{
	Schema: "",
	Name:   "goose_db_version",
	Columns: gooseDBVersionColumns{
		ID: column{
			Name:      "id",
			DBType:    "integer",
			Default:   "IDENTITY",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		VersionID: column{
			Name:      "version_id",
			DBType:    "bigint",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		IsApplied: column{
			Name:      "is_applied",
			DBType:    "boolean",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Tstamp: column{
			Name:      "tstamp",
			DBType:    "timestamp without time zone",
			Default:   "now()",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: gooseDBVersionIndexes{
		GooseDBVersionPkey: index{
			Type: "btree",
			Name: "goose_db_version_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "goose_db_version_pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Comment: "",
}

type gooseDBVersionColumns struct {
	ID        column
	VersionID column
	IsApplied column
	Tstamp    column
}

func (c gooseDBVersionColumns) AsSlice() []column {
	return []column{
		c.ID, c.VersionID, c.IsApplied, c.Tstamp,
	}
}

type gooseDBVersionIndexes struct {
	GooseDBVersionPkey index
}

func (i gooseDBVersionIndexes) AsSlice() []index {
	return []index{
		i.GooseDBVersionPkey,
	}
}

type gooseDBVersionForeignKeys struct{}

func (f gooseDBVersionForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type gooseDBVersionUniques struct{}

func (u gooseDBVersionUniques) AsSlice() []constraint {
	return []constraint{}
}

type gooseDBVersionChecks struct{}

func (c gooseDBVersionChecks) AsSlice() []check {
	return []check{}
}
